[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\n# Testing the function\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \"l\")\nremove_Occ(\"hello\", \""], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    # Sort the matrix by row sum\n    row_sums = [sum(row) for row in zip(*matrix)]\n    sorted_matrix = [[row[i] for row in matrix] for I in range(len(row_sums))]\n    return sorted_matrix\n"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\nassert text_lowercase_underscore(\"ab_cbbbc\")==('Found a match!')"], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\n# Test the function with some sample inputs\nsquare_perimeter(10)\nsquare_perimeter(15)\nsquare_perimeter(20)\nsquare_perimeter(25)\nsquare_perimeter(30)\nsquare_perimeter(35)\nsquare_perimeter(40)\nsquare_perimeter(45)\nsquare_perimeter(50)\nsquare_perimeter(55)\nsquare_perimeter(60)\nsquare_perimeter(65)\nsquare_perimeter(70)\nsquare_perimeter(75)\nsquare_perimeter(80)\nsquare_perimeter(85)\nsquare_perimeter(90)\nsquare_perimeter(95)\nsquare_perimeter(100)\nsquare_perimeter(105)\nsquare_perimeter(110)\nsquare_perimeter(115)\nsquare_perimeter(120)\nsquare_perimeter(125)\nsquare_perimeter(130)\nsquare_perimeter(135)\nsquare_perimeter(140)\nsquare_perimeter(145)\nsquare_perimeter(150)\nsquare_perimeter(155)\nsquare_perimeter(160)\nsquare_perimeter(165)\nsquare_perimeter(170)\nsquare_perimeter(175)\nsquare_perimeter(180)\nsquare_perimeter(185)\nsquare_perimeter(190)\nsquare_perimeter(195)\nsquare_perimeter(200)\nsquare_perimeter(205)\nsquare_perimeter(210)\nsquare_perimeter(215)\nsquare_perimeter(220)\nsquare_perimeter(225)\nsquare_perimeter(230)\nsquare_perimeter(235)\nsquare_perimeter(240)\nsquare_perimeter(245)\nsquare_perimeter(250)\nsquare_perimeter(255)\nsquare_perimeter(260)\nsquare_perimeter(265)\nsquare_perimeter(270)\nsquare_perimeter(275)\nsquare_perimeter(280)\nsquare_perimeter(285)\nsquare_perimeter(290)\nsquare_perimeter(295)\nsquare_perimeter(300)\nsquare_perimeter(305)\nsquare_perimeter(310)\nsquare_perimeter(315)\nsquare_perimeter(320)\nsquare_perimeter(325)\nsquare_perimeter(330)\nsquare_perimeter(335)\nsquare_perimeter(340)\nsquare_perimeter(345)\nsquare_perimeter(350)\nsquare_perimeter(355)\nsquare_perimeter(360)\nsquare_perimeter(365)\nsquare_perimeter(370)\nsquare_perimeter(375)\nsquare_perimeter(380)\nsquare_perimeter(385)\nsquare_perimeter(390)\nsquare_perimeter(395)\nsquare_perimeter(400)\nsquare_perimeter(405)\nsquare_perimeter(410)\nsquare_perimeter(415)\nsquare_perimeter(420)\nsquare_perimeter(425)\nsquare_perimeter(430)\nsquare_perimeter(435)\nsquare_perimeter(440)\nsquare_perimeter(445)\nsquare_perimeter(450)\nsquare_perimeter(455)\nsquare_perimeter(460)\nsquare_perimeter(465)\nsquare_perimeter(470)\nsquare_perimeter(475)\nsquare_perimeter(480)\nsquare_perimeter(485)\nsquare_perimeter(490)\nsquare_perimeter(495)\nsquare_perimeter(500)\nsquare_perimeter(505)\n"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\n# Test function with sample input and expected output\ndef test_duplicate(arr):\n    assert test_duplicate(arr) == False\n\n# Call the function with sample input and expected output"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\n# Test the function with some examples"], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\n# Test the function with different numbers and expected results"], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\nassert find_first_duplicate([1, 2, 3, 4, 4, 5])==4"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\nassert find_Product([1,2,3,4,5],4) == 24"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\n# Test the function with different inputs"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\n# Example usage\nget_Odd_Occurrence([1,2,3,1,2,3,1],7) # returns 1"], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\n# Example usage\ncount_Substring_With_Equal_Ends(\"abc\") # Output: 3\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends"], ["\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\n# Example usage\nfunc([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)"], ["\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\n# Test the function with different decimal numbers\nfor decimal_num in [10, 12, 15, 16, 18, 20, 25, 26, 27, 28, 30, 32, 35, 36, 37, 38, 40, 45, 48, 50, 52, 55, 56, 57, 58, 60, 65, 66, 67, 68, 70, 75, 76, 77, 78, 80, 85, 86, 87, 88, 90, 95, 96, 97, 98, 100, 105, 106, 107, 108, 110, 115, 116, 117, 118, 120, 125, 126, 127, 128, 130, 135, 136, 137, 138, 140, 145, 146, 147, 148, 150, 155, 156, 157, 158, 160, 165, 166, 167, 168, 170, 175, 176, 177, 178, 180, 185, 186, 187, 188, 190, 195, 196, 197, 198, 200, 205, 206, 207, 208, 210, 215, 216, 217, 218, 220, 225, 226, 227, 228, 230, 235, 236, 237, 238, 240, 245, 246, 247, 248, 250, 255, 256, 257, 258, 260, 265, 266, 267, 268, 270, 275, 276, 277, 278, 280, 285, 286, 287, 288, 290, 295, 296, 297, 298, 300, 305, 306, 307, 308, 310, 315, 316, 317, 318, 320, 325, 326, 327, 328, 330, 335, 336, 337, 338, 340, 345, 346, 347, 348, 350, 355, 356, 357, 358, 360, 365, 366, 367, 368, 370, 375, 376, 377, 378, 380, 385, 386, 387, 388, 390, 395, 396, 397, 398, 400, 405, 406, 407, 408, 410, 415, 416, 4"], ["\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\nassert find_missing([1,2,3,5],6) == 6"], ["\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\n# Example usage\nsort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])\n# Output: [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"], ["\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\nassert div_even_odd([1,3,5,7,4,1,6,8])==4"], ["\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\n# Example usage\nfreq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])\n# Output: {2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1}"], ["\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]"], ["\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\n# Example usage\ntext_match_string(\"python\")\n# Output: \"Not matched!\"\n\ntext_match_string(\"python\")\n# Output: \"Matched!\""], ["\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\nassert get_gcd([1, 2, 3, 4, 5]) == 1"], ["\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\n# Test the function with some examples"], ["\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\n# Example usage\nlist_of_lists = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\nextracted_list = extract_first_or_specified_element(list_of_lists, 2)"], ["\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])"], ["\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\n# Testing the function with different values of n and t\nfor n in range(1, 10):\n    for t in range(1, 10):\n        assert tn_gp(n, t, 2) == 16\n\n# Testing the function with invalid inputs"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\n# Example usage\ncheck(70)"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\n# Test the function with some examples"], ["\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\n# Example usage\ncount_Substrings('112112',6)"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\n# Test function with sample input and expected output"], ["\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"], ["\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\n# Testing recursive_list_sum function"], ["\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\nassert pos_count([-1,2,3,4]) == 3"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\nbell_number(3)"], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\nassert is_Monotonic([5, 4, 3, 2, 1]) == False"], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\n# Example usage\ncomb_sort([5, 15, 37, 25, 79])\n# Output: [5, 15, 25, 37, 79]\n\n# Example usage with negative numbers\ncomb_sort([-5, -15, -37, -25, -79])\n# Output: [-5, -15, -25, -37, -79]\n\n# Example usage with duplicate elements\ncomb_sort([1, 1, 1, 2, 2, 2, 3, 3, 3])\n# Output: [1, 1, 1, 2, 2, 2, 3, 3, 3]\n\n# Example usage with empty list\ncomb_sort([])\n# Output: []\n\n# Example usage with non-list input\ncomb_sort(5)\n# Output: TypeError: comb_sort() takes 1 positional argument but 1 was given"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\n# Example usage\nmultiple_split('Forces of the darkness are coming into the play.')\n# Output: ['Forces of the ', 'darkness', 'are coming into the play.']\n\n# Example usage with custom delimiter\nmultiple_split('Forces of the darkness are coming into the play.', delimiter='*')\n# Output: ['Forces of the ', 'darkness', 'are coming into the play.']"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\n# Test the function with different values of n\nfor n in range(1, 10):\n    assert tetrahedral_number(n) == 3 * n * (n + 1) / 2\n\n# Test the function with invalid input"], ["\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\n# Test the function with different values for the radius\nfor I in range(1, 10):\n    assert volume_sphere(i)==4188.790204786391\n\n# Test the function with negative values for the radius\nfor I in range(-1, 1):\n    assert volume_sphere(i)==0\n\n# Test the function with zero radius"], ["\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\n# Test the function with different values of radius\nfor r in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:\n    assert surfacearea_sphere(r)==1256.6370614359173\n\n# Test the function with invalid input"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\n# Test the function with different inputs"], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\n# Test the function with some examples"], ["\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\n# Example usage\nfrequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\nassert kth_element([12,3,5,7,19], 5, 1) == 12"], ["\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\nassert eulerian_num(4, 2) == 2"], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\n# Example usage\ncount([True,False,True]) # Output: 2"], ["\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\n# Example usage\nadd_lists([5, 6, 7], (9, 10))\n# Output: (9, 10, 5, 6, 7)\n\n# Example usage with tuples as input\nadd_lists([5, 6, 7], (9, 10))\n# Output: (9, 10, 5, 6, 7)"], ["\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\n# Example usage\ncount_Hexadecimal(10,15)\n# Output: 6"], ["\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\n# Test the function with different inputs"], ["\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\n# Example usage\nextract_missing([(6, 9), (15, 34), (48, 70)], 2, 100)\n# Output: [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]"], ["\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\n# Example usage:\ncommon_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])"], ["\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\n# Test the function with different values for the height and radius\nfor height in [1, 2, 3, 4, 5]:\n    for radius in [1, 2, 3, 4, 5]:\n        perimeter = perimeter(height, radius)\n        assert perimeter == 2 * (height + radius)"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\nassert empty_dit([{1:1, 2:2}, {3:3}, {4:4}])==False"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\n# Example usage:\nlist_to_float([(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")]).should.equal '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'"], ["\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\n# Exercise 3: Generate a random string\n\n# Define a function to generate a random string\ndef generate_random_string():\n    # Generate a random string of length 10\n    return ''.join(random.choice('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') for I in range(10))\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\nassert search([1,2,3,4,5],5) == 3"], ["\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\n# Test the function with a sample input"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\n# Test the function with different inputs"], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\n# Test cases"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\n# Test the function with different inputs"], ["\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\n# Example usage\nlong_words(3,\"python is a programming language\")"], ["\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\nassert magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==True"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\nassert sum_negativenum([-2, -4, -6, -9, 11, -12, 14, -5, 17])==-32"], ["\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\n# Example usage\ncheck_last([5,7,10],3,1)"], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\n# Test the function with different values of n\nfor n in range(1, 10):\n    assert hexagonal_num(n) == 190 * n\n\n# Test the function with invalid input"], ["\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\n# Test the function with different input values"], ["\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\nassert zero_count([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==0.0"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\n# Test the function with different values of radius\nfor radius in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:\n    assert circle_circumference(radius)==62.830000000000005\n\n# Test the function with negative values of radius\nfor radius in [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]:\n    with pytest.raises(ValueError):\n        circle_circumference(radius)\n\n# Test the function with non-numeric values of radius\nfor radius in [1.1, 2.3, 3.4, 5.6, 7.8, 9.0, 10.1, 11.2, 12.3, 13.4]:\n    with pytest.raises(ValueError):\n        circle_circumference(radius)"], ["\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\n# Example usage\nextract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n# Output: [3, 4, 5, 7, 1]"], ["\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\n# Test function with sample input and expected output\ndef pancake_sort(lst):\n    # Create a list of integers to sort\n    sorted_lst = []\n    # Loop through the list and swap adjacent elements\n    for I in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            sorted_lst.append(lst[i])\n            lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    # Return the sorted list\n    return sorted_lst\n\n# Call the function with sample input and expected output"], ["\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12])) == 3"], ["\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\nassert sum_Pairs([1,2,3,4,5],2) == 6"], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n```\n\nIn this function, we first define a function `max_path_sum` that takes three arguments: the triangle, the maximum value allowed for the path sum, and the number of rows and columns in the triangle. We then define a function `find_max_path_sum` that takes a triangle as input and returns the maximum total path sum.\n\nWe use a `for` loop to iterate over each row of the triangle, and for each row, we iterate over each column and add the sum of the elements in that column to the maximum total path sum. We then return the maximum total path sum.\n\nHere's how the function works:\n\n1. We define a `max_path_sum` function that takes three arguments: the triangle, the maximum value allowed for the path sum, and the number of rows and columns in the triangle.\n\n2. We define a `find_max_path_sum` function that takes a triangle as input and returns the maximum total path sum.\n\n3. We use a `for` loop to iterate over each row of the triangle. For each row, we iterate over each column and add the sum of the elements in that column to the maximum total path sum.\n\n4. We return the maximum total path sum at the end of the loop.\n\n5. We test the function with some examples:\n"], ["\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n```\n\nExplanation:\n\nThe function takes an array `arr` and a number `k` as input. It returns the longest subsequence of length `k` such that the difference between adjacent elements is one.\n\nTo find the longest subsequence, we iterate over the array and keep track of the difference between adjacent elements. We also keep track of the length of the longest subsequence so far.\n\nAt each iteration, we find the difference between the current element and the previous element. If the difference is one, we add the current element to the longest subsequence. If the difference is not one, we remove the current element from the longest subsequence and update the length of the subsequence.\n\nFinally, we return the length of the longest subsequence.\n\nHere's the implementation:\n"], ["\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    middle = len(arr) // 2\n    left_arr = merge_sort(arr[:middle])\n    right_arr = merge_sort(arr[middle:])\n    \n    return merge(left_arr, right_arr)\n\ndef merge(left_arr, right_arr):\n    n1, n2 = len(left_arr), len(right_arr)\n    res = []\n    I = 0\n    j = 0\n    \n    while I < n1 and j < n2:\n        if left_arr[i] <= right_arr[j]:\n            res.append(left_arr[i])\n            i += 1\n        else:\n            res.append(right_arr[j])\n            j += 1\n    \n    while I < n1:\n        res.append(left_arr[i])\n        i += 1\n    \n    while j < n2:\n        res.append(right_arr[j])\n        j += 1\n    \n    return res\n"], ["\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\n# Test the function with some examples"], ["\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\n# Example usage\neven_bit_toggle_number(10)\n# Output: 0\n\n# Example usage with a given input"], ["\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\n# Example usage\nencoded_list = encode_list([1, 2, 3, 4, 5])"], ["\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\n# Test the function with different values of a, b, and n\nfor a in range(1, 10):\n    for b in range(1, 10):\n        for n in range(1, 10):\n            solution(a, b, n)\n\n# Test the function with a large number of values\nfor a in range(1, 1000):\n    for b in range(1, 1000):\n        for n in range(1, 1000):\n            solution(a, b, n)\n\n# Test the function with a large number of values\nfor a in range(1, 1000):\n    for b in range(1, 1000):\n        for n in range(1, 1000):\n            solution(a, b, n)\n\n# Test the function with a large number of values\nfor a in range(1, 1000):\n    for b in range(1, 1000):\n        for n in range(1, 1000):\n            solution(a, b, n)\n\n# Test the function with a large number of values\nfor a in range(1, 1000):\n    for b in range(1, 1000):\n        for n in range(1, 1000):\n            solution(a, b, n)\n\n# Test the function with a large number of values\nfor a in range(1, 1000):\n    for b in range(1, 1000):\n        for n in range(1, 1000):\n            solution(a, b, n)\n\n# Test the function with a large number of values\nfor a in range(1, 1000):\n    for b in range(1, 1000):\n        for n in range(1, 1000):\n            solution(a, b, n)\n\n# Test the function with a large number of values\nfor a in range(1, 1000):\n    for b in range(1, 1000):\n        for n in range(1, 1000):\n            solution(a, b, n)\n\n# Test the function with a large number of values\nfor a in range(1, 1000):\n    for b in range(1, 1000):\n        for n in range(1, 1000):\n            solution(a, b, n)\n\n# Test the function with a large number of values\nfor a in range(1, 1000):\n    for b in range(1, 1000):\n        for n in range(1, 1000):\n            solution(a, b, n)\n\n# Test the function with a large number of values\nfor a in range(1, 1000):\n    for b in range(1, 1000):\n        for n in range(1, 1000):\n            solution(a, b, n)\n\n# Test the function with a large number of values\nfor a in range(1, 1000):\n    for b in range(1, 1000):\n        for n in range(1, 1000):\n            solution(a, b, n)\n\n# Test the function with a large number of values\nfor a in range(1, 1000):\n    for b in range(1, 1000):\n        for n in range(1, 1000):\n            solution(a, b, n)\n\n# Test the function with a large number of values\nfor a in range(1, 1000):\n    for b in range(1, 1000):\n        for n in range(1, 1000):\n            solution(a, b, n)\n\n# Test the function with a large number of values\nfor a in range(1, 1000):\n    for b in range(1, 1000):\n        for n in range(1, 10"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\n# Example usage\nremove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])"], ["\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\nassert sum_range_list([1,2,3,4,5,6,7,8,9,10],1,3)==15"], ["\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\n# Testing the function with different inputs"], ["\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\nassert remove_splchar('1234567890')==('1234567890')"], ["\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\n# Example usage\ngroup_keyvalue([('a', 1), ('b', 2), ('c', 3), ('d', 4)])\n# Output: {'a': [1], 'b': [2], 'c': [3], 'd': [4]}\n\ngroup_keyvalue([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)])\n# Output: {'a': [1], 'b': [2], 'c': [3], 'd': [4], 'e': [5]}\n\ngroup_keyvalue([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)])\n# Output: {'a': [1], 'b': [2], 'c': [3], 'd': [4], 'e': [5], 'f': [6]}"], ["\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\nassert string_literals(['language'],'python language')==('Matched!')"], ["\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\n# Test the function with some examples"], ["\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\n# Test cases"], ["\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\nassert greater_specificnum([220, 330, 500],200)==True"], ["\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\n# Testing the function with some examples"], ["\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nassert check_literals('The quick brown fox jumps over the lazy dog.',['dog']) == 'Matched!'"], ["\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\nassert longest_common_subsequence(\"AABBCCD\" , \"ABCCBA\", 5, 6) == 3"], ["\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\n# Testing the function with sample inputs"], ["\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\n# Test the function with different values of x, y, and size\nfor I in range(1, 5):\n    for j in range(1, 5):\n        for k in range(1, 5):\n            if (i**2 + j**2 + k**2) <= size**2:\n                count = count_Intgral_Points(i, j, size, size)\n                assert count == 4\n            else:\n                assert count == 0\n\n# Test the function with a non-square size\nsize = 5\ncount = count_Intgral_Points(1, 1, size, size)"], ["\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\n# Test the function with different inputs"], ["\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\nExplanation:\n\nThe function `find_exponentio` takes two tuples as input and returns the corresponding exponent.\n\nThe first tuple `(10, 4, 5, 6)` has the exponent `(100000, 4096, 78125, 7776)` because the exponent of 10 raised to the power of 4 is 100000, the exponent of 4 raised to the power of 5 is 4096, the exponent of 6 raised to the power of 7 is 78125, and the exponent of 7 raised to the power of 7 is 7776.\n\nThe second tuple `(5, 6, 7, 5)` has the exponent `(100000, 4096, 78125, 7776)` because the exponent of 5 raised to the power of 6 is 100000, the exponent of 6 raised to the power of 7 is 78125, and the exponent of 7 raised to the power of 7 is 7776."], ["\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]"], ["\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\n# Test the function with some examples"], ["\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\n# Example usage\ninversion_elements((7, 8, 9, 1, 10, 7))\n# Output: (-8, -9, -10, -2, -11, -8)"], ["\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\n# Test cases"], ["\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap, item):\n    \"\"\"\n    This function takes a heap as input and replaces the smallest element with the given item.\n    \"\"\"\n    # Find the index of the smallest element in the heap\n    index = heap.find_min()\n    \n    # Swap the smallest element with the new item\n    heap.swap(index, len(heap))\n    \n    # Insert the new item at the index\n    heap.insert(index, item)\n    \n    # Return the new heap\n    return heap\n"], ["\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\n# Example usage\ncount_Num(2)\n# Output: 1\n\n# Explanation: The function takes an integer as input and returns the number of times the Oth and Nth bits are set. In this case, the function returns 1 because the Oth bit is set and the Nth bit is not set."], ["\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\n# Test the function with some examples"], ["\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\n# Test the function with sample inputs and expected outputs"], ["\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n```\n\nIn this example, the function `decode_list` takes a list as input and returns the original list decoded from the run-length encoded list. The function uses a loop to iterate through the list and extract the values from the list. The function then checks if the value is a list and if so, it recursively calls itself with the sub-list as the input. The function returns the original list decoded from the run-length encoded list."], ["\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\n# Example usage\nextract_min_max((5, 20, 3, 7, 6, 8), 2)\n# Output: (3, 5, 8, 20)"], ["\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\nassert check_type((5, 6, 7, 3, 5, 6) ) == False"], ["\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == False"], ["\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\n# Example usage:\ncount_Set_Bits(2)\n# Output: 1\n\n# Example usage:\ncount_Set_Bits(128)\n# Output: 15\n\n# Example usage:\ncount_Set_Bits(0b11111111111111111111111111111111)\n# Output: 15\n\n# Example usage:\ncount_Set_Bits(0b00000000000000000000000000000000)\n# Output: 0"], ["\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\n# Example usage\narr = [-1, 2, -3, 4, 5, 6, -7, 8, 9]\nre_arrange_array(arr, 9)\n# Output: [-1, -3, -7, 4, 5, 6, 2, 8, 9]"], ["\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n```\n\nIn this example, the function `max_sum` takes a list of lists as input and returns the maximum sum found in the right triangle of numbers. The function first checks if the input list is empty or contains only one element. If it is, the function returns the first element of the list as the maximum sum. Otherwise, it loops through the list and finds the maximum sum found so far. The function then returns the maximum sum found so far.\n\nThe `assert` statement checks that the function returns the expected value for the given input. The function is tested with different input lists and expected results are verified."], ["\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\n# Example usage\nlarg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)"], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\n# Testing the function with different values for the radius and height"], ["\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\n# Test the function with different inputs\nfor I in range(1, 10):\n    assert volume_cube(i)==pow(i, 3)*6*i\n\n# Test the function with invalid inputs"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\n# Define the function\ndef No_of_Triangle(a,b):\n    # Check if the given values are valid\n    if a < 0 or b < 0:\n        raise ValueError(\"Invalid input\")\n    elif a == 0 and b == 0:\n        return 0\n    elif a == 0:\n        return 1\n    elif b == 0:\n        return 1\n    else:\n        # Calculate the area of the equilateral triangle\n        area = (a*b)/2\n        # Calculate the number of sides of the equilateral triangle\n        sides = math.sqrt(3)*area\n        # Calculate the number of triangles that can be formed\n        return sides\n\n# Test the function"], ["\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\n# Example usage\ncheck_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)])\n# Output: {(1, 3): 2, (2, 5): 2, (3, 6): 1}"], ["\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\n# Example usage\nget_total_number_of_sequences(10, 4)"], ["\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\n# Example usage\nreplace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])"], ["\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\n# Example usage\ncount_charac(\"hello world\")\n# Output: 18\n\n# Example usage with a string with multiple words\ncount_charac(\"The quick brown fox jumps over the lazy dog.\")\n# Output: 26"], ["\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\n# Test function"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    \"\"\"\n    Find the maximum sum of bi-tonic sub-sequence for the given array.\n    \"\"\"\n    # Initialize the maximum sum to 0\n    max_sum = 0\n    \n    # Loop through the array and find the maximum sum of sub-sequence\n    for I in range(n):\n        # Find the maximum sum of sub-sequence of length I\n        max_sum = max(max_sum, max_sum_of_subsequence(arr, I))\n    \n    # Return the maximum sum of bi-tonic sub-sequence\n    return max_sum\n\n\ndef max_sum_of_subsequence(arr, n):\n    \"\"\"\n    Find the maximum sum of sub-sequence of length n in the given array.\n    \"\"\"\n    # Initialize the maximum sum to 0\n    max_sum = 0\n    \n    # Loop through the array and find the maximum sum of sub-sequence\n    for I in range(n):\n        # Find the maximum sum of sub-sequence of length I\n        max_sum = max(max_sum, max_sum_of_subsequence(arr, i))\n    \n    # Return the maximum sum of bi-tonic sub-sequence\n    return max_sum\n\n\ndef max_sum_of_subsequence(arr, n):\n    \"\"\"\n    Find the maximum sum of sub-sequence of length n in the given array.\n    \"\"\"\n    # Initialize the maximum sum to 0\n    max_sum = 0\n    \n    # Loop through the array and find the maximum sum of sub-sequence\n    for I in range(n):\n        # Find the maximum sum of sub-sequence of length I\n        max_sum = max(max_sum, max_sum_of_subsequence(arr, i))\n    \n    # Return the maximum sum of bi-tonic sub-sequence\n    return max_sum\n\n\ndef max_sum_of_subsequence(arr, n):\n    \"\"\"\n    Find the maximum sum of sub-sequence of length n in the given array.\n    \"\"\"\n    # Initialize the maximum sum to 0\n    max_sum = 0\n    \n    # Loop through the array and find the maximum sum of sub-sequence\n    for I in range(n):\n        # Find the maximum sum of sub-sequence of length I\n        max_sum = max(max_sum, max_sum_of_subsequence(arr, i))\n    \n    # Return the maximum sum of bi-tonic sub-sequence\n    return max_sum\n\n\ndef max_sum_of_subsequence(arr, n):\n    \"\"\"\n    Find the maximum sum of sub-sequence of length n in the given array.\n    \"\"\"\n    # Initialize the maximum sum to 0\n    max_sum = 0\n    \n    # Loop through the array and find the maximum sum of sub-sequence\n    for I in range(n):\n        # Find the maximum sum of sub-sequence of length I\n        max_sum = max(max_sum, max_sum_of_subsequence(arr, i))\n    \n    # Return the maximum sum of bi-tonic sub-sequence\n    return max_sum\n\n\ndef max_sum_of_subsequence(arr, n):\n    \"\"\"\n    Find the maximum sum of sub-sequence of length n in the given array.\n    \"\"\"\n    # Initialize the maximum sum to 0\n    max_sum = 0\n    \n    # Loop through the array and find the maximum sum of sub-sequence\n    for I in range(n):\n        # Find the maximum sum of sub-sequence of length I\n        max_sum = max(max_sum, max_sum_of_subsequence(arr, i))\n    \n    # Return the maximum sum of bi-tonic sub-sequence\n    return max_sum\n\n\ndef max_sum_of_subsequence(arr, n):\n    \"\"\"\n    Find the maximum sum of sub-sequence of length n in the given array.\n    \"\"\"\n    # Initialize the maximum sum to 0\n    max_sum = 0\n    \n    # Loop through"], ["\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\nassert babylonian_squareroot(100)==3.162277660168379"], ["\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\n# Testing the function with different values of n\nfor n in range(1, 10):\n    assert harmonic_sum(n) == 2 * n + 1\n\n# Testing the function with negative values of n"], ["\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\n# Example usage\nintersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])"], ["\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),5) == 1"], ["\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\n# Testing the function\ninsert_element(['Red', 'Green', 'Black'], 'c')"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\n# Example usage\nconvert(1)\n# Output: (1.0, 0.0)\n\n# Testing the function with different inputs"], ["\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\n# Example usage\ncount_Primes_nums(10)  # should return 3\ncount_Primes_nums(12)  # should return 1\ncount_Primes_nums(15)  # should return 1\ncount_Primes_nums(100)  # should return 0\ncount_Primes_nums(1000)  # should return 0\ncount_Primes_nums(10000)  # should return 0\ncount_Primes_nums(100000)  # should return 0\ncount_Primes_nums(1000000)  # should return 0\ncount_Primes_nums(10000000)  # should return 0\ncount_Primes_nums(100000000)  # should return 0\ncount_Primes_nums(1000000000)  # should return 0\ncount_Primes_nums(10000000000)  # should return 0\ncount_Primes_nums(100000000000)  # should return 0\ncount_Primes_nums(1000000000000)  # should return 0\ncount_Primes_nums(10000000000000)  # should return 0\ncount_Primes_nums(100000000000000)  # should return 0\ncount_Primes_nums(1000000000000000)  # should return 0\ncount_Primes_nums(10000000000000000)  # should return 0\ncount_Primes_nums(100000000000000000)  # should return 0\ncount_Primes_nums(1000000000000000000)  # should return 0\ncount_Primes_nums(10000000000000000000)  # should return 0\ncount_Primes_nums(100000000000000000000)  # should return 0\ncount_Primes_nums(1000000000000000000000)  # should return 0\ncount_Primes_nums(10000000000000000000000)  # should return 0\ncount_Primes_nums(100000000000000000000000)  # should return 0\ncount_Primes_nums(1000000000000000000000000)  # should return 0\ncount_Primes_nums(10000000000000000000000000)  # should return 0\ncount_Primes_nums(100000000000000000000000000)  # should return 0\ncount_Primes_nums(1000000000000000000000000000)  # should return 0\ncount_Primes_nums(10000000000000000000000000000)  # should return 0\ncount_Primes_nums(100000000000000000000000000000)  # should return 0\ncount_Primes_nums(10000"], ["\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\nassert count_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==10"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\n# Test the function with different inputs"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\n# Test the function with different values of n\nfor n in range(1, 10):\n    assert newman_prime(n) == newman_prime(n-1)\n\n# Test the function with a large value of n"], ["\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\nassert division_elements((10, 4, 6, 9), (5, 2, 3, 3)) == (2, 2, 2, 3)"], ["\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'a': 100, 'b': 200, 'x': 300, 'y': 200}"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\n# Example usage\nlist_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)"], ["\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\n# Test the function with different cube sizes\nfor size in [1, 2, 3, 4, 5]:\n    assert lateralsurface_cube(size)==lateralsurface_cube(size)\n\n# Test the function with different cube shapes\nfor shape in [\"square\", \"rectangle\", \"hexagon\", \"octagon\"]:\n    assert lateralsurface_cube(5)==lateralsurface_cube(5)\n\n# Test the function with different cube orientations\nfor orientation in [\"top\", \"bottom\", \"front\", \"back\"]:\n    assert lateralsurface_cube(5)==lateralsurface_cube(5)\n\n# Test the function with different cube orientations and shapes\nfor orientation in [\"top\", \"bottom\", \"front\", \"back\"]:\n    for shape in [\"square\", \"rectangle\", \"hexagon\", \"octagon\"]:\n        assert lateralsurface_cube(5)==lateralsurface_cube(5)\n\n# Test the function with different cube orientations and shapes and different cube sizes\nfor orientation in [\"top\", \"bottom\", \"front\", \"back\"]:\n    for shape in [\"square\", \"rectangle\", \"hexagon\", \"octagon\"]:\n        for size in [1, 2, 3, 4, 5]:\n            assert lateralsurface_cube(size)==lateralsurface_cube(size)\n\n# Test the function with different cube orientations and shapes and different cube sizes and different cube orientations\nfor orientation in [\"top\", \"bottom\", \"front\", \"back\"]:\n    for shape in [\"square\", \"rectangle\", \"hexagon\", \"octagon\"]:\n        for size in [1, 2, 3, 4, 5]:\n            for orientation2 in [\"top\", \"bottom\", \"front\", \"back\"]:\n                assert lateralsurface_cube(size)==lateralsurface_cube(size)\n\n# Test the function with different cube orientations and shapes and different cube sizes and different cube orientations and shapes\nfor orientation in [\"top\", \"bottom\", \"front\", \"back\"]:\n    for shape in [\"square\", \"rectangle\", \"hexagon\", \"octagon\"]:\n        for size in [1, 2, 3, 4, 5]:\n            for orientation2 in [\"top\", \"bottom\", \"front\", \"back\"]:\n                for shape2 in [\"square\", \"rectangle\", \"hexagon\", \"octagon\"]:\n                    assert lateralsurface_cube(size)==lateralsurface_cube(size)\n\n# Test the function with different cube orientations and shapes and different cube sizes and different cube orientations and shapes and different cube sizes\nfor orientation in [\"top\", \"bottom\", \"front\", \"back\"]:\n    for shape in [\"square\", \"rectangle\", \"hexagon\", \"octagon\"]:\n        for size in [1, 2, 3, 4, 5]:\n            for orientation2 in [\"top\", \"bottom\", \"front\", \"back\"]:\n                for shape2 in [\"square\", \"rectangle\", \"hexagon\", \"octagon\"]:\n                    for size2 in [1, 2, 3, 4, 5]:\n                        assert lateralsurface_cube(size)==lateralsurface_cube(size)\n\n# Test the function with different cube orientations and shapes and different cube sizes and different cube orientations and shapes and different cube sizes and different cube orientations and shapes\nfor orientation in [\"top\", \"bottom\", \"front\", \"back\"]:\n    for shape in [\"square\", \"rectangle\", \"hexagon\", \"octagon\"]:\n        for size in [1, 2, 3, 4, 5]:\n            for orientation2 in [\"top\", \"bottom\", \"front\", \"back\"]:\n                for shape2 in [\"square\", \"rectangle\", \"hexagon\", \"octagon\"]:\n                    for size2 in [1, 2, 3, 4, 5]:\n                        for orientation3 in [\"top\", \"bottom\", \"front\", \"back\"]:\n                            for shape3 in [\"square\", \"rectangle\", \"hexagon\", \"octagon\"]:\n                               "], ["\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\n# Test the function with different values of n\nfor I in range(1, 10):\n    assert square_Sum(i) == 10**i\n\n# Test the function with a large value of n"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\n# Test the function with some examples"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\n# Test the function with different values for the height and radius\nfor height in [1,2,3,4,5,6,7,8,9,10]:\n    for radius in [1,2,3,4,5,6,7,8,9,10]:\n        volume_cylinder(height, radius)\n\n# Check if the function works correctly"], ["\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\n# Example usage of the function"], ["\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\n# Test the function with some examples"], ["\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\n# Example usage\nsequential_search([11,23,58,31,56,77,43,12,65,19],31)\n# Output: (True, 3)\n\n# Example usage with a list\nlist_of_numbers = [11,23,58,31,56,77,43,12,65,19]\nsequential_search(list_of_numbers,31)\n# Output: (True, 3)"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\nassert all_unique([1,2,3,4,5]) == False"], ["\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]"], ["\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\n# Example 2: Matching a string with a 'c' followed by two to three 'd'.\ntext_match_two_three(\"cd\")==('Matched!')"], ["\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\n# function to find the largest sum of contiguous array in the modified array\ndef find_largest_sum_of_contiguous_array(arr, k, n):\n    # initialize the max sum to 0\n    max_sum = 0\n    \n    # loop through the array\n    for I in range(n):\n        # if the current element is greater than the previous element, update the max sum\n        if arr[i] > arr[i - k]:\n            max_sum += arr[i]\n    \n    # return the max sum\n    return max_sum\n\n# test the function"], ["\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\n# Test the function with some examples"], ["\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\nassert modular_inverse([ 1, 2, 3, 4, 5 ], 5, 7) == 1"], ["\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lst):\n    max_length = 0\n    for I in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n    return max_length, lst[max_length]\n"], ["\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if k == 0:\n        return n\n    if n % k == 0:\n        return count_no_of_ways(n // k, k)\n    return count_no_of_ways(n // k, k) + count_no_of_ways(n % k, k)\n"], ["\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\nassert otherside_rightangle(10,12)==12.0"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\n# Test the function with some examples"], ["\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\n# Example usage\nflatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n# Output: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]"], ["\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\n# Example usage\nstart_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n# Output: ('Python', 'PHP')"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\n# function to find the maximum sum of increasing subsequence\ndef max_sum_increasing_subseq(arr, start, end, k):\n    # base case: if k is 0, return the maximum sum of the first k elements\n    if k == 0:\n        return max(arr[start:end])\n    \n    # find the maximum sum of the subsequence starting from the current index\n    max_sum = arr[start]\n    for I in range(start+1, end):\n        if arr[i] > arr[i-k]:\n            max_sum = max(max_sum, arr[i])\n    \n    # return the maximum sum of the subsequence\n    return max(max_sum, arr[start:end])\n\n# test function"], ["\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\n# Testing the function with different inputs"], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\n# Example usage\nlarge_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\n# Test the function with different inputs"], ["\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\n# Testing the function with sample inputs"], ["\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n```\n\nIn this example, the function `find_last_occurrence` takes a sorted array `arr` and a given number `num` as input. It returns the index of the last occurrence of `num` in `arr`.\n\nThe function first sorts the array using the `sort` function. Then, it iterates through the array and checks if the current element is equal to `num`. If it is, it returns the index of the last occurrence of `num` in the sorted array.\n\nIf the current element is not equal to `num`, the function continues to the next element in the array.\n\nFinally, the function returns the index of the last occurrence of `num` in the sorted array.\n\nHere's how the function works:\n\n1. The `sort` function sorts the array using the `sort` function.\n2. The `find_last_occurrence` function iterates through the sorted array and checks if the current element is equal to `num`. If it is, it returns the index of the last occurrence of `num` in the sorted array.\n3. If the current element is not equal to `num`, the function continues to the next element in the array.\n4. The function returns the index of the last occurrence of `num` in the sorted array.\n\nThis function is efficient because it only needs to iterate through the array once, and it can handle any size of array."], ["\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\n# Test the function with some examples"], ["\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\n# Test the function with different input values"], ["\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]"], ["\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\nExplanation:\nThe input array is [-5, -2, 5, 2, 4, 7, 1, 8, 0, -8].\n\nThe function should return [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0].\n\nThe function should re-arrange the array in alternating positive and negative items.\n\nThe function should take the input array as an argument and return the re-arranged array.\n\nThe function should return the same array as the input array.\n\nThe function should not modify the input array."], ["\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\nassert sum_of_alternates((1, 2, 3, 4, 5, 6)) == (15, 15)"], ["\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\n# Test the function with sample input and expected output"], ["\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(lst, num, start=0):\n    \"\"\"\n    Rotate a given list by specified number of items to the left direction.\n    :param lst: list to rotate\n    :param num: number of items to rotate\n    :param start: starting index of the list to rotate\n    :return: rotated list\n    \"\"\"\n    if start == len(lst):\n        return lst\n    else:\n        return lst[start:start+num] + lst[start:]\n"], ["\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\n# Test function with sample input and expected output"], ["\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\nassert char_frequency('apple')=={'a': 2, 'l': 1, 'e': 1, 'p': 1, 'r': 1, 'i': 1, 't': 1, 'o': 1, 'p': 1, 'h': 1, 'e': 1, 'l': 1, 'l': 1, 'a': 2, 'p': 1, 'e': 1, 'r': 1, 'i': 1, 't': 1, 'o': 1, 'p': 1, 'h': 1, 'e': 1, 'l': 1, 'l': 1, 'a': 2, 'p': 1, 'e': 1, 'r': 1, 'i': 1, 't': 1, 'o': 1, 'p': 1, 'h': 1, 'e': 1, 'l': 1, 'l': 1, 'a': 2, 'p': 1, 'e': 1, 'r': 1, 'i': 1, 't': 1, 'o': 1, 'p': 1, 'h': 1, 'e': 1, 'l': 1, 'l': 1, 'a': 2, 'p': 1, 'e': 1, 'r': 1, 'i': 1, 't': 1, 'o': 1, 'p': 1, 'h': 1, 'e': 1, 'l': 1, 'l': 1, 'a': 2, 'p': 1, 'e': 1, 'r': 1, 'i': 1, 't': 1, 'o': 1, 'p': 1, 'h': 1, 'e': 1, 'l': 1, 'l': 1, 'a': 2, 'p': 1, 'e': 1, 'r': 1, 'i': 1, 't': 1, 'o': 1, 'p': 1, 'h': 1, 'e': 1, 'l': 1, 'l': 1, 'a': 2, 'p': 1, 'e': 1, 'r': 1, 'i': 1, 't': 1, 'o': 1, 'p': 1, 'h': 1, 'e': 1, 'l': 1, 'l': 1, 'a': 2, 'p': 1, 'e': 1, 'r': 1, 'i': 1, 't': 1, 'o': 1, 'p': 1, 'h': 1, 'e': 1, 'l': 1, 'l': 1, 'a': 2, 'p': 1, 'e': 1, 'r': 1, 'i': 1, 't': 1, 'o': 1, 'p': 1, 'h': 1, 'e': 1, 'l': 1, 'l': 1, 'a': 2, 'p': 1, 'e': 1, 'r': 1, 'i': 1, 't': 1, 'o': 1, 'p': 1, 'h': 1, 'e': 1, 'l': 1, 'l': 1, 'a': 2, 'p': 1, 'e': 1, 'r': 1, 'i': 1, 't': 1, 'o': 1, 'p': 1, 'h': 1, 'e': 1, 'l': 1, 'l': 1, 'a': 2, 'p': 1, 'e': 1, 'r': 1, 'i': 1, 't': 1, 'o': 1, 'p': 1, 'h': 1, 'e': 1, 'l': 1, 'l': 1, 'a': 2, 'p"], ["\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\n# Example usage\ntext_match_word(\"python.\")\n# Output: 'Found a match!'\n\n# Example usage with optional punctuation\ntext_match_word(\"python. \")\n# Output: 'Found a match!'"], ["\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\n# Example usage\ncount_Substring_With_Equal_Ends('aba')\n# Output: 4"], ["\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\nassert set_to_tuple({1, 2, 3}) == (1, 2, 3)"], ["\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\n# function to find the minimum range\ndef find_minimum_range(arr1, arr2):\n    # initialize minimum range as the first element of the first array\n    min_range = arr1[0]\n    # iterate through the second array\n    for I in range(len(arr2)):\n        # if the second array contains at least one element, update the minimum range\n        if arr2[i] < min_range:\n            min_range = arr2[i]\n    return min_range\n\n# test function"], ["\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\nExplanation:\nThe function `count_Odd_Squares` takes two arguments: the first argument is the starting number, and the second argument is the ending number. It returns the number of odd squares that are divisible by both numbers.\n\nThe function first checks if the starting number is odd. If it is, it returns 1. Otherwise, it checks if the ending number is odd. If it is, it returns 1. Otherwise, it returns 0.\n\nThe function then iterates over the range from the starting number to the ending number, and for each number, it checks if it is divisible by both numbers. If it is, it increments the count by 1. If it is not divisible by both numbers, it increments the count by 0.\n\nFinally, the function returns the count."], ["\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n```\n\nIn this function, we first define a list `numbers` containing the numbers to be searched for the difference. We then define a function `diff_consecutivenums` that takes a list as input and returns the difference between the first and last elements of the list.\n\nWe then call the `diff_consecutivenums` function with the list `[1, 1, 3, 4, 4, 5, 6, 7]` and store the result in the `diff_consecutivenums_result` variable.\n\nFinally, we compare the `diff_consecutivenums_result` with the expected result `[0, 2, 1, 0, 1, 1, 1]` to verify that the function correctly calculates the difference between two consecutive numbers in the list."], ["\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\n# Example usage:\nfind_ways(4)\n# Output: 2\n\n# Example usage:\nfind_ways(5)\n# Output: 1\n\n# Example usage:\nfind_ways(6)\n# Output: 1\n\n# Example usage:\nfind_ways(7)\n# Output: 1\n\n# Example usage:\nfind_ways(8)\n# Output: 1\n\n# Example usage:\nfind_ways(9)\n# Output: 1\n\n# Example usage:\nfind_ways(10)\n# Output: 1\n\n# Example usage:\nfind_ways(11)\n# Output: 1\n\n# Example usage:\nfind_ways(12)\n# Output: 1\n\n# Example usage:\nfind_ways(13)\n# Output: 1\n\n# Example usage:\nfind_ways(14)\n# Output: 1\n\n# Example usage:\nfind_ways(15)\n# Output: 1\n\n# Example usage:\nfind_ways(16)\n# Output: 1\n\n# Example usage:\nfind_ways(17)\n# Output: 1\n\n# Example usage:\nfind_ways(18)\n# Output: 1\n\n# Example usage:\nfind_ways(19)\n# Output: 1\n\n# Example usage:\nfind_ways(20)\n# Output: 1\n\n# Example usage:\nfind_ways(21)\n# Output: 1\n\n# Example usage:\nfind_ways(22)\n# Output: 1\n\n# Example usage:\nfind_ways(23)\n# Output: 1\n\n# Example usage:\nfind_ways(24)\n# Output: 1\n\n# Example usage:\nfind_ways(25)\n# Output: 1\n\n# Example usage:\nfind_ways(26)\n# Output: 1\n\n# Example usage:\nfind_ways(27)\n# Output: 1\n\n# Example usage:\nfind_ways(28)\n# Output: 1\n\n# Example usage:\nfind_ways(29)\n# Output: 1\n\n# Example usage:\nfind_ways(30)\n# Output: 1\n\n# Example usage:\nfind_ways(31)\n# Output: 1\n\n# Example usage:\nfind_ways(32)\n# Output: 1\n\n# Example usage:\nfind_ways(33)\n# Output: 1\n\n# Example usage:\nfind_ways(34)\n# Output: 1\n\n# Example usage:\nfind_ways(35)\n# Output: 1\n\n# Example usage:\nfind_ways(36)\n# Output: 1\n\n# Example usage:\nfind_ways(37)\n# Output: 1\n\n# Example usage:\nfind_ways(38)\n# Output: 1\n\n# Example usage:\nfind_ways(39)\n# Output: 1\n\n# Example usage:\nfind_ways(40)\n# Output: 1\n\n# Example usage:\nfind_ways(41)\n# Output: 1\n\n# Example usage:\nfind_ways(42)\n# Output: 1\n\n# Example usage:\nfind_ways(43)\n# Output: 1\n\n# Example usage:\nfind_ways(44)\n# Output: 1\n\n# Example usage:\nfind_ways(45)\n# Output: 1\n\n# Example usage:\nfind_ways(46)\n# Output: 1\n\n# Example usage:\nfind_ways(47)\n# Output: 1\n\n# Example usage:\nfind_ways(48)\n# Output: 1\n\n# Example usage:\nfind_ways(49)\n# Output: 1\n\n# Example usage:\nfind_ways(50)\n# Output: 1\n\n# Example usage:\nfind_ways(51)\n# Output: 1\n\n# Example usage:\nfind_ways(52)\n# Output: 1\n\n# Example usage:\nfind_ways"], ["\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\n# Example usage\nremove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)\n# Output: [[2, 3], [4, 5], [1, 1]]"], ["\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\n# Example usage\ncount_Rectangles(2)\n# Output: 8\n\n# Testing the function with different values of r"], ["\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\n# Test the function with sample input"], ["\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\nassert moddiv_list([1, 2, 3], [4, 5, 6])==[0, 1, 2]"], ["\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\n# Test the function with different values of n\nfor n in range(1, 10):\n    assert get_carol(n) == 7 * n + 1\n\n# Test the function with an invalid input"], ["\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2"], ["\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\n# Example usage\nadd_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4)\n# Output: [(5, 7, 8), (6, 8, 10), (7, 12, 5)]"], ["\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\n# Test the function with different input strings"], ["\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\n# Example usage\ncount_Digit(12345) # Output: 5"], ["\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\n# Example usage\nrepeat_tuples((1, 3), 4)\n# Output: ((1, 3), (1, 3), (1, 3), (1, 3))\n\n# Testing the function with different inputs"], ["\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\nassert smallest_missing([1, 2, 3, 4, 5, 6], 0, 6) == 7"], ["\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\n# function to sort a list using heap queue algorithm\ndef heap_assending(lst):\n    # create a heap queue\n    q = []\n    # add all elements to the heap queue\n    for num in lst:\n        q.append(num)\n    # remove the smallest element from the heap queue\n    heapq.heappop(q)\n    # sort the remaining elements in ascending order\n    for I in range(len(lst)):\n        heapq.heappush(q, lst[i])\n    return q\n\n# test the function"], ["\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\n# Test the function with different inputs"], ["\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\n# Example usage\nround_num(4722,10)\n# Output: 4720\n\n# Example usage with a different number\nround_num(123456789, 2)\n# Output: 123456789\n\n# Example usage with a negative number\nround_num(-123456789, 2)\n# Output: -123456789\n\n# Example usage with a non-integer number\nround_num(123456789.123456789, 2)\n# Output: 123456789.123456789\n\n# Example usage with a non-integer number with a different number of decimal places\nround_num(123456789.123456789, 3)\n# Output: 123456789.123456789\n\n# Example usage with a non-integer number with a negative number of decimal places\nround_num(123456789.123456789, -3)\n# Output: 123456789.123456789\n\n# Example usage with a non-integer number with a negative number of decimal places and a different number of decimal places\nround_num(123456789.123456789, 2, 3)\n# Output: 123456789.123456789\n\n# Example usage with a non-integer number with a negative number of decimal places and a different number of decimal places and a different number of decimal places\nround_num(123456789.123456789, 2, 3, 4)\n# Output: 123456789.123456789\n\n# Example usage with a non-integer number with a negative number of decimal places and a different number of decimal places and a different number of decimal places and a different number of decimal places\nround_num(123456789.123456789, 2, 3, 4, 5)\n# Output: 123456789.123456789\n\n# Example usage with a non-integer number with a negative number of decimal places and a different number of decimal places and a different number of decimal places and a different number of decimal places and a different number of decimal places\nround_num(123456789.123456789, 2, 3, 4, 5, 6)\n# Output: 123456789.123456789\n\n# Example usage with a non-integer number with a negative number of decimal places and a different number of decimal places and a different number of decimal places and a different number of decimal places and a different number of decimal places and a different number of decimal places\nround_num(123456789.123456789, 2, 3, 4, 5, 6, 7)\n# Output: 123456789.123456789\n\n# Example usage with a non-integer number with a negative number of decimal places and a different number of decimal places and a different number of decimal places and a different number of decimal places and a different number of decimal places and a different number of decimal places and a different number of decimal places\nround_num(123456789.123456789, 2, 3, 4, 5, 6, 7, 8)\n# Output: 123456789.123456789\n\n# Example usage with a non-integer number with a negative number of decimal places and a different number of decimal places and a different number of decimal places and a different number of decimal places and"], ["\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\n# Example usage\nremove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7))\n# Output: (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')"], ["\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\n# Test the function\nremove_Char(\"aba\",'a')"], ["\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\n# Test the function with different inputs\nfor I in range(10):\n    assert surfacearea_cuboid(1,2,3)==22\n    assert surfacearea_cuboid(4,5,6)==36\n    assert surfacearea_cuboid(7,8,9)==54\n    assert surfacearea_cuboid(10,11,12)==72\n    assert surfacearea_cuboid(12,13,14)==96\n    assert surfacearea_cuboid(15,16,17)==120\n    assert surfacearea_cuboid(18,19,20)==144\n    assert surfacearea_cuboid(21,22,23)==168\n    assert surfacearea_cuboid(24,25,26)==192\n    assert surfacearea_cuboid(27,28,29)==216\n    assert surfacearea_cuboid(30,31,32)==240\n    assert surfacearea_cuboid(33,34,35)==264\n    assert surfacearea_cuboid(36,37,38)==292\n    assert surfacearea_cuboid(39,40,41)==320\n    assert surfacearea_cuboid(42,43,44)==352\n    assert surfacearea_cuboid(45,46,47)==384\n    assert surfacearea_cuboid(48,49,50)==416\n    assert surfacearea_cuboid(51,52,53)==448\n    assert surfacearea_cuboid(54,55,56)==480\n    assert surfacearea_cuboid(57,58,59)==512\n    assert surfacearea_cuboid(60,61,62)==544\n    assert surfacearea_cuboid(63,64,65)==576\n    assert surfacearea_cuboid(66,67,68)==608\n    assert surfacearea_cuboid(69,70,71)==640\n    assert surfacearea_cuboid(72,73,74)==672\n    assert surfacearea_cuboid(75,76,77)==704\n    assert surfacearea_cuboid(78,79,80)==736\n    assert surfacearea_cuboid(81,82,83)==768\n    assert surfacearea_cuboid(84,85,86)==800\n    assert surfacearea_cuboid(87,88,89)==832\n    assert surfacearea_cuboid(90,91,92)==864\n    assert surfacearea_cuboid(93,94,95)==900\n    assert surfacearea_cuboid(96,97,98)==932\n    assert surfacearea_cuboid(99,100,101)==964\n    assert surfacearea_cuboid(102,103,104)==996\n    assert surfacearea_cuboid(105,106,107)==1028\n    assert surfacearea_cuboid(108,109,110)==1060\n    assert surfacearea_cuboid(111,112,113)==1092\n    assert surfacearea_cuboid(114,115,116)==1124\n    assert surfacearea_cuboid(117,118,119)==1156\n    assert surfacearea_cuboid(120,121,122)==1188\n    assert surfacearea_cuboid(1"], ["\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\n# Example usage\nmulti_list(3,4)\n# Output: [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n\n# Explanation: The function takes three arguments: the number of rows and columns, and two lists of integers. It generates a two-dimensional array using the `multi_list` function. The function returns the generated array as a list of lists."], ["\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\n# Testing the function with some sample inputs"], ["\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\nassert find_rotation_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2"], ["\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\n# Example usage\nfrequency_Of_Smallest([1,2,3,4,3]) # returns 1"], ["\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\n# Example usage\nget_perrin(9)\n# Output: 12"], ["\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\n# Test cases"], ["\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\n# Example usage of the function"], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\n# Test the function with different values of n\nfor n in range(1, 10):\n    assert find_lucas(n) == 76\n\n# Test the function with a non-integer input"], ["\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\n# Example usage\nadd_string([1,2,3,4],'temp{0}')\n# Output: ['temp1', 'temp2', 'temp3', 'temp4']\n\n# Testing the function with different inputs"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\n# Example usage:\nconvert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])\n# Output: [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\n# Test the function with three specific numbers"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\n# Test the function with sample input and expected output"], ["\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\n# Test the function with different input lists\nextract_nth_element([('John Doe', 23, 34), ('Jane Smith', 35, 46), ('John Doe', 47, 58), ('Jane Smith', 59, 60)], 2)\nextract_nth_element([('John Doe', 23, 34), ('Jane Smith', 35, 46), ('John Doe', 47, 58), ('Jane Smith', 59, 60)], 1)\nextract_nth_element([('John Doe', 23, 34), ('Jane Smith', 35, 46), ('John Doe', 47, 58), ('Jane Smith', 59, 60)], 0)\nextract_nth_element([('John Doe', 23, 34), ('Jane Smith', 35, 46), ('John Doe', 47, 58), ('Jane Smith', 59, 60)], 3)\nextract_nth_element([('John Doe', 23, 34), ('Jane Smith', 35, 46), ('John Doe', 47, 58), ('Jane Smith', 59, 60)], 4)\nextract_nth_element([('John Doe', 23, 34), ('Jane Smith', 35, 46), ('John Doe', 47, 58), ('Jane Smith', 59, 60)], 5)\nextract_nth_element([('John Doe', 23, 34), ('Jane Smith', 35, 46), ('John Doe', 47, 58), ('Jane Smith', 59, 60)], 6)\nextract_nth_element([('John Doe', 23, 34), ('Jane Smith', 35, 46), ('John Doe', 47, 58), ('Jane Smith', 59, 60)], 7)\nextract_nth_element([('John Doe', 23, 34), ('Jane Smith', 35, 46), ('John Doe', 47, 58), ('Jane Smith', 59, 60)], 8)\nextract_nth_element([('John Doe', 23, 34), ('Jane Smith', 35, 46), ('John Doe', 47, 58), ('Jane Smith', 59, 60)], 9)\nextract_nth_element([('John Doe', 23, 34), ('Jane Smith', 35, 46), ('John Doe', 47, 58), ('Jane Smith', 59, 60)], 10)\nextract_nth_element([('John Doe', 23, 34), ('Jane Smith', 35, 46), ('John Doe', 47, 58), ('Jane Smith', 59, 60)], 11)\nextract_nth_element([('John Doe', 23, 34), ('Jane Smith', 35, 46), ('John Doe', 47, 58), ('Jane Smith', 59, 60)], 12)\nextract_nth_element([('John Doe', 23, 34), ('Jane Smith', 35, 46), ('John Doe', 47, 58), ('Jane Smith', 59, 60)], 13)\nextract_"], ["\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == True"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\n# Recursive function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together\ndef breakSum(n):\n    if n == 0:\n        return 0\n    elif n % 3 == 0:\n        return n // 3 + breakSum(n // 3)\n    else:\n        return n // 3 + breakSum(n // 3) + n % 3\n\n# Testing the function"], ["\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\n# Example 2:"], ["\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n```\n\nIn this example, the function `round_and_sum` takes a list of numbers as input and returns the sum of the rounded numbers multiplied by the length of the list. The function first checks if the list is empty, and if it is, it returns the original list. Otherwise, it loops through the list and rounds each number to the nearest integer using the `round()` function. It then multiplies the rounded numbers by the length of the list and adds the result to the original list. Finally, the function returns the total sum multiplied by the length of the list.\n\nThe function is tested with a list of numbers, and the expected output is 243."], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\n# Test the function with some examples"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\n# Example 2: Concatenate strings with a delimiter\ndef concatenate_strings(strings):\n    return ' '.join(strings)\n"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],2)==2"], ["\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\n# Example usage\nfilter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\n# Example usage\nshell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\n# Example usage:"], ["\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\n# Example usage:\ncount_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)])\n# Output: '3'\n\n# Example usage:\ncount_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), (3, 4), (5, 6), (7, 8), (9, 10), (6, 5), (2, 1), ("], ["\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\n# Example usage\nmultiple_to_single([11, 33, 50])\n# Output: 113350\n\n# Example usage with a list of strings\nmultiple_to_single(['11', '33', '50'])\n# Output: 113350"], ["\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, 'clearly')\n\n# Test the function with sample sentences\nfor sentence in sentences:\n    assert find_adverb_position(sentence)==(0, 7, '"], ["\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\nassert positive_count([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==1.0"], ["\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\n# Example usage\ntrim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2)\n# Output: [(2,), (9,), (2,), (2,)]"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\n# Example usage\nindex_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\n# Example usage:"], ["\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\n# Example usage\nextract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n# Output: ['practice', 'solution']"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\n# Example usage\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('   Hello World   ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('   Hello World   ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World  ') # Output: 'Hello World'\nremove_whitespaces('  Hello World"], ["\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\n# Test cases\n\n# Test case 1"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\n# Example usage\nreverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n# Output: ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\nreverse_string_list(['A', 'B', 'C', 'D', 'E'])\n# Output: ['E', 'D', 'C', 'B', 'A']\n\nreverse_string_list(['1', '2', '3', '4', '5'])\n# Output: ['5', '4', '3', '2', '1']\n\nreverse_string_list(['', ' ', '1', '2', '3'])\n# Output: ['3', '2', '1', '2', '3']\n\nreverse_string_list(['', ' ', '1', '2', '3', '4'])\n# Output: ['4', '3', '2', '1', '2', '3']\n\nreverse_string_list(['', ' ', '1', '2', '3', '4', '5'])\n# Output: ['5', '4', '3', '2', '1', '2', '3']\n\nreverse_string_list(['', ' ', '1', '2', '3', '4', '5', '6'])\n# Output: ['6', '5', '4', '3', '2', '1', '2', '3']\n\nreverse_string_list(['', ' ', '1', '2', '3', '4', '5', '6', '7'])\n# Output: ['7', '6', '5', '4', '3', '2', '1', '2', '3']\n\nreverse_string_list(['', ' ', '1', '2', '3', '4', '5', '6', '7', '8'])\n# Output: ['8', '7', '6', '5', '4', '3', '2', '1', '2', '3']\n\nreverse_string_list(['', ' ', '1', '2', '3', '4', '5', '6', '7', '8', '9'])\n# Output: ['9', '8', '7', '6', '5', '4', '3', '2', '1', '2', '3']\n\nreverse_string_list(['', ' ', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A'])\n# Output: ['9', '8', '7', '6', '5', '4', '3', '2', '1', '2', '3', 'A']\n\nreverse_string_list(['', ' ', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B'])\n# Output: ['A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'A']\n\nreverse_string_list(['', ' ', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C'])\n# Output: ['C', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C']\n\nreverse_string_list(['', ' ', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D'])\n# Output: ['D', 'C', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'D']\n\nreverse_string_list(['', ' ', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E'])\n# Output: ['E', 'D', 'C', 'B', 'B"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\n# Testing the function with sample inputs"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\n# Example usage\ncheck_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\n# Testing the function with different inputs"], ["\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\nassert find_peak([1, 2, 3, 4, 5], 5) == 5"], ["\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\n# Test function with sample input and expected output"], ["\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\n# Test the function with some sample tuples"], ["\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\n# Example 2: Checking if a string is a palindrome"], ["\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\n# Test cases"], ["\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\n# Test the function with different inputs\nfor n in range(1, 11):\n    assert binomial_probability(n, 5, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(n, 10, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(n, 15, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(n, 20, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(n, 25, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(n, 30, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(n, 35, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(n, 40, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(n, 45, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(n, 50, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(n, 55, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(n, 60, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(n, 65, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(n, 70, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(n, 75, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(n, 80, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(n, 85, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(n, 90, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(n, 95, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(n, 100, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(n, 105, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(n, 110, 1.0/3) == 0.13656454808"], ["\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\n# Example usage\nsorted_list = sort_tuple([(1, 3), (3, 2), (2, 1)])"], ["\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\n# Test the function with different inputs"], ["\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\nassert extract_symmetric([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), (21, 22), (23, 24), (25, 26), (27, 28), (29, 30), (31, 32), (33, 34), (35, 36), (37, 38), (39, 40), (41, 42), (43, 44), (45, 46), (47, 48), (49, 50), (51, 52), (53, 54), (55, 56), (57, 58), (59, 60), (61, 62), (63, 64), (65, 66), (67, 68), (69, 70), (71, 72), (73, 74), (75, 76), (77, 78), (79, 80), (81, 82), (83, 84), (85, 86), (87, 88), (89, 90), (91, 92), (93, 94), (95, 96), (97, 98), (99, 100), (101, 102), (103, 104), (105, 106), (107, 108), (109, 110), (111, 112), (113, 114), (115, 116), (117, 118), (119, 120), (121, 122), (123, 124), (125, 126), (127, 128), (129, 130), (131, 132), (133, 134), (135, 136), (137, 138), (139, 140), (141, 142), (143, 144), (145, 146), (147, 148), (149, 150), (151, 152), (153, 154), (155, 156), (157, 158), (159, 160), (161, 162), (163, 164), (165, 166), (167, 168), (169, 170), (171, 172), (173, 174), (175, 176), (177, 178), (179, 180), (181, 182), (183, 184), (185, 186), (187, 188), (189, 190), (191, 192), (193, 194), (195, 196), (197, 198), (199, 200), (201, 202), (203, 204), (205, 206), (207, 208), (20"], ["\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\n# Test the function with different values of a, b, and n\nfor I in range(10):\n    assert sum_gp(1,5,2) == 31\n\n# Test the function with negative values of a, b, and n\nfor I in range(10):\n    assert sum_gp(-1,5,2) == 31\n\n# Test the function with non-integer values of a, b, and n\nfor I in range(10):\n    assert sum_gp(1.5,5,2) == 31\n\n# Test the function with non-integer values of a, b, and n\nfor I in range(10):\n    assert sum_gp(1.5,5,-2) == 31\n\n# Test the function with negative values of a, b, and n\nfor I in range(10):\n    assert sum_gp(1.5,-5,2) == 31\n\n# Test the function with non-integer values of a, b, and n\nfor I in range(10):\n    assert sum_gp(1.5,-5,-2) == 31\n\n# Test the function with non-integer values of a, b, and n\nfor I in range(10):\n    assert sum_gp(1.5,-5,2) == 31\n\n# Test the function with negative values of a, b, and n\nfor I in range(10):\n    assert sum_gp(1.5,-5,-2) == 31\n\n# Test the function with non-integer values of a, b, and n\nfor I in range(10):\n    assert sum_gp(1.5,-5,-2) == 31\n\n# Test the function with non-integer values of a, b, and n\nfor I in range(10):\n    assert sum_gp(1.5,-5,2) == 31\n\n# Test the function with negative values of a, b, and n\nfor I in range(10):\n    assert sum_gp(1.5,-5,2) == 31\n\n# Test the function with non-integer values of a, b, and n\nfor I in range(10):\n    assert sum_gp(1.5,-5,2) == 31\n\n# Test the function with non-integer values of a, b, and n\nfor I in range(10):\n    assert sum_gp(1.5,-5,2) == 31\n\n# Test the function with negative values of a, b, and n\nfor I in range(10):\n    assert sum_gp(1.5,-5,2) == 31\n\n# Test the function with non-integer values of a, b, and n\nfor I in range(10):\n    assert sum_gp(1.5,-5,2) == 31\n\n# Test the function with non-integer values of a, b, and n\nfor I in range(10):\n    assert sum_gp(1.5,-5,2) == 31\n\n# Test the function with negative values of a, b, and n\nfor I in range(10):\n    assert sum_gp(1.5,-5,2) == 31\n\n# Test the function with non-integer values of a, b, and n\nfor I in range(10):\n    assert sum_gp(1.5,-5,2) == 31\n\n# Test the function with non-integer values of a, b, and n\nfor I in range(10):\n    assert sum_gp(1.5,-5,2) == 31\n\n# Test the function with negative values of a, b, and n\nfor I in range(10):\n    assert sum_gp(1.5,-5,2) == 31\n\n# Test the function with non-integer values of a, b, and n\nfor I in range(10):\n    assert sum_gp(1.5,-5,2) == 31\n\n# Test the function with non-integer values of a, b, and n\nfor I in"], ["\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\nassert binary_search([1,2,3,5,8], 6) == True"], ["\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\n# Test cases"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\nassert remove_lowercase('Hello World!') == 'Hello World!'"], ["\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\ndef heap_queue_smallest(numbers, k):\n    \"\"\"\n    This function takes a list of numbers and a k-th smallest element as input. It returns the k-th smallest element from the list.\n    \"\"\"\n    # Create a heap queue with the given list of numbers\n    heap = []\n    for num in numbers:\n        heap.append(num)\n    \n    # Initialize the heap size to the length of the list\n    heap_size = len(numbers)\n    \n    # Create a heapify function to build the heap\n    def heapify(arr, i, heap_size):\n        # Base case: if the heap is empty\n        if i == 0:\n            return\n        \n        # Get the smallest element from the left subtree\n        smallest = i\n        for j in range(i, heap_size):\n            if arr[j] < arr[smallest]:\n                smallest = j\n        # Swap the smallest element with the current element\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        # Recursively heapify the left subtree\n        heapify(arr, smallest, heap_size)\n    \n    # Recursively heapify the list\n    for I in range(len(numbers)):\n        heapify(numbers, I, heap_size)\n    \n    # Return the k-th smallest element\n    return heap[0]\n\n# Test the function"], ["\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\n# Test the function with different values for the base and height\nfor base in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:\n    for height in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:\n        assert surfacearea_cone(base, height)==282.7433388230814\n\n# Test the function with invalid inputs"], ["\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\n# Test the function with different inputs"], ["\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\n# Example usage\nconcatenate_elements(['hello','there','have','a','rocky','day'])\n# Output: '  hello there have a rocky day'"], ["\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\n# Example usage\nnum_comm_div(2,4)\n# Output: 2\n\nnum_comm_div(3,5)\n# Output: 1\n\nnum_comm_div(6,7)\n# Output: 1\n\nnum_comm_div(8,9)\n# Output: 1\n\nnum_comm_div(10,11)\n# Output: 1\n\nnum_comm_div(12,13)\n# Output: 1\n\nnum_comm_div(14,15)\n# Output: 1\n\nnum_comm_div(16,17)\n# Output: 1\n\nnum_comm_div(18,19)\n# Output: 1\n\nnum_comm_div(20,21)\n# Output: 1\n\nnum_comm_div(22,23)\n# Output: 1\n\nnum_comm_div(24,25)\n# Output: 1\n\nnum_comm_div(26,27)\n# Output: 1\n\nnum_comm_div(28,29)\n# Output: 1\n\nnum_comm_div(30,31)\n# Output: 1\n\nnum_comm_div(32,33)\n# Output: 1\n\nnum_comm_div(34,35)\n# Output: 1\n\nnum_comm_div(36,37)\n# Output: 1\n\nnum_comm_div(38,39)\n# Output: 1\n\nnum_comm_div(40,41)\n# Output: 1\n\nnum_comm_div(42,43)\n# Output: 1\n\nnum_comm_div(44,45)\n# Output: 1\n\nnum_comm_div(46,47)\n# Output: 1\n\nnum_comm_div(48,49)\n# Output: 1\n\nnum_comm_div(50,51)\n# Output: 1\n\nnum_comm_div(52,53)\n# Output: 1\n\nnum_comm_div(54,55)\n# Output: 1\n\nnum_comm_div(56,57)\n# Output: 1\n\nnum_comm_div(58,59)\n# Output: 1\n\nnum_comm_div(60,61)\n# Output: 1\n\nnum_comm_div(62,63)\n# Output: 1\n\nnum_comm_div(64,65)\n# Output: 1\n\nnum_comm_div(66,67)\n# Output: 1\n\nnum_comm_div(68,69)\n# Output: 1\n\nnum_comm_div(70,71)\n# Output: 1\n\nnum_comm_div(72,73)\n# Output: 1\n\nnum_comm_div(74,75)\n# Output: 1\n\nnum_comm_div(76,77)\n# Output: 1\n\nnum_comm_div(78,79)\n# Output: 1\n\nnum_comm_div(80,81)\n# Output: 1\n\nnum_comm_div(82,83)\n# Output: 1\n\nnum_comm_div(84,85)\n# Output: 1\n\nnum_comm_div(86,87)\n# Output: 1\n\nnum_comm_div(88,89)\n# Output: 1\n\nnum_comm_div(90,91)\n# Output: 1\n\nnum_comm_div(92,93)\n# Output: 1\n\nnum_comm_div(94,95)\n# Output: 1\n\nnum_comm_div(96,97)\n# Output: 1\n\nnum_comm_div(98,99)\n# Output: 1\n\nnum_comm_div(10"], ["\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\n# function to add consecutive numbers\ndef add_consecutive_nums(lst):\n    # initialize a list to store the sum\n    sum_lst = []\n    # iterate through the list and add the current number to the sum list\n    for num in lst:\n        sum_lst.append(num)\n    # return the sum of the list\n    return sum_lst\n\n# test the function"], ["\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\n# Test the function with different inputs"], ["\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\nassert re_order([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"], ["\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\n# Test the function with different values of n and k\nfor n in range(1, 10):\n    for k in range(1, n+1):\n        assert permutation_coefficient(n, k) == 0\n        assert permutation_coefficient(n, k+1) == 0\n        assert permutation_coefficient(n+1, k) == 0\n        assert permutation_coefficient(n+1, k+1) == 0\n        assert permutation_coefficient(n, k) == 0\n        assert permutation_coefficient(n, k+1) == 0\n        assert permutation_coefficient(n+1, k) == 0\n        assert permutation_coefficient(n+1, k+1) == 0\n        assert permutation_coefficient(n, k) == 0\n        assert permutation_coefficient(n, k+1) == 0\n        assert permutation_coefficient(n+1, k) == 0\n        assert permutation_coefficient(n+1, k+1) == 0\n        assert permutation_coefficient(n, k) == 0\n        assert permutation_coefficient(n, k+1) == 0\n        assert permutation_coefficient(n+1, k) == 0\n        assert permutation_coefficient(n+1, k+1) == 0\n        assert permutation_coefficient(n, k) == 0\n        assert permutation_coefficient(n, k+1) == 0\n        assert permutation_coefficient(n+1, k) == 0\n        assert permutation_coefficient(n+1, k+1) == 0\n        assert permutation_coefficient(n, k) == 0\n        assert permutation_coefficient(n, k+1) == 0\n        assert permutation_coefficient(n+1, k) == 0\n        assert permutation_coefficient(n+1, k+1) == 0\n        assert permutation_coefficient(n, k) == 0\n        assert permutation_coefficient(n, k+1) == 0\n        assert permutation_coefficient(n+1, k) == 0\n        assert permutation_coefficient(n+1, k+1) == 0\n        assert permutation_coefficient(n, k) == 0\n        assert permutation_coefficient(n, k+1) == 0\n        assert permutation_coefficient(n+1, k) == 0\n        assert permutation_coefficient(n+1, k+1) == 0\n        assert permutation_coefficient(n, k) == 0\n        assert permutation_coefficient(n, k+1) == 0\n        assert permutation_coefficient(n+1, k) == 0\n        assert permutation_coefficient(n+1, k+1) == 0\n        assert permutation_coefficient(n, k) == 0\n        assert permutation_coefficient(n, k+1) == 0\n        assert permutation_coefficient(n+1, k) == 0\n        assert permutation_coefficient(n+1, k+1) == 0\n        assert permutation_coefficient(n, k) == 0\n        assert permutation_coefficient(n, k+1) == 0\n        assert permutation_coefficient(n+1, k) == 0\n        assert permutation_coefficient(n+1, k+1) == 0\n        assert permutation_coefficient(n, k) == 0\n        assert permutation_coefficient(n, k+1) == 0\n        assert permutation_coefficient(n+1, k) == 0\n        assert permutation_coefficient(n+1, k+1) == 0\n        assert permutation_coefficient(n, k) == 0\n        assert permutation_coefficient(n, k+1) == 0\n        assert permutation_coefficient(n+1, k) == 0\n        assert permutation_coefficient(n+1, k+1) == 0\n        assert permutation_coefficient("], ["\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\n# Test the function with some sample inputs and expected outputs\nremove_words(['apple', 'banana', 'cherry', 'orange', 'grape'], ['apple', 'banana', 'cherry', 'orange'])"], ["\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\n# Example usage\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"]) # True\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"green\",\"red\",\"black\",\"orange\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"black\",\"red\",\"green\",\"orange\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"red\",\"green\",\"black\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"red\",\"black\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"red\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"red\",\"green\",\"black\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"red\",\"black\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"red\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"blue\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"yellow\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"red\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"blue\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"yellow\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"red\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"blue\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"yellow\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"red\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"blue\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"yellow\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"red\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"blue\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"yellow\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"red\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"blue\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"yellow\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"red\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"blue\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"yellow\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"red\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"blue\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"yellow\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"red\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"blue\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"yellow\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],"], ["\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\nassert no_of_subsequences([1,2,3,4], 5) == 0"]]