[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(str, ch):\n    str1 = \"\"\n    for i in range(len(str)):\n        if str[i] != ch:\n            str1 += str[i]\n    return str1\n"], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    # Sort each row individually\n    for i in range(len(matrix)):\n        matrix[i].sort()\n    \n    # Sort the matrix based on the sorted rows\n    return sorted(matrix)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\nimport collections\nfrom typing import List, Dict\n\ndef count_common(words: List[str]) -> Dict[str, int]:\n    # Initialize a counter for each word and set it to zero\n    counts = collections.Counter()\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Increment the count of the current word\n        counts[word] += 1\n    \n    # Find the maximum count among all words\n    max_count = max(counts.values())\n    \n    # Filter out words that have the maximum count\n    result = {word: count for word, count in counts.items() if count == max_count}\n    \n    return result\n\n\n# Test case\nwords = ['red', 'green', 'black', 'pink', 'black', 'white', 'black', 'eyes', 'white', 'black', 'orange', 'pink', 'pink', 'red', 'red', 'white', 'orange', 'white', \"black\", 'pink', 'green', 'green', 'pink', 'green', 'pink', 'white', 'orange', \"orange\", 'red']"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(length,breadth,height):\n    return length*breadth*height\n\nlength = int(input())\nbreadth = int(input())\nheight = int(input())\n"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(s):\n    res = []\n    for i in range(len(s)):\n        if s[i].islower():\n            res.append(s[:i])\n            s = s[i+1:]\n    return res + [s]<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    # Your code here\n    return \"Found a match!\" if any(char.islower() and char == '_' for char in text) else 'Not found!'\n"], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    return 4*side\n"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(str1, str2):\n    return \"\".join([char for char in str1 if char not in str2])<|endoftext|>"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] == arr[arr.index(i)]:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(n):\n    for i in range(1, n+1):\n        if (i * (i + 1)) == n:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n    return [n*i for i in range(m)]\n\n"], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        else:\n            seen.add(num)\n    return None\n\n# Test case"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(lists):\n    max_sum = 0\n    for i in range(len(lists)):\n        current_list = lists[i]\n        if len(current_list) > 0:\n            current_max = max(current_list)\n            max_sum += current_max\n\n    return max_sum\n\n\nlists = [[1,2,3],[4,5,6],[10,11,12],[7,8,9]]"], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary):\n    return int(binary,2)\n"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(arr,n):\n    # Initialize result as 1\n    res = 1\n\n    # Iterate through each element in the array\n    for i in range(n):\n\n        # Check if the current element is not equal to its index\n        if arr[i] != i:\n            # Multiply the result with the difference between the current element and its index\n            res *= (arr[i]-i)\n\n    return res\n\n\n# Test case"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuples_list: list, k: int):\n    return len(set(tuple for t in tuples_list for _ in range(k))) <= 1\n\n# Test cases"], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(strings):\n    for i in range(len(strings)):\n        if strings[i].isdigit():\n            del strings[i]\n    return strings\n\nstrings = ['4words', '3letters', '4digits']"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n,k):\n    if k==n or k==0:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1)+binomial_Coeff(n-1,k)\n"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr):\n    count = {}\n    for i in arr:\n        if i not in count:\n            count[i] = 0\n        count[i] += 1\n\n    for key, value in count.items():\n        if value % 2 != 0:\n            return key\n\n"], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == string[-1]:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nfrom heapq import heappush, heappop\ndef topKFrequent(nums,k):\n    # Create an empty dictionary to store the frequency of each number in nums\n    freq = {}\n    for num in nums:\n        if num not in freq:\n            freq[num] = 0\n        freq[num] += 1\n\n    # Use a min-heap to keep track of the top k numbers with highest frequencies\n    h = []\n    for key, value in freq.items():\n        heappush(h, (value, key))\n        if len(h) > k:\n            heappop(h)\n\n    # Extract the top k numbers from the heap\n    res = []\n    while h:\n        res.append(heappop(h)[1])\n\n    return res\n\n"], ["\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_prime_factors(n):\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            return i\n        i += 1\n"], ["\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_to_binary(decimal):\n    if decimal == 0:\n        return \"0\"\n    else:\n        return str(decimal % 2) + decimal_to_binary(int(decimal / 2))\n"], ["\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(arr, n):\n    for i in range(0,n-1):\n        if arr[i+1] - arr[i] != 1:\n            return arr[i]+1\n\narr = [1,2,3,5]\nn = len(arr)"], ["\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n):\n    return (n * (n + 1)) // 2\n\n"], ["\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(x,y,n):\n    if x > y:\n        return -1\n    elif n < 0 or n >= (x-y+1)*9**y:\n        return -1\n    \n    # Find the number with which we need to multiply\n    num = int((n-1)/(y+1))\n    \n    # Find the position within that number\n    pos = n-(num*(y+1)) - 1\n    \n    # Return the digit at that position\n    return str(num)[pos]<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(lst):\n    # Convert the list into a set to remove duplicates\n    lst = set(lst)\n    \n    # Sort the unique elements in ascending order\n    sorted_lst = sorted(lst)\n    \n    return sorted_lst\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(arr):\n    # Find the first even and odd numbers in the array\n    evens = [num for num in arr if num % 2 == 0]\n    odds = [num for num in arr if num % 2 != 0]\n\n    # Return the division of the two lists\n    return sum(evens) / len(odds)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearrange_string(s):\n    # Create a dictionary to count the frequency of each character\n    char_count = {}\n    for c in s:\n        if c in char_count:\n            char_count[c] += 1\n        else:\n            char_count[c] = 1\n\n    # Sort the characters by their frequencies, from highest to lowest\n    sorted_chars = sorted(char_count.items(), key=lambda x: -x[1])\n\n    result = \"\"\n    for i in range(len(sorted_chars)):\n        # Append the current character to the result\n        result += sorted_chars[i][0]\n        # If there is at least one more occurrence of this character left,\n        # append it again but with an extra space after it\n        if i < len(sorted_chars) - 1 and sorted_chars[i+1][1] > 0:\n            result += \" \"\n        # Decrease the frequency of the current character\n        sorted_chars[i][1] -= 1\n\n    return result\n\n\n# Test the function"], ["\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\ndef freq_element(lists):\n    return Counter([item for sublist in lists for item in sublist])<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))<|endoftext|>"], ["\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(arr,n):\n    count = {}\n    for i in arr:\n        if i not in count.keys():\n            count[i] = 0\n        count[i] += 1\n\n    total_sum = 0\n    for key,value in count.items():\n        if value > 1:\n            total_sum += (key * (value*(value-1)//2))\n\n    return total_sum\n\n\narr = [1,2,3,1,1,4,5,6]\nn = len(arr)"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\ndef text_match(text):\n    # Write your code here\n    pattern = r\"[a-z]+_[a-z]+\"\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n\n\n# Test the function"], ["\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\nimport re\n\ndef text_match_string(text):\n    if re.match(r'^python', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n"], ["\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\nfrom typing import List\n\n\ndef get_gcd(arr: List[int]) -> int:\n    \"\"\"\n    Find the greatest common divisor (GCD) of an array of integers.\n\n    Args:\n        arr (List[int]): An array of positive integers.\n\n    Returns:\n        int: The GCD of all numbers in the array.\n    \"\"\"\n\n    # Initialize the GCD with the first element of the array\n    g = arr[0]\n\n    # Iterate through each number in the array and update the GCD\n    for i in range(1, len(arr)):\n        g = _gcd(g, arr[i])\n\n    return g\n\n\ndef _gcd(a: int, b: int) -> int:\n    \"\"\"\n    Helper function to calculate the GCD using Euclidean algorithm.\n\n    Args:\n        a (int): First integer.\n        b (int): Second integer.\n\n    Returns:\n        int: The GCD of `a` and `b`.\n    \"\"\"\n\n    while b != 0:\n        t = b\n        b = a % b\n        a = t\n\n    return a<|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(arr):\n    for i in range(len(arr)):\n        if arr[i] in arr[:i]:\n            return False\n    return True\n"], ["\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    # Write your code here\n    if (a > b):\n        return -1\n\n    result = 1\n    for i in range(b+1):\n        result *= i\n\n    return result % 10\n\n"], ["\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(number):\n    result = 0\n    for i in range(32): # loop through the binary representation of the number\n        if (number & (1 << i)) != 0: # check if the ith bit is set\n            result |= (1 << i) # set the ith bit in the result\n\n    return result\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef extract_elements(matrix, index):\n    result = []\n    for row in matrix:\n        if index < len(row):\n            result.append(row[index])\n    return result\n\n# Test the function\nmatrix = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]\nindex = 0"], ["\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(lst):\n    return min(lst, key=len)<|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    return (a==b and b==c)<|endoftext|>"], ["\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(base,height):\n    return base*height\n"], ["\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(string):\n    if len(string) < 2:\n        return False\n    else:\n        return string[0] == string[-1]\n"], ["\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    # Find the maximum value in the array\n    max_val = max(arr)\n    \n    # Create an empty count array with size equal to the range of values in the input array\n    count_arr = [0] * (max_val + 1)\n    \n    # Count the occurrences of each value in the input array\n    for num in arr:\n        count_arr[num] += 1\n    \n    # Modify the count array such that each element at index i now contains the sum of counts of all elements less than or equal to i\n    for i in range(1, len(count_arr)):\n        count_arr[i] += count_arr[i-1]\n    \n    # Initialize an output array to store the sorted result\n    output_arr = [None] * len(arr)\n    \n    # Build the output array by placing each element in its correct position\n    for num in reversed(arr):\n        output_arr[count_arr[num]-1] = num\n        count_arr[num] -= 1\n    \n    return output_arr\n\n# Test the function\narr = [1, 23, 4, 5, 6, 7, 8]\nsorted_arr = counting_sort(arr)"], ["\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,n,r):\n    return (a*(r**n-1))/(r-1)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(n):\n    return n == 2 * int(str(n)[::-1]) - 1\n"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(arr,n):\n    arr.sort()\n    max_num = \"\"\n    for i in range(n-1,-1,-1):\n        if (arr[i] != 0):\n            max_num += str(arr[i])\n            break\n\n    for j in range(i+1,n):\n        if (arr[j] > int(max_num[-1])):\n            max_num += str(arr[j])\n\n    return int(max_num)\n"], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_signs(a,b):\n    if (a*b)<0:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    return (n + 1) * ((3*n - 2) // 2)\n\ndef get_nth_octagonal_number(n):\n    return n * (3*n - 2) // 2\n"], ["\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\nfrom typing import List\n\n\ndef max_len_sub(arr: List[int], k: int):\n    if not arr:\n        return 0\n\n    dp = [1] * len(arr)\n    for i in range(1, len(arr)):\n        for j in range(i - 1, -1, -1):\n            if abs(arr[i] - arr[j]) <= k:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n\n"], ["\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_substring(s, n):\n    # Write your code here\n    res = []\n    for i in range(n-1):\n        temp = s[i]\n        for j in range(i+1,n):\n            temp += s[j]\n            if len(temp) > n:\n                break\n            elif int(temp) == len(temp):\n                res.append(temp)\n    return len(res)\n"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(list):\n    return min(list)\n"], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\nfrom typing import List\n\n\ndef max_difference(tup: List[tuple]) -> int:\n    \"\"\"\n    Finds the maximum difference between two elements in the given tuple list.\n\n    :param tup: A list of tuples containing integers.\n    :return: The maximum difference between any two elements in the list.\n    \"\"\"\n    # Sort the list of tuples based on the first element in each tuple\n    sorted_tups = sorted(tup)\n\n    # Initialize variables to store the minimum and maximum values encountered so far\n    min_val = float('inf')\n    max_diff = -float('inf')\n\n    for i in range(len(sorted_tups)):\n        if sorted_tups[i][0] < min_val:\n            min_val = sorted_tups[i][0]\n        else:\n            diff = sorted_tups[i][0] - min_val\n            max_diff = max(max_diff, diff)\n\n    return max_diff<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(list_of_tuples):\n    return sorted(list_of_tuples, key=lambda x: x[1])<|endoftext|>"], ["\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(lst):\n    if not lst:\n        return 0\n    else:\n        return lst[0] + recursive_list_sum(lst[1:])<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(list):\n    return sum(1 for i in list if i > 0)<|endoftext|>"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    if n == 0:\n        return 1\n    else:\n        return sum(bell_number(i) for i in range(n)) + bell_number(n-1)\n"], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    if len(arr) <= 2:\n        return True\n\n    increasing = False\n    decreasing = False\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            increasing = True\n        elif arr[i] < arr[i - 1]:\n            decreasing = True\n\n    return increasing and decreasing\n\n"], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(list1,list2):\n    for i in range(len(list1)):\n        if list1[i:i+len(list2)]==list2:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuples):\n    if len(set(map(len,tuples))) != 1:\n        return \"Not All Tuples Have Same Length\"\n    else:\n        return \"All Tuples Have Same Length\"<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(arr):\n    gap = len(arr)\n    shrink_factor = 1.3\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n        swapped = False\n\n        for i in range(len(arr) - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n\n    return arr\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(n):\n    if n%2==0:\n        return False\n    else:\n        return True\n"], ["\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\n\ndef multiple_split(string, *delimiters):\n    return [s for s in re.split('|'.join(map(re.escape, delimiters)), string) if s]<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, words):\n    for i in range(len(words)):\n        if len(set(patterns[i])) != len(set(words[i])):\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(tuples_list, divisor):\n    result = []\n    for tup in tuples_list:\n        if all(x % divisor == 0 for x in tup):\n            result.append(tup)\n    return result\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(length,width):\n    return (length-1)*(width-1)\n"], ["\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(n):\n    if n < 0:\n        return True\n\n    s = str(n)\n    e_sum = o_sum = 0\n\n    for i in range(len(s)):\n        if int(s[i]) % 2 == 0:\n            e_sum += int(s[i])\n        else:\n            o_sum += int(s[i])\n\n    if e_sum - o_sum != 0:\n        return True\n    else:\n        return False\n\n"], ["\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(n):\n    # Initialize the counter for numbers with odd number of set bits\n    count = 0\n\n    # Iterate through all possible values from 1 to n\n    for i in range(1, n + 1):\n        # Count the number of set bits (1s) in the binary representation of i\n        num_set_bits = bin(i).count('1')\n\n        # If the number of set bits is odd, increment the counter\n        if num_set_bits % 2 != 0:\n            count += 1\n\n    return count\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    if len(word) % 2 != 0:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\ndef tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) / 6\n"], ["\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tup1, tup2):\n    return tuple(zip(tup1, tup2))<|endoftext|>"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\nimport math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3\n\n"], ["\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(str):\n    res = 0\n    for i in str:\n        res += ord(i)\n    return chr(res)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    if n <= 2:\n        return n\n\n    # Initialize the first two numbers of the sequence\n    seq = [1, 1]\n\n    for i in range(2, n + 1):\n        next_num = seq[-1] + seq[-2]\n        seq.append(next_num)\n\n    return seq[n - 1]\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\nimport math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2\n\n"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\nimport math\n\n\ndef centered_hexagonal_number(n):\n    return (n * ((3 * n - 1))) / 2 + 1\n\n"], ["\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}<|endoftext|>"], ["\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(lst):\n    count = {}\n    for i in lst:\n        if i not in count.keys():\n            count[i] = 1\n        else:\n            count[i] += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    if n % 2 != 0:\n        return (n - 1)\n    else:\n        return (n // 2)\n"], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(list):\n    return max([len(i) for i in list])<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(list, sub):\n    for i in range(len(list)):\n        if list[i] == sub:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(num):\n    num = str(num)\n    for i in range(0, len(num) - 1):\n        if abs(int(num[i]) - int(num[i + 1])) != 1:\n            return False\n    return True\n\n"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a,b):\n    return pow(a,b)\n"], ["\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples):\n    # Sort the list of tuples based on the second element in each tuple\n    sorted_tuples = sorted(tuples, key=lambda x: x[1])\n\n    # Return the first (and only) element in the sorted list\n    return sorted_tuples[0][0]<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(lists):\n    min_length = len(lists[0])\n    for i in range(1,len(lists)):\n        if(len(lists[i]) < min_length):\n            min_length = len(lists[i])\n    return min_length\n\nlists = [[1],[1,2]]"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    freq = {}\n    for sublist in lists:\n        for item in sublist:\n            if item not in freq:\n                freq[item] = 0\n            freq[item] += 1\n    return freq\n"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(list):\n    product = 1\n    for i in range(len(list)):\n        product *= list[i]\n    return product / len(list)<|endoftext|>"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(num):\n    return bin(num)[2:]<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(num):\n    num_str = str(num)\n    if len(num_str) % 2 == 0:\n        half_len = int(len(num_str)/2)\n        left_half = num_str[:half_len]\n        right_half = num_str[half_len:]\n        reversed_right_half = right_half[::-1]\n        new_num_str = left_half + reversed_right_half\n    else:\n        half_len = int((len(num_str)-1)/2)\n        left_half = num_str[:half_len+1]\n        right_half = num_str[half_len+1:]\n        reversed_right_half = right_half[::-1]\n        new_num_str = left_half + reversed_right_half\n\n    return int(new_num_str)\n"], ["\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(arr,k):\n    return arr[k-1]<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    # capitalize first letter of each component and join them together\n    return ''.join(x.capitalize() or '_' for x in components)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef eulerian_num(n: int, m: int):\n    if n < 0:\n        return 0\n\n    if n == 0 and m > 0:\n        return 0\n\n    if n == 0 or m == 0:\n        return 1\n\n    return (eulerian_num(n - 1, m) + eulerian_num(n - 1, m - 1)) % 10**9 + 7\n\n"], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(lst):\n    return [[x for x in sorted(sublist)] for sublist in lst]<|endoftext|>"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(lst):\n    return sum(map(bool, lst))<|endoftext|>"], ["\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(list1, tuple1):\n    return tuple(list1 + tuple1)<|endoftext|>"], ["\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start,end):\n    count = 0\n    for i in range(start,end+1):\n        if str(i).isdecimal():\n            continue\n        elif len(str(i))%2==0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\nfrom heapq import heappush, heappop\ndef merge_sorted_lists(lists):\n    # Initialize the min-heap with all elements from the lists\n    heap = []\n    for i in range(len(lists)):\n        if lists[i]:\n            heappush(heap, (lists[i].pop(0), i))\n\n    result = []\n\n    while heap:\n        value, list_index = heappop(heap)\n        result.append(value)\n\n        if lists[list_index]:\n            heappush(heap, (lists[list_index].pop(0), list_index))\n    \n    return result\n\n# Test case"], ["\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(s,n):\n    if n%2==0:\n        return -1\n    else:\n        for i in range(n//2):\n            if s[i]!=s[n-i-1]:\n                return -1\n        return (n//2)+1\n"], ["\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(lst, start, end):\n    # Sort the list of tuples by their first element\n    lst.sort()\n\n    # Initialize variables for tracking the current range and the previous range\n    prev_range = None\n    curr_range = None\n\n    # Iterate through each tuple in the sorted list\n    for i in range(len(lst)):\n        if lst[i][0] < start:\n            continue\n\n        if lst[i][0] > end:\n            break\n\n        if not curr_range or lst[i][0] - prev_range[1] >= 1:\n            if curr_range is None:\n                curr_range = [start, lst[i][0]]\n            else:\n                curr_range = [curr_range[0], max(curr_range[1], lst[i][0])]\n        \n        prev_range = lst[i]\n\n    return [[prev_range[0], curr_range[0]], [curr_range[1], end]]\n\n\n# Test cases"], ["\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(lists):\n    result = []\n    for lst in lists:\n        if len(result) == 0:\n            result.extend(lst)\n        else:\n            result = list(set(result).intersection(set(lst)))\n    return result\n"], ["\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\nimport math\n\ndef perimeter(r,h):\n    return 2*math.pi*r*(r+h)\n"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n"], ["\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(lst):\n    freq = {}\n    for tup in lst:\n        if len(tup) not in freq.keys():\n            freq[len(tup)] = 0\n        freq[len(tup)] += 1\n    return [(k,v) for k,v in sorted(freq.items())]<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef is_empty(list):\n    for i in range(len(list)):\n        if len(list[i]) != 0:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(t):\n    return int(''.join(map(str,t)))<|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(list):\n    return [(float(x[0]), float(x[1])) for x in list]<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    return list(string)<|endoftext|>"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr,n):\n    i = 0\n    while(i<n-1):\n        if arr[i] != arr[i+1]:\n            return arr[i]\n        else:\n            i += 1\n"], ["\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\nfrom itertools import combinations\n\ndef max_product_tuple(tuples):\n    # Find all possible pairs in the tuple list\n    pair_combinations = list(combinations(tuples, 2))\n    \n    # Calculate the product for each pair and return the maximum product\n    return max([a * b for a, b in pair_combinations])<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, target_sum):\n    arr.sort()\n    for i in range(len(arr)):\n        left = i + 1\n        right = len(arr) - 1\n\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target_sum:\n                return True\n            elif current_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n\n    return False\n\n\n# Test case\narr = [2, 7, 4, 0, 9, 5, 1, 3]\ntarget_sum = 8"], ["\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(n):\n    return sum(range(2, n+1)) * (n + 1)\n"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef is_amicable(n):\n    # Calculate the sum of proper divisors for n\n    def sum_of_divisors(num):\n        divisors = []\n        for i in range(1, num // 2 + 1):\n            if num % i == 0:\n                divisors.append(i)\n        return sum(divisors)\n\n    # Check if two numbers are amicable\n    def are_amicable(a, b):\n        return sum_of_divisors(a) == b and sum_of_divisors(b) == a\n\n    # Iterate through numbers up to n-1 and check for amicable pairs\n    for i in range(2, n):\n        j = sum_of_divisors(i)\n        if i != j and are_amicable(i, j):\n            return True\n\n    return False\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\nimport math\n\ndef angle_complex(x,y):\n    return math.atan2(y,x)<|endoftext|>"], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(s, k):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n        elif s[i] == '0':\n            count -= 1\n\n        if count < -k:\n            continue\n\n        max_count = max(max_count, count)\n    \n    return max_count + k\n\n"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum(n,m):\n    s=0\n    for i in range(1,min(n,m)+1):\n        if n%i==0 and m%i==0:\n            s+=i\n    return s\n"], ["\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a,b):\n    if b==0:\n        return 0\n    else:\n        return a+multiply_int(a,b-1)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    return [word for word in words if len(word) > n]<|endoftext|>"], ["\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(square):\n    # check if the sum of each row is equal\n    for i in range(len(square)):\n        if sum(square[i]) != sum(square[0]):\n            return False\n\n    # check if the sum of each column is equal\n    for j in range(len(square[0])):\n        col_sum = 0\n        for i in range(len(square)):\n            col_sum += square[i][j]\n        if col_sum != sum(square[0]):\n            return False\n\n    # check if the sum of the main diagonal is equal\n    diag_sum = 0\n    for i in range(len(square)):\n        diag_sum += square[i][i]\n\n    if diag_sum != sum(square[0]):\n        return False\n\n    # check if the sum of the secondary diagonal is equal\n    sec_diag_sum = 0\n    for i in range(len(square)):\n        sec_diag_sum += square[i][len(square) - 1 - i]\n\n    if sec_diag_sum != sum(square[0]):\n        return False\n\n    return True\n\n"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(lst):\n    return max(set(lst), key=lst.count)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(s):\n    \"\"\"\n    :param s: input string\n    :return: reversed vowels in the input string\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    # convert the string into list for easy manipulation\n    s_list = list(s)\n    left, right = 0, len(s) - 1\n\n    while left < right:\n        if s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            s_list[left], s_list[right] = s_list[right], s_list[left]\n            left += 1\n            right -= 1\n\n    return ''.join(s_list)\n\n"], ["\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return ''.join(tup)<|endoftext|>"], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(lst):\n    return sum(filter(lambda x: x < 0, lst))<|endoftext|>"], ["\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,q):\n    if len(arr)%2==0:\n        return 'EVEN'\n    else:\n        for i in range(p):\n            arr.append(q)\n            if len(arr)%2==0:\n                return 'EVEN'\n            else:\n                continue\n        return 'ODD'<|endoftext|>"], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    return n * (2*n - 1)\n\n"], ["\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(units):\n    if units<=100:\n        return 3*units\n    elif units>100 and units<=200:\n        return (3*100)+(2*(units-100))\n    else:\n        return (3*100)+((units-200)*2)\n"], ["\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(arr):\n    return arr.count(0)/len(arr) if len(arr)>0 else 0\n\n# Test case"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(num):\n    if num <= 0:\n        return False\n\n    while num > 0:\n        if num % 2 != 0:\n            return False\n        num = num // 2\n\n    return True\n\n"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\nimport math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\n"], ["\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tup):\n    return [x for x in tup if len(x) == 1]<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\nfrom typing import List\n\n\ndef flip(arr: List[int], i: int) -> None:\n    \"\"\"\n    Flip the array from index `i` to the end\n    :param arr: The array to be flipped\n    :param i: Index at which to start flipping\n    :return: None\n    \"\"\"\n    left = i + 1\n    right = len(arr) - 1\n\n    while left < right:\n        temp = arr[left]\n        arr[left] = arr[right]\n        arr[right] = temp\n        left += 1\n        right -= 1\n\n\ndef reverse(arr: List[int], k: int) -> None:\n    \"\"\"\n    Reverse the first `k` elements in the array\n    :param arr: The array to be reversed\n    :param k: Number of elements to be reversed\n    :return: None\n    \"\"\"\n    for i in range(k // 2):\n        temp = arr[i]\n        arr[i] = arr[k - i - 1]\n        arr[k - i - 1] = temp\n\n\ndef pancake_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Sorts an array using pancake sort algorithm\n    :param arr: Array to be sorted\n    :return: Sorted array\n    \"\"\"\n    flips = []\n    n = len(arr)\n\n    # Iterate over each element in the array\n    for i in range(n):\n        max_index = i\n\n        # Find the maximum element and its index\n        for j in range(i, n):\n            if arr[j] > arr[max_index]:\n                max_index = j\n\n        # If the current element is not the maximum element\n        if max_index != i:\n\n            # Move the maximum element to the front\n            reverse(arr, max_index + 1)\n            flips.append(max_index + 1)\n\n            # Move the maximum element to its correct position\n            reverse(arr, i + 1)\n            flips.append(i + 1)\n\n    return flips\n\n"], ["\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1,list2,list3):\n    return sum(map(lambda x,y,z: 1 if x==y and y==z else 0 ,list1,list2,list3))<|endoftext|>"], ["\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tup):\n    count = 0\n    for i in tup:\n        if type(i) is list:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    # Write your code here\n    s=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            s+=abs(arr[i]-arr[j])\n    return s\n"], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr,n):\n    # Write your code here\n    arr.sort()\n    return abs(arr[n-1]-arr[0])<|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    return sum(ord(char) for char in string)\n"], ["\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\nfrom typing import List\n\n\ndef max_path_sum(triangle: List[List[int]], row: int, col: int):\n    if not triangle or not triangle[row]:\n        return 0\n\n    # Base case:\n    if row == len(triangle) - 1:\n        return triangle[row][col]\n\n    left = max_path_sum(triangle, row + 1, col)\n    right = max_path_sum(triangle, row + 1, col + 1)\n\n    return triangle[row][col] + max(left, right)\n\n"], ["\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(n):\n    # Base case: if n is 0, return 0\n    if n == 0:\n        return 0\n\n    # Recursive case: calculate the sum of the first half and the second half\n    return max(sum_digits_twoparts(n // 2), (n % 2) + sum_digits_twoparts(n - 1))<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\nfrom typing import List\n\n\ndef longest_subseq_with_diff_one(nums: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n\n    :param nums: Array of integers\n    :return: Length of the longest subsequence with diff = 1\n    \"\"\"\n    if not nums or len(nums) < 2:\n        return 0\n\n    max_len = 1\n    prev_num = nums[0]\n    curr_len = 1\n\n    for i in range(1, len(nums)):\n        if nums[i] - prev_num == 1:\n            curr_len += 1\n            max_len = max(max_len, curr_len)\n        else:\n            curr_len = 1\n\n        prev_num = nums[i]\n\n    return max_len<|endoftext|>"], ["\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(n, l):\n    if n < 0:\n        return False\n\n    for i in range(len(l)):\n        if l[i] == n:\n            return True\n    return False\n\n"], ["\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(a,b):\n    if gcd(a,b)==1:\n        return True\n    else:\n        return False\n\ndef gcd(x,y):\n    while(y):\n        x,y=y,x%y\n    return x<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n\n    left_sorted = merge_sort(left_half)\n    right_sorted = merge_sort(right_half)\n\n    return merge(left_sorted, right_sorted)\n\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n\n    return result\n\n\n# Test case\narr = [3, 4, 2, 6, 5, 7, 1, 9]\nsorted_arr = merge_sort(arr)"], ["\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\nimport math\ndef parabola_vertex(a,b,c):\n    x = -b / (2*a) \n    y = c - (a*x**2 + b*x)/2\n    return(x,y)\n"], ["\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(lists, index):\n    return [i[index] for i in lists]\n"], ["\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(num):\n    # Initialize the result variable\n    res = 0\n\n    # Iterate through each bit in the binary representation of num\n    while num > 0:\n        # Check if the least significant bit is set (i.e., odd)\n        if num & 1:\n            # Toggle the corresponding bit in the result\n            res |= 1 << (num & -num)\n\n        # Right shift num by one position to process the next bit\n        num >>= 1\n\n    return res\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tup):\n    return tuple(map(int, tup))<|endoftext|>"], ["\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        count = 1\n        j = i + 1\n        while j < len(lst) and lst[i] == lst[j]:\n            count += 1\n            j += 1\n        result.append([count, lst[i]])\n        i = j\n    return result\n"], ["\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(arr,k,n):\n    if n==1:\n        return 0\n\n    arr.sort()\n    l = len(arr)\n    i=0\n    j=l-1\n    count = 0\n    while(i<j and k>0):\n        diff = abs(arr[i]-arr[j])\n        if(diff<=k):\n            k -= diff\n            count += diff\n            i+=1\n        else:\n            count += k\n            break\n    return count\n\n"], ["\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if month in ['December','January','February']:\n        return 'winter'\n    elif month in ['March','April','May']:\n        return 'spring'\n    elif month in ['June','July','August']:\n        return 'summer'\n    else:\n        return 'autumn'<|endoftext|>"], ["\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\nfrom typing import Tuple\n\n\ndef solution(a: int, b: int, n: int) -> str:\n    if not (a > 0 or b > 0):\n        return 'No solutions'\n    elif a < b:\n        return f'x = {n // a}, y = {n % a}'\n    else:\n        return f'No solutions'\n\n"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1,list2):\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n"], ["\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    if n == 0:\n        return 0\n    elif n < 0:\n        return None\n    else:\n        return n + sum_series(n - 2)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\nimport math\n\ndef area_polygon(n,s):\n    return (n*s**2)/(4*math.tan(math.pi/n))\n"], ["\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(n1,n2):\n    if n1==n2:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(s):\n    # Initialize the counter for matching positions\n    match_count = 0\n    \n    # Iterate through each character in the string\n    for i in range(len(s)):\n        # Check if the current character is an English letter\n        if s[i].isalpha():\n            # Convert both characters to lowercase for comparison\n            char1 = s[i].lower()\n            char2 = 'a'.lower() if s[0].isupper() else 'A'\n            \n            # Increment the counter if they are at the same position in the alphabet\n            if ord(char1) - ord(char2) == 0:\n                match_count += 1\n                \n    return match_count\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr,n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n\n    # If the number is already a power of two, return it directly\n    if (n & (n - 1)) == 0:\n        return n\n\n    # Find the highest bit set in n and shift it left by one position\n    return 1 << (n.bit_length() - 1)\n\n# Test cases"], ["\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr,n,x):\n    count = 0\n    for i in range(0,len(arr)):\n        if arr[i] == x:\n            count += 1\n    return count\n\narr = [1,2,3]\nn = len(arr)\nx = 4"], ["\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\nimport math\n\n\ndef get_pell(n):\n    if n <= 0:\n        return None\n\n    # base case\n    if n == 1 or n == 2:\n        return 1\n\n    # recursive call\n    else:\n        return (get_pell(n - 1) + get_pell(n - 2)) * 2 ** (n - 1)\n\n"], ["\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(list, start_index, end_index):\n    return sum(list[start_index:end_index+1])<|endoftext|>"], ["\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(side):\n    return 5 * side\n"], ["\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    return string.count('std')<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(s):\n    return ''.join([i for i in s if i.isalnum()])<|endoftext|>"], ["\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(key_value_pairs):\n    result = {}\n    for k, v in key_value_pairs:\n        if k not in result:\n            result[k] = []\n        result[k].append(v)\n    return result\n\n# Test the function\nkey_value_pairs = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]"], ["\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(s):\n    stack = []\n    for i in s:\n        if i == '(' or i == '{' or i == '[':\n            stack.append(i)\n        elif len(stack) > 0 and (i == ')' and stack[-1] == '(') or \\\n             (i == '}' and stack[-1] == '{') or \\\n             (i == ']' and stack[-1] == '['):\n                stack.pop()\n        else:\n            return False\n\n    return True if len(stack) == 0 else False\n\n"], ["\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    return (a+b+c) * 2\n"], ["\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\ndef answer(a,b):\n    if a > b:\n        temp = a\n        a = b\n        b = temp\n\n    for i in range(a,b+1):\n        if i % a == 0 and i % b == 0:\n            return (a,i)\n"], ["\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(str1, str2):\n    if str1.lower() in str2.lower():\n        return 'Matched!'\n    else:\n        return 'Not matched!'<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(num):\n    # Your code here\n    sum = 0\n    for i in range(len(str(num))):\n        sum += int(str(num)[i])\n    return num == sum * (num - 1)\n"], ["\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\nimport math\n\ndef distance(lat1, lon1, lat2, lon2):\n    # convert decimal degrees to radians \n    lon1, lat1, lon2, lat2 = map(math.radians, [lon1, lat1, lon2, lat2])\n\n    # haversine formula \n    dlat = lat2 - lat1 \n    dlon = lon2 - lon1 \n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a)) \n    r = 6371 # Radius of earth in kilometers. Use 3956 for miles\n    return(c*r)\n"], ["\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef common_prefix(strs, n):\n    if len(strs) == 0:\n        return ''\n    elif len(strs) == 1:\n        return strs[0]\n    \n    min_len = min(len(s) for s in strs)\n    i = 0\n    while i < min_len and all(s[i] == strs[0][i] for s in strs):\n        i += 1\n\n    return strs[0][:i]\n"], ["\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\nimport re\n\ndef find_character(string):\n    upper = []\n    lower = []\n    special = []\n    number = []\n\n    for i in string:\n        if i.isupper():\n            upper.append(i)\n        elif i.islower():\n            lower.append(i)\n        elif i.isdigit():\n            number.append(i)\n        else:\n            special.append(i)\n\n    return (upper, lower, special, number)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(arr, k, n):\n    # Initialize result\n    res = 0\n\n    # Fix the first element and find pairs with other elements\n    for i in range(n - k + 1):\n        j = i + k\n        while j < n:\n            if arr[i] != arr[j]:\n                res += 1\n            j += 1\n\n    return res\n\n\n# Test case\narr = [1, 5, 3, 4, 2]\nk = 5\nn = len(arr)"], ["\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(list1,num):\n    for i in range(len(list1)):\n        if list1[i]>num:\n            return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\nimport math\n\ndef parabola_focus(a,b,c):\n    x = -b / (2 * a) \n    y = (-c - b**2 / (4*a)) / a\n    return(x,y)\n"], ["\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\n\ndef check_literals(string, lits):\n    for lit in lits:\n        if re.search(lit, string):\n            return \"Matched!\"\n    return \"No match found!\"\n\n"], ["\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(str1, str2):\n    m = len(str1)\n    n = len(str2)\n\n    # Create a table to store lengths of longest common subsequences\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Fill the table bottom-up\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # The length of the longest common subsequence is stored in dp[m][n]\n    return dp[m][n]\n\n# Test case\nstr1 = \"AGGTAB\"\nstr2 = \"GXTXAYB\"\nlength = longest_common_subsequence(str1, str2)"], ["\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(n):\n    for i in range(int(n**0.5)+1):\n        if n % (i*i) == 0:\n            return True\n    return False\n"], ["\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr):\n    n = len(arr)\n    for i in range(n):\n        while arr[i] > 0 and arr[i] <= n and arr[arr[i]-1] != arr[i]:\n            temp = arr[arr[i]-1]\n            arr[arr[i]-1] = arr[i]\n            arr[i] = temp\n\n    for i in range(1,n+1):\n        if arr[i-1] != i:\n            return i\n    \n    return n+1\n\n"], ["\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2):\n    return (x2-x1+1)*(y2-y1+1)\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthname(month):\n    if month in [\"April\", \"June\",\"September\",\"November\"]:\n        return True\n    elif month in [\"January\", \"March\",\"May\",\"July\",\"August\",\"October\",\"December\"]:\n        return False\n    else:\n        return None\n"], ["\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(s):\n    for i in s:\n        if i.isalpha():\n            return False\n        elif i.isdigit():\n            return False\n    else:\n        return True\n"], ["\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_duplicates(tup):\n    return tuple(set(tup))\n\n# Test case"], ["\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal):\n    return int(str(octal),8)\n"], ["\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(arr,n,x):\n    l = 0 \n    r = n-1\n\n    while(l<=r):\n        mid = (l+r)//2\n\n        if arr[mid] == x and (mid==0 or arr[mid-1]<x):\n            return mid\n        \n        elif arr[mid]>x:\n            r = mid - 1\n\n        else:\n            l = mid + 1\n    \n    return -1\n\n\narr = [1,2,3,4,5,6,6]\nn = len(arr)"], ["\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(tuples_list, k):\n    # Remove tuples of length k\n    return [tup for tup in tuples_list if len(tup) != k]<|endoftext|>"], ["\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(tuple_1: tuple, tuple_2: tuple) -> tuple:\n    return tuple([x ** y for x, y in zip(tuple_1, tuple_2)])<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nimport math\n\ndef largest_triangle(a,b):\n    return (a*b*math.sqrt(3)) / 2\n\n"], ["\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    i = 0\n    while (n > 0):\n        n = n // 2\n        i += 1\n\n    return pow(2, i - 1)\n"], ["\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(lst):\n    max_value = max(lst)\n    return [i for i, x in enumerate(lst) if x == max_value]<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    if len(set(lst)) == 1:\n        return True\n    else: \n        return False\n"], ["\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(s):\n    return \"\".join([i for i in s if not int(i) % 2])<|endoftext|>"], ["\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(x,y):\n    count = 0\n    while x > 0 or y > 0:\n        if (x % 10 != y % 10):\n            count += 1\n        x //= 10\n        y //= 10\n    return count\n"], ["\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(s, c):\n    return s.count(c)\n"], ["\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(tup):\n    # Initialize an empty list to store the inverted values\n    inverted_values = []\n    \n    # Iterate through each element in the tuple\n    for i in range(len(tup)):\n        # Check if the current element is less than its index (i.e., it's an inversion)\n        if tup[i] < i:\n            # Append the negative value of the inversion to the list\n            inverted_values.append(-tup[i])\n        else:\n            # If not, append the original value to the list\n            inverted_values.append(tup[i])\n    \n    return tuple(inverted_values)<|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tup):\n    # Initialize an empty list to store concatenated elements\n    result = []\n    \n    # Iterate through each tuple in the input tuple\n    for t in tup:\n        # Concatenate adjacent elements and add them to the result list\n        result.append(t[0] + t[1])\n    \n    return tuple(result)  # Convert the result list back into a tuple\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\ndef find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    max_length = 0\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n            \n            max_length = max(max_length, dp[i][j])\n    \n    return max_length\n\n# Test case"], ["\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\ndef is_decimal(s):\n    return bool(re.match(r'^\\d+(\\.\\d{1,2})?$', s))<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, value):\n    # Write your code here\n    pass\n\n# Test case\nheap = [25, 44, 68, 21, 39, 23, 89]"], ["\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\n\ndef is_allowed_specific_char(string):\n    pattern = r\"^[a-zA-Z0-9]+$\"\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\n\n"], ["\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n, m):\n    return bin(n).count('1') - bin(m).count('1')\n"], ["\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    return (n*(n+1)*(2*n+1))//6\n"], ["\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(str1, str2):\n    # Initialize an empty list to store the concatenated strings\n    result = []\n    \n    # Iterate through each tuple in str1 and str2\n    for i in range(len(str1)):\n        # Concatenate the corresponding elements from both tuples\n        result.append(str1[i] + str2[i])\n    \n    return tuple(result)  # Convert the list back into a tuple\n\n# Test the function with the provided example"], ["\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\nimport math\n\ndef degree_radian(radian):\n    return radian * 180 / math.pi\n\n"], ["\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\nfrom typing import List\n\ndef decode_list(list:List[List[int]]) -> List[int]:\n    result = []\n    for i in range(len(list)):\n        if type(list[i]) == int:\n            result.extend([list[i]] * list[i])\n        else:\n            result.extend(list[i])\n    return result\n\n"], ["\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list1, list2):\n    for sublist in list2:\n        found = False\n        for item in sublist:\n            if item in list1:\n                found = True\n            else:\n                return False\n        if not found:\n            return False\n    return True\n"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        else:\n            seen.add(char)\n    return None\n\n# Test cases"], ["\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(a,b):\n    if a > b:\n        return (a-b)//2 + 1\n    else:\n        return (b-a)//2 + 1\n"], ["\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(tup, k):\n    return sorted(set(tup))[:k] + list(sorted(set(tup))[::-1][:k])<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(string,n):\n    # Split the string into words\n    words = string.split()\n    \n    # Initialize an empty list to store the modified words\n    new_words = []\n    \n    # Iterate over each word in the list\n    for i in range(len(words)):\n        # Check if the current word contains any special characters (spaces, commas, or dots)\n        if ' ' in words[i] or ',' in words[i] or '.' in words[i]:\n            # Replace all instances of the special character(s) with a colon\n            words[i] = words[i].replace(' ', ':').replace(',',':').replace('.',':')\n        \n        # Add the modified word to the new list\n        new_words.append(words[i])\n    \n    # Join the modified words back together and return the result\n    return \" \".join(new_words)\n\n# Test the function with the provided example"], ["\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(lst):\n    for i in lst:\n        if i % 2 == 0:\n            return i\n"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tup):\n    # your code here\n    return len(set(type(i).__name__ for i in tup)) <= 1\n"], ["\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\nfrom typing import List\n\n\ndef is_majority(arr: List[int], n: int, k: int) -> bool:\n    if len(arr) < k:\n        return False\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] > k:\n            right = mid - 1\n        elif arr[mid] < k:\n            left = mid + 1\n        else:\n            # Check if there are more than half of k elements on the left side\n            if mid - left >= (k * 2):\n                return True\n            # Check if there are more than half of k elements on the right side\n            if right - mid >= (k * 2):\n                return True\n            # If not, then we need to move towards the middle\n            if arr[left] != k and arr[right] != k:\n                return False\n\n    return False<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    # Initialize the counter for set bits\n    count = 0\n\n    # Loop through each bit in the binary representation of n\n    while n:\n        # If the least significant bit is 1, increment the counter\n        if n & 1:\n            count += 1\n        # Right shift n by one position to check the next bit\n        n >>= 1\n\n    return count\n\n\n# Test the function with an example"], ["\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr,start,end):\n    if start > end:\n        return -1\n    mid = (start + end)//2\n    if arr[mid] < arr[end]:\n        return arr[mid]\n    elif arr[start] <= arr[mid]:\n        return find_Min(arr,mid+1,end)\n    else:\n        return find_Min(arr,start,mid-1)\n\narr = [1,2,3,4,5]"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(str1):\n    str2 = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            str2 += str1[i]\n    return str2\n"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    else:\n        return c\n"], ["\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,k,l):\n    if n&(n-1)==0:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr):\n    # Initialize two pointers\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        if arr[left] < 0 and arr[right] > 0:\n            # Swap elements at left and right indices\n            arr[left], arr[right] = arr[right], arr[left]\n\n            # Move both pointers towards each other\n            left += 1\n            right -= 1\n\n        elif arr[left] >= 0:\n            # If element is already non-negative, move the left pointer forward\n            left += 1\n\n        else:\n            # If element is already negative, move the right pointer backward\n            right -= 1\n\n    return arr\n\n\n# Test case"], ["\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(string,character):\n    return string.replace(' ',''+character)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\nfrom typing import List\n\ndef max_sum(triangle: List[List[int]]) -> int:\n    # Write your code here\n    for i in range(len(triangle)-2, -1, -1):\n        for j in range(0, len(triangle[i])):\n            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]\n"], ["\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\nimport heapq\ndef larg_nnum(arr,n):\n    return sorted(heapq.nlargest(n,arr),reverse=True)\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(radius,height):\n    return 2*3.14*radius*height<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(side):\n    return side**3\n"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(num):\n    return num | (num - 1)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(n,k):\n    return (n*(n-1)*(n-2))//6 + k*(k-1)//2\n"], ["\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    # create an empty dictionary\n    result = {}\n    \n    for i in range(len(tuples)):\n        key = tuples[i][0]\n        value = tuples[i][1]\n        \n        if key not in result:\n            result[key] = [value]\n        else:\n            result[key].append(value)\n            \n    return result\n\n# Test case\ntuples = [(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]"], ["\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(s):\n    n = len(s)\n    return (n * (n + 1)) // 2\n"], ["\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\nfrom math import comb\n\ndef get_total_number_of_sequences(n: int, m: int):\n    return sum(comb(m - i + 1, i) for i in range(1, n + 1))<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_last_element(lst, new_lst):\n    lst[-1] = new_lst\n    return lst\n\n# Test cases"], ["\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(n,m,k):\n    return [[['*' for j in range(k)]for i in range(m)]for j in range(n)]\n"], ["\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    return len(string)<|endoftext|>"], ["\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(lst):\n    return sorted(lst, key=lambda x: x[0], reverse=True)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(n):\n    i = n + 1\n    while True:\n        if (i * i > n): \n            return i - 1\n        else: \n            i += 1\n\nn = int(input())"], ["\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\nfrom typing import List\n\n\ndef max_sum(arr: List[int], n: int) -> int:\n    dp = [arr[0]] * len(arr)\n    for i in range(1, len(dp)):\n        if arr[i] > arr[i - 1]:\n            dp[i] = arr[i] + dp[i - 1]\n        else:\n            dp[i] = arr[i]\n\n    return max(dp)\n\n"], ["\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\nimport math\n\ndef babylonian_squareroot(n):\n    if n == 0:\n        return 0\n    else:\n        x = n / 2\n        while True:\n            y = (x + n/x) / 2\n            if abs(y - x) < 0.000001:\n                break\n            x = y\n        return y\n\n"], ["\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    # Fill the table\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n                \n    return dp[0][n-1]\n\n# Test the function\ns = \"TENS FOR TENS\""], ["\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\nimport math\n\n\ndef harmonic_sum(n: int):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n\n    :param n: The number to calculate the harmonic sum for.\n    :return: The harmonic sum of n-1.\n    \"\"\"\n    return sum([1 / i for i in range(1, n)])<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(list_1,list_2):\n    return list(set(list_1) & set(list_2))<|endoftext|>"], ["\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup,X):\n    return tup.count(X)\n\ntup = (10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2)\nX = 4\n"], ["\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(list,element):\n    for i in range(len(list)):\n        if(i==0):\n            list.insert(0,element)\n        else:\n            list.insert(i+1,element)\n    return list\n"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\nimport math\n\ndef convert(complex_num):\n    real = abs(complex_num.real)\n    imag = abs(complex_num.imag)\n    return (real, math.atan2(imag, real))<|endoftext|>"], ["\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(lst):\n    return len(list(filter(lambda x: isinstance(x,int), lst)))\n"], ["\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_starting_with_ae(string):\n    result = []\n    for word in string.split():\n        if word[0] == \"a\" or word[0] == \"e\":\n            result.append(word)\n    return result\n\n# Test the function\ntest_string = \"python programe\""], ["\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\nfrom itertools import product\ndef combinations_colors(colors, n):\n    return list(product(colors, repeat=n))<|endoftext|>"], ["\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n    if n <= 1:\n        return 0\n\n    primes = [True] * (n+1)\n    p = 2\n    while(p*p <= n):\n        if(primes[p]):\n            for i in range(p*p, n+1, p):\n                primes[i] = False\n        p += 1\n\n    count = sum(primes[2:n])\n    return count\n\n"], ["\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    temp = a\n    a = b\n    b = temp\n    return (a,b)<|endoftext|>"], ["\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(list):\n    return len(list) - sum(map(lambda x: x % 2 == 0, list))<|endoftext|>"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tup1, tup2):\n    # Sort both tuples based on the second element in descending order\n    sorted_tup1 = tuple(sorted(tup1, key=lambda x: -x[1]))\n    sorted_tup2 = tuple(sorted(tup2, key=lambda x: -x[1]))\n\n    # Create a new list of tuples by combining elements from both sorted tuples\n    combined_list = []\n    i = j = 0\n\n    while i < len(sorted_tup1) and j < len(sorted_tup2):\n        if sorted_tup1[i][1] > sorted_tup2[j][1]:\n            combined_list.append(sorted_tup1[i])\n            i += 1\n        else:\n            combined_list.append(sorted_tup2[j])\n            j += 1\n\n    # Append remaining elements from either sorted tuple\n    combined_list.extend(sorted_tup1[i:])\n    combined_list.extend(sorted_tup2[j:])\n\n    return tuple(combined_list)\n\n\n# Test case\ntup1 = ((1, 3), (4, 5), (2, 9), (1, 10))\ntup2 = ((6, 7), (3, 9), (1, 1), (7, 3))\n\nresult = maximize_elements(tup1, tup2)"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\nfrom math import sqrt\n\ndef is_newman_shanks_williams(n):\n    if n < 2:\n        return False\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % (i ** 2 - 1) == 0 and n // (i ** 2 - 1) > 1:\n            return True\n    return False\n\ndef newman_prime(n):\n    num = 1\n    while not is_newman_shanks_williams(num):\n        num += 1\n    return num\n"], ["\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tup1,tup2):\n    result = []\n    for i in range(len(tup1)):\n        if tup2[i] != 0:\n            result.append(int(tup1[i]/tup2[i]))\n        else:\n            return \"Error: Division by zero\"\n    return tuple(result)<|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(arr,n):\n    # Write your code here\n    return (arr[:n], arr[n:])<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1, dict2):\n    return {**dict1, **dict2}<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_years(age):\n    return age * 7\n"], ["\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(lst, n):\n    # Your code here\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(side):\n    return 4 * side ** 2\n\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    # Write your code here\n    return (n*(n+1)*(2*n+1))/6\n"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\nfrom math import sqrt\n\n\ndef find_star_num(n: int) -> int:\n    return (n * ((2*n - 1)**2)) + (2*n - 1)\n\n"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    return ord(char)<|endoftext|>"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(arr,n):\n    sum = 0\n    for i in range(0,n,2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n\narr = [5, 6, 12, 1, 18, 8]\nn = len(arr)"], ["\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    return (n*(n+1)*(2*n+1))//6 * 32\n"], ["\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(lst):\n    return [i[1] for i in lst]\n"], ["\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tuple_1, tuple_2):\n    return tuple(a-b for a,b in zip(tuple_1, tuple_2))\n"], ["\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\nfrom math import factorial\n\ndef even_binomial_Coeff_Sum(n):\n    # calculate the sum of even index binomial coefficients using formula:\n    return (factorial(2*n)//(factorial(n)*factorial(n)))//2\n\n"], ["\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr,n,k):\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i] == k:\n            return i+1\n\narr = [2,5,4]\nk = 3"], ["\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\nimport math\n\ndef volume_cylinder(radius,height):\n    return (math.pi * radius**2) * height<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dict_1,val):\n    new_dict = {}\n    for key,value in dict_1.items():\n        if value == val:\n            new_dict[key] = value\n    return new_dict\n"], ["\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tup):\n    # Initialize counter for elements before the first nested tuple\n    count = 0\n\n    # Iterate through each item in the tuple\n    for i in tup:\n        if isinstance(i, tuple):  # Check if the current item is a tuple\n            break  # Exit the loop as we found a nested tuple\n        else:\n            count += 1  # Increment the counter for non-tuple items\n\n    return count\n\n\n# Test cases"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(num):\n    if num < 1:\n        return False\n\n    # Calculate the formula for n-th decagonal number\n    result = (5 * num ** 2 - 4 * num) / 2\n\n    return int(result)\n\n# Test cases"], ["\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return True, i\n    return False, -1\n\n# Test case\narr = [11, 23, 58, 31, 56, 77, 43, 12, 65, 19]\ntarget = 31\nresult = sequential_search(arr, target)\n"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(lst):\n    return len(lst) == len(set(lst))<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1,list2):\n    return list(map(lambda x,y: x-y ,list1,list2))<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    digits = [int(digit) for digit in str(num)]\n    for i in range(len(digits)):\n        if digits[i] > 0:\n            if digits.count(digits[i]) > digits[i]:\n                return False\n    return True\n"], ["\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(list, element):\n    return len(set(list)) == 1 and list[0] == element\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if text.find('ab') != -1:\n        return ('Matched')\n    else:\n        return ('Not matched!')\n\n"], ["\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\nfrom typing import List\n\n\ndef max_sub_array_sum_repeated(arr: List[int], n: int, m: int) -> int:\n    if not arr or len(arr) < n * m:\n        return 0\n\n    dp = [[-float('inf')] * (m + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        for j in range(m + 1):\n            if i > 1 and j > 1:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j])\n            if j > 1:\n                dp[i][j] = max(dp[i][j], dp[i][j - 1])\n\n            if i > 1 and j > 1:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + arr[(i - 1) % n] * arr[(j - 1) % m])\n            elif j == 1:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + arr[(i - 1) % n])\n            else:\n                dp[i][j] = max(dp[i][j], dp[i][j - 1] + arr[(i - 1) % n])\n\n    return dp[n][m]\n\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    return (n*(n+1)*(2*n + 1))//6\n"], ["\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(arr, n, p):\n    # Initialize result as -1 (default value)\n    res = -1\n\n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        # Check if the current element has an inverse modulo p\n        if pow(arr[i], -1, p) != None:\n            # If found, update the result with the index of this element\n            res = i\n\n    return res\n\n\n# Test cases"], ["\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return \"Leap Year\"\n    else:\n        return \"Not Leap Year\"\n"], ["\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lists):\n    return max(len(lst) for lst in lists)\n\n# Test cases"], ["\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\ndef count_no_of_ways(n, k):\n    if n == 0:\n        return 1\n\n    if n == 1 or n == 2:\n        return k\n\n    # Initialize dp array where dp[i] will store the number of ways to paint i posts\n    dp = [0] * (n + 1)\n    dp[0], dp[1], dp[2] = 1, k, k * (k - 1)\n\n    for i in range(3, n + 1):\n        dp[i] = (dp[i-1] + dp[i-2]) * k - dp[i-3]\n\n    return dp[n]\n\n"], ["\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(a,b):\n    return a//b\n"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\nimport math\n\ndef otherside_rightangle(a,b):\n    return math.sqrt((a**2)+(b**2))<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(lst):\n    return max([int(i) for i in lst if isinstance(i,int)])<|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    total = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            total += i\n    return total\n"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n\narr = [1,20,6,4,5]\nn = len(arr)"], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\nfrom typing import List\n\n\ndef flatten_list(lst: List) -> List:\n    result = []\n    for item in lst:\n        if isinstance(item, int):\n            result.append(item)\n        else:\n            result.extend(flatten_list(item))\n    return result<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list_1, list_2):\n    result = []\n    for sublist in list_2:\n        if all(item in list_1 for item in sublist):\n            result.append(sublist)\n    return result\n\n# Test case"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(lst):\n    return max(lst, key=lambda x: sum(x[1:]))\n"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    # Initialize variables\n    total_sequences = 0\n    for i in range(1 << n): \n        if (i & (i >> 1)) == 0: \n            total_sequences += 1\n\n    return total_sequences / pow(2, n)\n\n"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n    if not d:\n        return 0\n\n    max_depth = 0\n    for key in d.keys():\n        current_depth = 1 + dict_depth(d[key])\n        if current_depth > max_depth:\n            max_depth = current_depth\n\n    return max_depth\n\n"], ["\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    count = 0\n    while n:\n        if (n & 1): \n            count += 1\n        n >>= 1\n    return count\n"], ["\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(arr,n):\n    if n==1:\n        return 0\n    elif n%2==0:\n        mid=n//2\n        left=solve(arr[:mid],mid)\n        right=solve(arr[mid:],n-mid)\n        return left+right\n    else:\n        mid=(n-1)//2\n        left=solve(arr[:mid],mid)\n        right=solve(arr[mid+1:],n-mid-1)\n        return left+right\n"], ["\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr,rotations,index):\n    if len(rotations)==0:\n        return -1\n    else:\n        for i in range(len(rotations)):\n            if index>=rotations[i][0] and index<=rotations[i][1]:\n                return arr[index]\n        return -1\n"], ["\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    for word in words:\n        if word[0] == 'p':\n            return (word, word[1:])\n    return None\n"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(arr, n, k):\n    dp = [0] * (n + 1)\n    for i in range(1, n+1):\n        dp[i] = arr[i-1]\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j]+arr[i])\n    return dp[n]\n"], ["\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tup1,tup2):\n    return tup1[:tup2] + tup2[tup2:]<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list_1,list_2,n):\n    # Write your code here\n    list_1.sort()\n    list_2.sort(reverse=True)\n    result = []\n    for i in range(n):\n        result.append(list_1[i]*list_2[i])\n    return result\n"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(x,y):\n    if x > y:\n        return x\n    else:\n        return y\n"], ["\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(s):\n    return tuple(s)<|endoftext|>"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(n):\n    return n | (n - 1)\n"], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\nimport math\n\ndef volume_cone(radius,height):\n    return (math.pi * radius**2 * height) / 3\n\n"], ["\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(lst):\n    for i in lst:\n        if i > 0:\n            print(i,end=\" \")<|endoftext|>"], ["\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\nfrom typing import List\n\ndef max_sum_rectangular_grid(grid:List[List[int]], n:int)->int:\n    # Write your code here\n    if not grid or len(grid[0]) < n:\n        return -1\n    \n    dp = [[0] * (n + 1) for _ in range(len(grid))]\n    \n    for i in range(1, len(dp)):\n        for j in range(n):\n            dp[i][j] = grid[i-1][j]\n            \n            if j > 0:\n                dp[i][j] += max(dp[i-1][j-1], 0)\n                \n            if i > 0 and j > 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j])\n                \n    return max(max(row) for row in dp)\n"], ["\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(s):\n    s = s.split()\n    max_len = 0\n    for i in range(len(s)):\n        if len(s[i]) % 2 == 0:\n            if len(s[i]) > max_len:\n                max_len = len(s[i])\n    return max_len\n"], ["\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(arr, target):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] < target:\n            left = mid + 1\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            # Check if it's the last occurrence or not\n            if mid == len(arr) - 1 or arr[mid + 1] != target:\n                return mid\n            else:\n                left = mid + 1\n\n    return -1\n\n\n# Test case\narr = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9]\ntarget = 5"], ["\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(arr):\n    result = []\n    i = 0\n    while i < len(arr) - 1:\n        count = 1\n        current_value = arr[i]\n\n        # Check if the next value is different or equal to the current value\n        while i + 1 < len(arr) and arr[i] == arr[i+1]:\n            count += 1\n            i += 1\n\n        # Append the encoded values to the result list\n        result.append(count)\n        result.append(current_value)\n\n        i += 1\n\n    return result\n\n\n# Test case\narr = [1,1,2,3,4,4,5,1]"], ["\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(sides):\n    # Calculate the maximum possible side length for each dimension\n    max_side = min(sides)\n    \n    # Calculate the remaining sum after subtracting the maximum side length from each dimension\n    remaining_sum = sum(sides) - (max_side * len(sides))\n    \n    # Calculate the maximum volume by multiplying the three dimensions together\n    return max_side ** 3 + remaining_sum\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\ndef find_long_word(string):\n    pattern = r'\\b\\w{5}\\b'\n    return re.findall(pattern, string)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    # Calculate the square of the sum of the first n natural numbers\n    square_of_sum = (n * (n + 1) // 2) ** 2\n\n    # Calculate the sum of the squares of the first n natural numbers\n    sum_of_squares = n * (n + 1) * (2*n + 1) // 6\n\n    # Return the difference between the two values\n    return square_of_sum - sum_of_squares<|endoftext|>"], ["\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(num):\n    # Convert the input string into an integer\n    num = int(num)\n    \n    # Initialize variables to store the result and the current digit being processed\n    result = 0\n    current_digit = 0\n    \n    # Iterate through each digit in reverse order of the input number\n    while num > 0:\n        # Extract the last digit from the input number\n        last_digit = num % 10\n        \n        # Add the last digit multiplied by its position (starting from 1) to the result\n        result += last_digit * (current_digit + 1)\n        \n        # Move to the next digit by dividing the input number by 10\n        num //= 10\n        \n        # Increment the current digit counter\n        current_digit += 1\n    \n    return str(result)\n\n# Test the function with the provided example"], ["\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(lst):\n    min_val = lst[0]\n    for i in range(len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n            pos = i\n    return [pos]\n"], ["\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr):\n    pos = []\n    neg = []\n\n    for i in arr:\n        if i >= 0:\n            pos.append(i)\n        else:\n            neg.append(i)\n\n    return pos + neg\n"], ["\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(tup):\n    # Initialize an empty list to store the sums\n    sums = []\n    \n    # Iterate through the tuple in steps of 2 starting from index 0\n    for i in range(0, len(tup), 2):\n        # Add the current element and the next element if they exist to the sums list\n        sums.append(tup[i] + tup[i+1])\n        \n    return tuple(sums)<|endoftext|>"], ["\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(n):\n    if n <= 0:\n        return 0\n\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, int(i ** 0.5) + 1):\n            square = j ** 2\n            if i - square >= 0:\n                dp[i] = min(dp[i], dp[i - square] + 1)\n\n    return dp[n]\n\n"], ["\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(lst):\n    return max(lst, key=lst.count)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if (a==b) and (b==c):\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(lst,n,k):\n    return lst[n:] + lst[:n]\n"], ["\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(lst):\n    return sum(1 for x in lst if x < 0)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\n\ndef find_char(string):\n    pattern = r'\\b\\w{3}\\b|\\b\\w{4}\\b|\\b\\w{5}\\b'\n    return re.findall(pattern, string)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(num):\n    return bin(num).count('0')<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(string):\n    # Create an empty dictionary\n    dict = {}\n    \n    # Iterate over each character in the string\n    for i in string:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    \n    return dict\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(list):\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i][1] > list[j][1]:\n                temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n    return list\n\nlist = [['a', 10], ['b', 5], ['c', 20], ['d', 15]]\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a,b,c):\n    # Write your code here\n    return (a+b>c and b+c>a and c+a>b)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,n):\n    return (n*(a+b))/2\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    if month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\":\n        return False\n    elif month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\":\n        return True\n    else:\n        return None\n"], ["\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\nimport re\ndef text_match_word(text):\n    pattern = r'\\w+\\.'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"], ["\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_substring_with_equal_ends(s):\n    # Initialize variables to keep track of the count and the length of the string\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        # Check if the substring starting at index i has equal ends\n        if s[i] == s[-1]:\n            count += (n - i) * (i + 1)\n    \n    return count\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(start,end):\n    if start > end:\n        return -1\n    \n    max_divisor = -1\n    for i in range(start+1,end+1):\n        count = 0\n        for j in range(1,i+1):\n            if i%j==0:\n                count+=1\n        if count>max_divisor:\n            max_divisor = count\n\n    return max_divisor\n\n"], ["\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(nums):\n    nums.sort()\n    return sum(nums[:3])\n"], ["\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(s):\n    return tuple(sorted(set(s)))<|endoftext|>"], ["\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\nfrom typing import List\n\n\ndef find_minimum_range(arrays: List[List[int]]) -> tuple:\n    \"\"\"\n    Find the minimum range which contains at least one element from each array.\n\n    :param arrays: list of lists\n    :return: tuple with min and max value in the range\n    \"\"\"\n    # sort all elements by their values\n    sorted_arrays = sorted([sorted(array) for array in arrays])\n\n    # initialize variables\n    left = 0\n    right = len(sorted_arrays[0]) - 1\n\n    while True:\n        current_min = sorted_arrays[0][left]\n        current_max = sorted_arrays[-1][-1]\n\n        if current_max <= current_min + 1:\n            return (current_min, current_max)\n\n        # move the left pointer to the next element\n        left += 1\n\n        # check if we have reached the end of any array\n        if left >= len(sorted_arrays[0]):\n            break\n\n        # update the maximum value found so far\n        current_max = sorted_arrays[-1][right]\n\n        # move the right pointer to the previous element\n        right -= 1<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(s):\n    count=0\n    for i in s:\n        if(i.isdigit()):\n            count+=1\n        elif(i.isalpha()):\n            count+=1\n    return (count,count)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(low, high):\n    count = 0\n    for i in range(low,high+1):\n        if(i%2 != 0 and is_odd_factor(i)):\n            count += 1\n    return count\n\ndef is_odd_factor(n):\n    for i in range(1,n+1):\n        if(n%i==0 and i%2!=0):\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(nums):\n    result = []\n    for i in range(1, len(nums)):\n        result.append(abs(nums[i] - nums[i-1]))\n    return result\n"], ["\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n):\n    if n < 1:\n        return \"Invalid input\"\n    elif n == 1:\n        return 0\n    else:\n        return (n-2)*2 + 1\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(length,width):\n    return (length-1)*(width-1)*4\n"], ["\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\nfrom typing import List\n\n\ndef find_ways(nums: List[int], k: int) -> int:\n    \"\"\"\n    :param nums: list of integers\n    :param k: integer representing the target sum\n    :return: number of ways to generate the target sum using non-negative prefix sums\n    \"\"\"\n    # Initialize dp array with size (k+1), where each element represents the number of ways to achieve a specific prefix sum up to that point\n    dp = [0] * (k + 1)\n    \n    # Iterate through each number in the input list\n    for num in nums:\n        # Update the dp array by adding the current number to all possible previous sums and counting the valid combinations\n        for i in range(k, -1, -1):\n            if i >= num:\n                dp[i] += 1\n    \n    return dp[k]\n\n\n# Test cases"], ["\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(s):\n    if s[0] != '0' and s[-1] != '1':\n        return \"No\"\n    for i in range(1, len(s)-1):\n        if s[i-1] != '0' and s[i+1] != '1':\n            return \"No\"\n    return \"Yes\"<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(s):\n    count = {}\n    for i in s:\n        if i not in count:\n            count[i] = 0\n        count[i] += 1\n\n    return min([s.count(i) - 1 for i in set(s)])<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,k):\n    for i in range(len(arr)):\n        if arr[i] == k:\n            return arr[i]"], ["\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(s):\n    # Convert the string into a set and compare its length with the original string's length\n    return len(set(s)) == len(s)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(nested_list,col):\n    new_list = []\n    for i in range(len(nested_list)):\n        new_list.append([j[col] for j in nested_list])\n    return new_list\n"], ["\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a,n,d):\n    return (n*(a+(d*n-1)))/2\n"], ["\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\nimport math\n\ndef count_Rectangles(r):\n    # Calculate the total number of squares that can fit inside the circle\n    total_squares = int(math.pi * (r ** 2))\n    \n    # Subtract the number of rectangles from the total number of squares\n    return total_squares - 4 * r**2\n\n\n# Test the function with an example"], ["\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(a,b):\n    return 180 - (a + b)<|endoftext|>"], ["\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\nfrom typing import List\n\n\ndef find_max(tuples: List[tuple]) -> int:\n    return max([max(x) for x in tuples])\n\n"], ["\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(list1,list2):\n    return list(map(lambda x,y: (x%y),list1,list2))<|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a,b,c):\n    if (4*a*c-b*b==0):\n        return \"No\"\n    else:\n        x = (-b+((b**2)-(4*a*c))**(1/2))/(2*a)\n        y = (-b-(b**2)-(4*a*c))**(1/2)/(2*a)\n        if(x==y*2):\n            return \"Yes\"\n        else:\n            return \"No\"<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\nfrom math import factorial\n\n\ndef get_carol(n: int):\n    \"\"\"\n    >>> get_carol(1)\n    0\n    >>> get_carol(3)\n    495\n    >>> get_carol(6)\n    1854\n    >>> get_carol(10)\n    475020\n    \"\"\"\n\n    def fact(n):\n        return factorial(n)\n\n    def comb(n, k):\n        return (fact(n) / (fact(k) * fact(n - k)))\n\n    total = 0\n\n    for i in range(1, n + 1):\n        total += comb(i, i - 1)\n\n    return total % 1_000_000_007<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(lists):\n    return [i for i in lists if i]<|endoftext|>"], ["\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(lst):\n    count = {}\n    for i in lst:\n        if i not in count:\n            count[i] = 0\n        count[i] += 1\n    \n    return max(count, key=count.get)\n"], ["\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tup, k):\n    new_tup = []\n    for i in tup:\n        new_list = list(i)\n        for j in range(len(new_list)):\n            new_list[j] += k\n        new_tup.append(tuple(new_list))\n    return new_tup\n\ntup = [(1, 3, 4), (2, 4, 6), (3, 8, 1)]\nk = 4"], ["\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\nfrom collections import deque\n\n\ndef min_flip_to_make_string_alternate(s: str) -> int:\n    \"\"\"\n    >>> min_flip_to_make_string_alternate('0001010111')\n    2\n    >>> min_flip_to_make_string_alternate('0000000000')\n    0\n    >>> min_flip_to_make_string_alternatenWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(num):\n    if num < 0:\n        return -1 * count_Digit(-num)\n    elif num >= 10 and num <= 99:\n        return 2\n    elif num >= 100 and num <= 999:\n        return 3\n    else:\n        return 4\n"], ["\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(arr):\n    max_product = arr[0] * arr[1]\n    for i in range(len(arr)-1):\n        if arr[i+1] > max_product:\n            max_product = arr[i+1]\n    return max_product\n"], ["\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\nfrom typing import Optional\n\n"], ["\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup, n):\n    return tup * n\n"], ["\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(l,b,h):\n    return 2*(l*b+b*h+l*h)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tup):\n    return sorted(tup, key=lambda x:float(x[1]))\n\n"], ["\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(arr, start, end):\n    if arr[start] != start:\n        return start\n\n    while start <= end and arr[start] == start:\n        start += 1\n\n    return start\n\n"], ["\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nimport heapq\n\ndef heap_sort(arr):\n    # Create a min-heap from the array\n    heapq.heapify(arr)\n\n    # Extract the smallest element one by one and place it at the end of the array\n    for i in range(len(arr)):\n        arr.append(heapq.heappop(arr))\n\n    return arr\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(length,width,height):\n    return length*width*height\n"], ["\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute(string):\n    if len(string) == 1:\n        return [string]\n    \n    result = []\n    for i in range(len(string)):\n        char = string[i]\n        remaining_chars = string[:i] + string[i+1:]\n        \n        for permutation in permute(remaining_chars):\n            result.append(char + permutation)\n            \n    return result\n"], ["\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num, base):\n    return int(base * round(float(num)/base))<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\nfrom typing import List\n\n\ndef remove_replica(lst: List[int]) -> List[int]:\n    res = []\n    for i in lst:\n        if lst.count(i) > 1:\n            res.append('MSP')\n        else:\n            res.append(i)\n    return res<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(string, char):\n    new_string = \"\"\n    for i in range(len(string)):\n        if string[i] != char:\n            new_string += string[i]\n    return new_string\n"], ["\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(lst):\n    if len(lst) > 0:\n        return lst[-1:] + lst[:-1]<|endoftext|>"], ["\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(length,width,height):\n    return 2*(length*width + width*height + height*length)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(m,n):\n    return [[j for j in range(i)]for i in range(m)]\n"], ["\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef sort_by_index(list_of_lists, index):\n    return sorted(list_of_lists, key=lambda x: x[index])<|endoftext|>"], ["\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\nfrom typing import List\n\n\ndef find_rotation_count(arr: List[int]) -> int:\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        elif arr[mid] < arr[left]:\n            right = mid - 1\n        else:\n            return mid\n\n    return -1<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(num):\n    # Initialize the result variable with the same value as num\n    result = num\n\n    # Iterate over each bit in the binary representation of num\n    for i in range(32):  # Assuming we are working with 32-bit integers\n        if (num & (1 << i)) != 0:  # Check if the ith bit is set\n            # Toggle the ith bit by using XOR operation\n            result ^= (1 << i)\n\n    return result\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(arr):\n    min_value = min(arr)\n    count = arr.count(min_value)\n    return count\n\narr = [1,2,3,4,3]"], ["\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    if n < 0:\n        return None\n    elif n == 0 or n == 1:\n        return n\n    else:\n        return get_perrin(n - 1) + get_perrin(n - 3)\n"], ["\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef swap_count(s):\n    stack = []\n    count = 0\n\n    for i in s:\n        if i == \"[\":\n            stack.append(i)\n        else:\n            if not stack:\n                count += 1\n            else:\n                stack.pop()\n\n    return len(stack) // 2 + count\n\n"], ["\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(hex_num):\n    # Convert hex number to decimal\n    dec_num = int(hex_num, 16)\n    \n    # Check if the decimal number is even or odd\n    if dec_num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"<|endoftext|>"], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    i = 0\n    while (n > 0):\n        if (n % 2 != 0):\n            break\n        else:\n            n = int(n / 2)\n            i += 1\n\n    return pow(2, i)\n\n"], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\nimport math\n\n\ndef find_lucas(n):\n    if n < 0:\n        return None\n\n    # Base cases for Lucas numbers\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n\n    # Calculate the nth Lucas number using Binet's formula\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n\n    return int((math.pow(phi, n) - math.pow(psi, n)) / math.sqrt(5))\n\n"], ["\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(lst, s):\n    return [s + str(i) for i in lst]<|endoftext|>"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(list1,list2):\n    result = {}\n    for i in range(len(list1)):\n        result[list1[i]] = {list2[i]: list2[i]}\n    return result\n"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\nfrom math import log\n\n\ndef get_max_sum(num):\n    if num <= 1:\n        return num\n\n    # Calculate the number of times each divisor appears in the prime factorization of num.\n    count = [0] * 5\n    for i in range(2, int(log(num, 5)) + 1):\n        while num % i == 0:\n            count[i - 1] += 1\n            num //= i\n\n    # Calculate the maximum sum possible by using the given equation.\n    max_sum = float('-inf')\n    for i in range(len(count)):\n        if count[i]:\n            max_sum = max(max_sum, (get_max_sum(i) ** count[i]) + get_max_sum(num // i))\n\n    return max_sum<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(lists):\n    return max(lists, key=len)<|endoftext|>"], ["\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tup):\n    return len(set(tup)) == len(tup)<|endoftext|>"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(string):\n    # Initialize an empty dictionary to keep track of characters and their counts\n    char_count = {}\n\n    # Iterate through each character in the string\n    for char in string:\n        if char in char_count:\n            # If the character is already in the dictionary, increment its count\n            char_count[char] += 1\n        else:\n            # Otherwise, add the character to the dictionary with a count of 1\n            char_count[char] = 1\n\n    # Iterate through the string again to find the first non-repeating character\n    for char in string:\n        if char_count[char] == 1:\n            return char\n\n    # Return None if no non-repeating character was found\n    return None\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\nimport re\n\ndef check_char(string):\n    # Check if the first and last characters are the same\n    return bool(re.match(r\"^(.).*\\1$\", string))\n\n# Test cases"], ["\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n    if (a<=b and b>=c) or (a>=b and b<=c):\n        return b\n    elif (a<=c and c>=b) or (a>=c and c<=b):\n        return c\n    else:\n        return a\n"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(list):\n    total = 0\n    for i in range(len(list)):\n        total += int(list[i])\n    return total\n"], ["\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(tup1, tup2):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate through each element in the first tuple\n    for i in range(len(tup1)):\n        # Perform bitwise XOR on corresponding elements and append the result to the result list\n        result.append(tup1[i] ^ tup2[i])\n    \n    return tuple(result)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(lst):\n    # Initialize an empty dictionary to store frequencies\n    freq_dict = {}\n    \n    for tup in lst:\n        if tup not in freq_dict:\n            freq_dict[tup] = 0\n        \n        freq_dict[tup] += 1\n    \n    return len(freq_dict)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        temp = [x + y for x, y in zip(tup1[i], tup2[i])]\n        result.append(tuple(temp))\n    return tuple(result)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n    if r==0 or r==n:\n        return 1\n    else:\n        return (ncr_modp(n-1,r-1,p) + n*ncr_modp(n-1,r,p))%p\n"], ["\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\n\ndef is_valid_URL(url):\n    pattern = r\"^(http|https)://[a-zA-Z0-9.-]+\\.[a-z]{2,3}/?$\"\n    return bool(re.match(pattern, url))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b\n"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuple(tup,x):\n    for i in tup:\n        if x==i:\n            return True\n    return False\n"], ["\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"<|endoftext|>"], ["\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(n):\n    # Convert the integer into a list of its digits\n    nums = [int(i) for i in str(n)]\n    \n    # Sort the digits in descending order\n    nums.sort(reverse=True)\n    \n    # Create a new string with sorted digits and convert it back to an integer\n    return int(''.join(str(num) for num in nums))<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(nums1, nums2, k):\n    # Initialize an empty list to store the result\n    res = []\n    \n    # Iterate through each pair in nums1 x nums2\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Check if the current pair is smaller than all previously added pairs\n            if len(res) < k:\n                res.append([nums1[i], nums2[j]])\n            else:\n                break\n    \n    return res\n\n# Test case"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(tuples):\n    # Sort the tuples based on their first element in ascending order\n    sorted_tuples = sorted(tuples)\n\n    # Initialize variables to store the minimum and maximum products\n    min_product = float('inf')\n    max_product = -float('inf')\n\n    for i in range(len(sorted_tuples)):\n        current_product = sorted_tuples[i][0] * sorted_tuples[(i + 1) % len(sorted_tuples)][1]\n        \n        if current_product < min_product:\n            min_product = current_product\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return min_product, max_product\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(lst):\n    return min([x for x in lst if isinstance(x, (int, float))])<|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\n\ndef snake_to_camel(snake_str):\n    # Split the input string into words based on underscore\n    words = snake_str.split('_')\n    \n    # Capitalize each word except the first one and join them together\n    return ''.join(word.capitalize() for word in words[1:]) + words[0].lower()\n\n# Test cases"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(arr):\n    return [x for x in arr if x % 2 == 0]<|endoftext|>"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(lst,n):\n    return [i[n] for i in lst]\n\nlst = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]"], ["\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(list1,list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    arr.sort()\n    return (arr[-1]*arr[-2], arr[0]*arr[1])\n"], ["\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(n):\n    if n <= 0:\n        return 0\n\n    # Base case: If n is divisible by 3, return n itself as it's already the max sum\n    if n % 3 == 0:\n        return n\n\n    # Recursive call with n-1 (since we're breaking at the first digit)\n    return n - breakSum(n - 1)\n\n\n# Test cases"], ["\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(tuples):\n    # Write your code here\n    return [tuple(sorted(x)) for x in tuples]<|endoftext|>"], ["\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(L):\n    max_len = 0\n    for i in L:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)\n\n# Test case"], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_sum(n):\n    total = 0\n    for i in range(1, n+1):\n        total += (i * i * i)\n    return total\n"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tup):\n    return ''.join(map(str,tup))<|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    sum = (n*(n+1)*(2*n+1))/6\n    return sum\n"], ["\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\nfrom collections import deque\n\ndef get_maxgold(m,n):\n    # Initialize the queue with the starting point and set its value as max\n    q = deque([(0,0)])\n    visited = {(0,0)}\n    while len(q) > 0:\n        x,y = q.popleft()\n        if m[x][y] == -1: continue\n        for dx,dy in [(0,-1),(-1,0),(0,1),(1,0)]:\n            nx,ny = x+dx, y+dy\n            if (nx,ny) not in visited and 0 <= nx < n and 0 <= ny < m[0]:\n                visited.add((nx,ny))\n                q.append((nx,ny))\n                m[nx][ny] = m[x][y]\n    return sum([m[i][-1] for i in range(n)])\n"], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(tup):\n    return [t[-1] for t in tup]\n"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(lists,element):\n    return sum(1 for sublist in lists if element in sublist)<|endoftext|>"], ["\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))<|endoftext|>"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\n\ndef change_date_format(date):\n    # Use regular expression to match the pattern and replace it with the desired format\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', date)<|endoftext|>"], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            \n            arr[j] = temp\n        \n        gap //= 2\n    \n    return arr\n\n"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(tup1, tup2):\n    return tuple(a & b for a, b in zip(tup1, tup2))<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\nimport math\n\ndef parabola_directrix(a,b,c):\n    return -c/a-b**2/4*a\n\n"], ["\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n"], ["\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    return (a+b+c)/2\n"], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, num):\n    for i in arr:\n        if i > num:\n            return 'Yes, entered number is greater than those in the array'\n    return 'No, entered number is less than those in the array'<|endoftext|>"], ["\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match(text):\n    # Implement your code here\n    if 'ab' in text:\n        return ('Matched')\n    else:\n        return ('Not matched!')<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(n):\n    return n % 10\n"], ["\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(l):\n    for i in l:\n        if i < 0:\n            print(i,end=\" \")<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(s):\n    return \"\".join([c for c in s if not c.isdigit()])<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(tuples):\n    # Create an empty set to store the unique elements\n    seen = set()\n    \n    # Iterate through each element in the tuples list\n    for i in range(len(tuples)):\n        # Check if the current element is already in the set\n        if tuples[i] not in seen:\n            # Add it to the set and increment the count by 2\n            seen.add(tuples[i])\n            count += 2\n    \n    return count\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(list):\n    return int(''.join(map(str,list)))<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    words = sentence.split()\n    adverbs = []\n    for i, word in enumerate(words):\n        if word.endswith('ly'):\n            adverbs.append((i, word))\n    return adverbs\n"], ["\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(side):\n    return 6 * side ** 2\n"], ["\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\nfrom typing import List\n\n\ndef positive_count(arr: List[int]) -> float:\n    return sum(x > 0 for x in arr) / len(arr)\n\n"], ["\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(lst):\n    # Initialize max as None (or any value that is not in the list)\n    max = None\n\n    for num in lst:\n        if num < 0 and (max is None or num > max):\n            max = num\n\n    return max\n\n\n# Test cases"], ["\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tup_list,k):\n    new_tup = []\n    for tup in tup_list:\n        if len(tup) > k:\n            new_tup.append(tuple(sorted(tup[:k])))\n        else:\n            new_tup.append(tup)\n    return new_tup\n"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        product = tuple1[i] * tuple2[i]\n        result.append(product)\n    return tuple(result)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(list, tuple):\n    return sum([list.count(i) for i in tuple])\n"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n    return [num ** 3 for num in nums]<|endoftext|>"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    if n <= 2:\n        return n\n\n    # Initialize variables for storing previous three values\n    prev1 = 0\n    prev2 = 1\n    prev3 = 1\n\n    # Calculate the sum using the recurrence relation\n    total = prev1 + prev2 + prev3\n    while len(str(total)) < n:\n        next_value = prev1 + prev2 + prev3\n        prev1, prev2, prev3 = prev2, prev3, next_value\n        total += next_value\n\n    return total % (10 ** n)\n\n# Test cases"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(x,y,z):\n    if x+y > z and y+z > x and z+x > y:\n        return \"Yes\"\n    else:\n        return \"No\"<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(list1, n):\n    return [x[n:] for x in list1]<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\nimport re\n\ndef remove_whitespaces(string):\n    return re.sub(r'\\s+', '', string)<|endoftext|>"], ["\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amount, cost):\n    if amount < cost:\n        return \"Loss\"\n    elif amount == cost:\n        return 0\n    else:\n        return None\n"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(n):\n    s = 0\n    for i in range(1, n + 1):\n        if (n % i == 0 and i % 2 == 0):\n            s += i\n\n    return s\n\n"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\nimport re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\b'\n    if re.search(pattern, text):\n        return ('Found a match!')\n    else:\n        return ('Not matched!')<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month):\n    if (month == 2) :\n        return True\n    elif ((month == 4) or (month == 6) or (month == 9) or (month == 11)) :\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(string_list):\n    return [string[::-1] for string in string_list]\n"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(lists):\n    min_length = len(lists[0])\n    for i in lists:\n        if(len(i) < min_length):\n            min_length = len(i)\n    return lists[min_length-1]\n"], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(length,width):\n    return length * width\n"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\n\ndef remove_uppercase(string):\n    return re.sub(r'[A-Z]', '', string)<|endoftext|>"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(lists):\n    return [i[0] for i in lists]\n"], ["\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(str):\n    return sum(1 for i in str if ord(i) >= 65 and ord(i) <= 90)\n"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(list):\n    if len(list) == 0:\n        return [[]]\n    else:\n        first_element = list[0]\n        rest_combinations = combinations_list(list[1:])\n        for combination in rest_combinations:\n            # add current element as first element\n            new_combination = [first_element] + combination\n            yield new_combination\n            # add current element without adding it as first element\n            yield combination\n\n# Test the function"], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\nfrom typing import List\n\n\ndef max_subarray_product(nums: List[int]) -> int:\n    if not nums:\n        return 0\n\n    # Initialize variables for the current and global maximum products\n    curr_max = nums[0]\n    global_max = nums[0]\n\n    for i in range(1, len(nums)):\n        # If the current number is negative, swap the current maximum with it\n        if nums[i] < 0:\n            curr_max, nums[i], nums[i] = nums[i], curr_max, nums[i]\n\n        # Update the current maximum product\n        curr_max = max(curr_max * nums[i], nums[i])\n\n        # Update the global maximum product\n        global_max = max(global_max, curr_max)\n\n    return global_max<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dct):\n    for key,value in dct.items():\n        if value != dct[key]:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    return {k: v for k, v in d.items() if v}<|endoftext|>"], ["\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(arr):\n    left = 0\n    right = len(arr)-1\n\n    while left < right:\n        mid = (left + right)//2\n        \n        if arr[mid] > arr[mid+1]:\n            right = mid\n        else:\n            left = mid + 1\n    \n    return left\n\n"], ["\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_octal(decimal_number):\n    return oct(decimal_number)[2:] # [2:] removes the '0o' prefix from the octal representation\n\n# Test cases"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\nfrom typing import List\n\n\ndef max_product(nums: List[int], k: int) -> int:\n    if not nums or len(nums) < k:\n        return -1\n    # sort in descending order\n    sorted_nums = sorted(nums, reverse=True)\n    # take first k elements and multiply them together\n    return reduce(lambda x, y: x * y, sorted_nums[:k])<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\nfrom typing import List\n\n\ndef max_profit(prices: List[int], k: int) -> int:\n    if not prices or len(prices) < 2:\n        return 0\n\n    # Initialize variables for dynamic programming\n    n = len(prices)\n    dp = [[0] * (k + 1) for _ in range(n)]\n    min_price = [float('inf')] * n\n\n    # Fill the first row with initial values\n    for i in range(1, n):\n        min_price[i] = min(min_price[i - 1], prices[i])\n\n    # Fill the rest of the DP table\n    for j in range(1, k + 1):\n        max_profit = float('-inf')\n        for i in range(1, n):\n            max_profit = max(max_profit, prices[i] - min_price[i - 1])\n            dp[i][j] = max(dp[i - 1][j], max_profit + prices[i])\n\n    return dp[n - 1][k]\n\n"], ["\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tup):\n    return tuple(x + y for x, y in zip(tup, tup[1:]))\n\n"], ["\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr,n,m):\n    # Write your code here\n    return arr[0] % m\n"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(list):\n    if len(list) <= 0:\n        return False\n\n    for i in range(0, len(list)-1):\n        if (list[i+1] - list[i]) != 1:\n            return False\n    \n    return True\n\n"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(list1, list2):\n    # Convert both lists into sets\n    set1 = set(tuple(x) for x in list1)\n    set2 = set(tuple(x) for x in list2)\n\n    # Find the intersection of the two sets\n    intersection_set = set1.intersection(set2)\n\n    # Convert the intersection back into a list and return it\n    return [list(i) for i in intersection_set]<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string, old_char, new_char):\n    return string.replace(old_char,new_char)<|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\nfrom collections import Counter\n\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)<|endoftext|>"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(arr):\n    return max(arr) + min(arr)\n"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(s):\n    return s.islower()<|endoftext|>"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(string):\n    for i in range(len(string)):\n        if string[i].islower():\n            return string[:i] + string[i+1:]\n    return string\n"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(num):\n    while num >= 10:\n        num = int(str(num)[0])\n    return num\n"], ["\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(string):\n    # create an empty dictionary\n    char_count = {}\n    \n    # iterate over each character in the string\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # initialize variables to store the maximum count and corresponding character\n    max_count = -1\n    max_char = \"\"\n    \n    # iterate over the dictionary to find the maximum count of any character\n    for char, count in char_count.items():\n        if count > max_count:\n            max_count = count\n            max_char = char\n            \n    return max_char\n\n# test the function with the provided example"], ["\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(arr, target):\n    # Base case: If the array is empty or the target is zero, return true\n    if not arr or target == 0:\n        return True\n\n    # Check if the first element is greater than the target\n    if arr[0] > target:\n        return False\n\n    # Recursively check for subsets that include and exclude the first element\n    return (is_subset_sum(arr[1:], target - arr[0]) or \n            is_subset_sum(arr[1:], target))<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\nimport re\n\ndef match(string):\n    # Write your code here\n    return bool(re.search(r'[A-Z][a-z]+',string))<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(x):\n    i = 1\n    while True:\n        if (i * (i + 1)) % x == 0:\n            return i\n        i += 1\n"], ["\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(t1, t2):\n    return tuple(x for x in t1 if x not in t2)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\nfrom typing import List\n\n\ndef largest_palindrome(arr: List[int]) -> int:\n    max_num = -1\n\n    for num in arr:\n        if str(num) == str(num)[::-1] and num > max_num:\n            max_num = num\n\n    return max_num<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\nimport math\n\ndef binomial_probability(n, k, p):\n    return (math.factorial(n) / (math.factorial(k) * math.factorial(n - k))) * pow(p, k) * pow((1-p), n-k)\n"], ["\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[1])<|endoftext|>"], ["\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\nimport math\n\ndef area_pentagon(side):\n    return (math.sqrt(5 * ((5 + 5 ** 0.5) / 2)) * side ** 2) / 4\n\n"], ["\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(arr):\n    max_value = max(arr)\n    count = arr.count(max_value)\n    return count\n\narr = [1,2,3,4,4]"], ["\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(tup):\n    # Initialize an empty set to store symmetric pairs\n    sym_pairs = set()\n\n    for i in range(len(tup)):\n        for j in range(i + 1, len(tup)):\n            if tup[i] == tup[j][::-1]:\n                sym_pairs.add((tup[i], tup[j]))\n\n    return sym_pairs\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a,n,r):\n    if r==0:\n        return a*n\n    else:\n        return (a*(r**n-1)/(r-1))<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < target:\n            low = mid + 1\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            return True\n    return False<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(binary):\n    return int(''.join(str(i) for i in binary),2)\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\nimport re\n\ndef remove_lowercase(string):\n    return re.sub('[a-z]', '', string)<|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\nimport heapq\n\ndef heap_queue_smallest(nums):\n    # Convert nums into a min-heap\n    heapq.heapify(nums)\n    \n    # Extract the smallest element three times\n    return [heapq.heappop(nums) for _ in range(3)]\n\n\n# Test the function with the provided test case\ntest_case = [25, 35, 22, 85, 14, 65, 75, 25, 58]\nexpected_result = [14, 22, 25]\n\nresult = heap_queue_smallest(test_case)\n"], ["\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\nimport math\n\ndef surface_area_cone(radius,height):\n    # calculate the slant height using Pythagorean theorem\n    slant_height = math.sqrt(radius**2 + height**2)\n    \n    # calculate the base area (circle) and lateral surface area (triangle)\n    base_area = math.pi * radius ** 2\n    lateral_surface_area = 1/2 * circumference_of_base * height\n    \n    # add the two areas together to get the total surface area\n    total_surface_area = base_area + lateral_surface_area\n    \n    return round(total_surface_area, 2)\n\n# test case"], ["\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a,b):\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\n    "], ["\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\nimport math\n\ndef diameter_circle(radius):\n    return 2 * radius * math.sqrt(2)<|endoftext|>"], ["\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(lst):\n    return \" \".join(lst)<|endoftext|>"], ["\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(num1,num2):\n    if num1 > num2:\n        smaller = num2\n    else:\n        smaller = num1\n\n    for i in range(1,smaller+1):\n        if (num1 % i == 0 and num2 % i == 0):\n            comm_divisor = i\n    return comm_divisor\n\n"], ["\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a,b):\n    return a%b\n"], ["\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(nums):\n    # Initialize an empty list for the result\n    res = []\n    \n    # Iterate through the input list and calculate the sum of consecutive elements\n    for i in range(len(nums)):\n        if i == len(nums) - 1:\n            break\n        \n        res.append(sum(nums[i:i+2]))\n        \n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    return (n * (n + 1) / 2)**2\n"], ["\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n    arr.sort()\n    return arr\n"], ["\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\nfrom math import factorial\n\ndef permutation_coefficient(p: int, n: int):\n    return factorial(n) / factorial(n - p)\n\n"], ["\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(list1, list2):\n    for word in list2:\n        if word in list1:\n            list1.remove(word)\n    return list1\n\nlist1 = ['red', 'green', 'blue', 'white', 'black', 'orange']\nlist2 = ['white', 'orange']\n"], ["\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1, list2):\n    return sorted(list1) == sorted(list2)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_odd(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum / (n/2)\n"], ["\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\nfrom typing import List\n\n\ndef no_of_subsequences(arr: List[int], target: int):\n    n = len(arr)\n    dp = [[0] * (target + 1) for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = 1\n\n    for j in range(1, target + 1):\n        if arr[0] <= j:\n            dp[0][j] = 1\n\n    for i in range(1, n):\n        for j in range(1, target + 1):\n            if arr[i] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i]]\n\n    return dp[n - 1][target]\n\n"]]