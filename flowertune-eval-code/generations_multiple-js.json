[["//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){ \n    numbers.sort(function(a,b){return a-b});\n    for(var i = 0; i < numbers.length-1; i++){\n        if(numbers[i+1] - numbers[i] <= threshold){\n            return true;\n        }\n    }\n    return false;\n}  // has_close_elements() function ends here.  // 1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167."], ["//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){ //input string of parentheses\n    let stack = []; //stack to keep track of the start of each group\n    let groups = []; //array to hold the groups\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            stack.push(i);\n        }else if(paren_string[i] === ')'){\n            let start = stack.pop();\n            groups.push(paren_string.slice(start, i+1));\n        }\n    }\n    return groups;\n} //end of function\n"], ["//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){return number - Math.floor(number);}\n"], ["//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){ \n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}  // below_zero([1, 2, 3]) returns false"], ["//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){  \n  // Calculate the mean of the dataset\n  var mean = numbers.reduce(function(a, b) { return a + b; }, 0) / numbers.length;\n  // Calculate the absolute deviation of each number from the mean\n  var deviations = numbers.map(function(x) { return Math.abs(x - mean); });\n  // Return the mean of these deviations\n  return deviations.reduce(function(a, b) { return a + b; }, 0) / deviations.length;\n} // end mean_absolute_deviation() function"], ["//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){  \n    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        result.push(numbers[i]);\n        if (i < numbers.length - 1) {\n            result.push(delimeter);\n        }\n    }\n    return result;\n}  // >>> intersperse([1, 2, 3], 4)"], ["//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){ //takes a string of groups of parentheses\n    let groups = paren_string.split(\" \");\n    let results = [];\n    for (let group of groups){\n        let level = 0;\n        let max_level = 0;\n        for (let char of group){\n            if (char == \"(\"){\n                level += 1;\n                max_level = Math.max(max_level, level);\n            } else if (char == \")\"){\n                level -= 1;\n            }\n        }\n        results.push(max_level);\n    }\n    return results;\n}\n"], ["//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){ \n    return strings.filter(function(string){ \n        return string.indexOf(substring) != -1; \n    }); \n} \n"], ["//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){  \n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}  // This function takes an array of integers as input, calculates the sum and product of all the integers in the array, and returns an array containing the sum and product. If the array is empty, it returns [0, 1].  // This function takes an array of integers as input, calculates the sum and product of all the integers in the array, and returns an array containing the sum and product. If the array is empty, it returns [0, 1].  // This function takes an array of integers as input, calculates the sum and product of all the integers in the array, and returns an array containing the sum and product. If the array is empty, it returns [0, 1].  // This function takes an array of integers as input, calculates the sum and product of all the integers in the array, and returns an array containing the sum and product. If the array is empty, it returns [0, 1].  // This function takes an array of integers as input, calculates the sum and product of all the integers in the array, and returns an array containing the sum and product. If the array is empty, it returns [0, 1].  // This function takes an array of integers as input, calculates the sum and product of all the integers in the array, and returns an array containing the sum and product. If the array is empty, it returns [0, 1].  // This function takes an array of integers as input, calculates the sum and product of all the integers in the array, and returns an array containing the sum and product. If the array is empty, it returns [0, 1].  // This function takes an array of integers as input, calculates the sum and product of all the integers in the array, and returns an array containing the sum and product. If the array is empty, it returns [0, 1].  // This function takes an array of integers as input, calculates the sum and product of all the integers in the array, and returns an array containing the sum and product. If the array is empty, it returns [0, 1].  // This function takes an array of integers as input, calculates the sum and product of all the integers in the array, and returns an array containing the sum and product. If the array is empty, it returns [0, 1].  // This function takes an array of integers as input, calculates the sum and product of all the integers in the array, and returns an array containing the sum and product. If the array is empty, it returns [0, 1].  // This function takes an array of integers as input, calculates the sum and product of all the integers in the array, and returns an array containing the sum and product. If the array is empty, it returns [0, 1].  // This function takes an array of integers as input, calculates the sum and product of all the integers in the array, and returns an array containing the sum and product. If the array is empty, it returns [0, 1].  // This function takes an array of integers as input, calculates the sum and product of all the integers in the array, and returns an array containing the sum and product. If the array is empty, it returns [0, 1].  // This function takes an array of integers as input, calculates the sum and product of all the integers in the array, and returns an array containing the sum and product. If the array is empty, it returns [0, 1].  // This function takes an array of integers as input, calculates the sum and product of all the integers in the array, and returns an array containing the sum and product. If the array is empty, it returns [0, 1].  // This function takes an array of integers as input, calculates the sum and product of all the integers in the array, and returns an array containing the sum and product. If the array is empty, it returns [0, 1].  // This function takes an array of integers as input, calculates the sum and product of all the integers in the empty array, and returns an array containing the sum and product. If the array is empty, it returns [0, 1]. "], ["//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){  \n    let max = numbers[0];\n    let result = [max];\n    for (let i = 1; i < numbers.length; i++) {\n        max = Math.max(max, numbers[i]);\n        result.push(max);\n    }\n    return result;\n}  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end of function rolling_max()  // end"], ["//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){ \n    var prefix = string;\n    var suffix = string;\n    while (prefix.length > 0 && prefix[0] === suffix[prefix.length - 1]) {\n        prefix = prefix.slice(1);\n        suffix = suffix.slice(0, -1);\n    }\n    return string + suffix.split('').reverse().join('');\n}  // end make_palindrome() function\n"], ["//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){return a.split('').map((x,i)=>x^b[i]).join('');}\n"], ["//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){ return strings.length ? strings.reduce((a,b) => a.length > b.length ? a : b) : undefined; } // eslint-disable-line no-undef\n"], ["//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){ \n    if (b === 0) {\n        return a;\n    } else {\n        return greatest_common_divisor(b, a % b);\n    }\n}\n"], ["//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){ \n    let prefixes = [];\n    for (let i = 1; i <= string.length; i++){\n        prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n}\n"], ["//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){return Array(n+1).join(' ').split(' ').map(function(x,i){return i}).join(' ');} // credit: http://stackoverflow.com/questions/1293139/generate-a-list-of-numbers-from-0-to-n\n"], ["//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){ \n    return new Set(string.toLowerCase()).size; \n}\n"], ["//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){ // music_string is a string of notes\n    let notes = music_string.split(' '); // split the string into an array of notes\n    let beats = []; // an array to store the beats of each note\n    for (let note of notes) { // for each note in the array\n        if (note === 'o') { // if the note is a whole note\n            beats.push(4); // add 4 beats to the array\n        } else if (note === 'o|') { // if the note is a half note\n            beats.push(2); // add 2 beats to the array\n        } else if (note === '.|') { // if the note is a quarter note\n            beats.push(1); // add 1 beat to the array\n        }\n    }\n    return beats; // return the array of beats\n} // end of parse_music function\n"], ["//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){return string.split(substring).length-1} //returns the number of times the substring is found in the string. Counting overlapping cases. 0 if the substring is not found. 1 if the substring is found once. 2 if the substring is found twice. etc.  //returns the number of times the substring is found in the string. Counting overlapping cases. 0 if the substring is not found. 1 if the substring is found once. 2 if the substring is found twice. etc.  //returns the number of times the substring is found in the string. Counting overlapping cases. 0 if the substring is not found. 1 if the substring is found once. 2 if the substring is found twice. etc.  //returns the number of times the substring is found in the string. Counting overlapping cases. 0 if the substring is not found. 1 if the substring is found once. 2 if the substring is found twice. etc.  //returns the number of times the substring is found in the string. Counting overlapping cases. 0 if the substring is not found. 1 if the substring is found once. 2 if the substring is found twice. etc.  //returns the number of times the substring is found in the string. Counting overlapping cases. 0 if the substring is not found. 1 if the substring is found once. 2 if the substring is found twice. etc.  //returns the number of times the substring is found in the string. Counting overlapping cases. 0 if the substring is not found. 1 if the substring is found once. 2 if the substring is found twice. etc.  //returns the number of times the substring is found in the string. Counting overlapping cases. 0 if the substring is not found. 1 if the substring is found once. 2 if the substring is found twice. etc.  //returns the number of times the substring is found in the string. Counting overlapping cases. 0 if the substring is not found. 1 if the substring is found once. 2 if the substring is found twice. etc.  //returns the number of times the substring is found in the string. Counting overlapping cases. 0 if the substring is not found. 1 if the substring is found once. 2 if the substring is found twice. etc.  //returns the number of times the substring is found in the string. Counting overlapping cases. 0 if the substring is not found. 1 if the substring is found once. 2 if the substring is found twice. etc.  //returns the number of times the substring is found in the string. Counting overlapping cases. 0 if the substring is not found. 1 if the substring is found once. 2 if the substring is found twice. etc.  //returns the number of times the substring is found in the string. Counting overlapping cases. 0 if the substring is not found. 1 if the substring is found once. 2 if the substring is found twice. etc.  //returns the number of times the substring is found in the string. Counting overlapping cases. 0 if the substring is not found. 1 if the substring is found once. 2 if the substring is found twice. etc.  //returns the number of times the substring is found in the string. Counting overlapping cases. 0 if the substring is not found. 1 if the substring is found once. 2 if the substring is found twice. etc.  //returns the number of times the substring is found in the string. Counting overlapping cases. 0 if the substring is not found. 1 if the substring is found once. 2 if the substring is found twice. etc.  //returns the number of times the substring is found in the string. Counting overlapping cases. 0 if the substring is not found. 1 if the substring is found once. 2 if the substring is found twice. etc.  //returns the number of times the substring is found in the string. Counting overlapping cases. 0 if the substring is not found. 1 if the substring is found once. 2 if the substring is found twice. etc.  //returns the number of times the substring is found in the string. Counting overlapping cases. 0 if the substring is not found. 1 if the substring is found once. 2 if the substring is found twice. etc.  //returns the number of times the substring is found"], ["//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){  \n    let words = numbers.split(\" \");\n    let sorted = words.sort(function(a, b) {\n        let numA = a.replace(\"zero\", \"0\").replace(\"one\", \"1\").replace(\"two\", \"2\").replace(\"three\", \"3\").replace(\"four\", \"4\").replace(\"five\", \"5\").replace(\"six\", \"6\").replace(\"seven\", \"7\").replace(\"eight\", \"8\").replace(\"nine\", \"9\");\n        let numB = b.replace(\"zero\", \"0\").replace(\"one\", \"1\").replace(\"two\", \"2\").replace(\"three\", \"3\").replace(\"four\", \"4\").replace(\"five\", \"5\").replace(\"six\", \"6\").replace(\"seven\", \"7\").replace(\"eight\", \"8\").replace(\"nine\", \"9\");\n        return numA - numB;\n    });\n    return sorted.join(\" \");\n}  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\"  // Output: \"one three five\""], ["//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){ \n    numbers.sort((a, b) => a - b);\n    let min_diff = Infinity;\n    let closest_pair = [numbers[0], numbers[0]];\n    for (let i = 0; i < numbers.length - 1; i++) {\n        let diff = Math.abs(numbers[i] - numbers[i + 1]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return closest_pair;\n}  // function find_closest_elements(numbers) { ... }  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of function definition.  // end of"], ["//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){ // numbers is an array of numbers\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n} // end of rescale_to_unit function\n"], ["//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){ return values.filter(value => typeof value === 'number' && Number.isInteger(value)); }\n"], ["//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){return string.length;}\n"], ["//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){  \n  for (var i = n-1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n}  // largest_divisor(15) returns 5"], ["//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){var factors=[],i=2;while(n>1){while(n%i==0){factors.push(i);n/=i;}i++;}return factors;} // thanks to https://stackoverflow.com/questions/1128723/prime-factoring-in-javascript"], ["//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){  \n    let seen = new Set();\n    return numbers.filter(x => {\n        if (seen.has(x)) {\n            return false;\n        } else {\n            seen.add(x);\n            return true;\n        }\n    });\n}  // remove_duplicates([1, 2, 3, 2, 4]) returns [1, 3, 4]  // remove_duplicates([1, 2, 2, 3, 4, 4, 5, 6, 6, 7]) returns [1, 2, 3, 5, 7]  // remove_duplicates([1, 1, 1, 1, 1]) returns []  // remove_duplicates([]) returns []  // remove_duplicates([1, 2, 3, 4, 5]) returns [1, 2, 3, 4, 5]  // remove_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]) returns [1, 2, 5]  // remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9]) returns [1, 2, 3, 4, 5, 6, 7, 8, 9]  // remove_duplicates([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) returns []  // remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) returns [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  // remove_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]) returns [1, 2, 5]  // remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) returns [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]  // remove_duplicates([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) returns []  // remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) returns [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]  // remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) returns [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]  // remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) returns [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]  // remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8"], ["//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){ \n    return string.split('').map(function(c){ \n        return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase(); \n    }).join(''); \n} \n"], ["//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){return strings.join(\"\")}\n"], ["//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){return strings.filter(function(string){return string.startsWith(prefix);});}\n"], ["//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){return l.filter(i=>i>0)}\n"], ["//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){if(n<=1){return false;}for(var i=2;i*i<=n;i++){if(n%i==0){return false;}}return true;} // 1 line version: function is_prime(n){return n>1&&Array(2).fill(0).map((_,i)=>i+2).every(i=>n%i>0);} // 1 line version: function is_prime(n){return n>1&&Array.from({length:2},(_,i)=>i+2).every(i=>n%i>0);} // 1 line version: function is_prime(n){return n>1&&Array.from({length:2}).map((_,i)=>i+2).every(i=>n%i>0);} // 1 line version: function is_prime(n){return n>1&&[2,3,4,5,6,7,8,9,10].every(i=>n%i>0);} // 1 line version: function is_prime(n){return n>1&&[2,3,4,5,6,7,8,9,10].filter(i=>n%i>0).length==9;} // 1 line version: function is_prime(n){return n>1&&[2,3,4,5,6,7,8,9,10].reduce((a,b)=>a&&n%b>0,1);} // 1 line version: function is_prime(n){return n>1&&[2,3,4,5,6,7,8,9,10].reduce((a,b)=>a&&n%b>0,1)}; // 1 line version: function is_prime(n){return n>1&&[2,3,4,5,6,7,8,9,10].reduce((a,b)=>a&&n%b>0,1)}; // 1 line version: function is_prime(n){return n>1&&[2,3,4,5,6,7,8,9,10].reduce((a,b)=>a&&n%b>0,1)}; // 1 line version: function is_prime(n){return n>1&&[2,3,4,5,6,7,8,9,10].reduce((a,b)=>a&&n%b>0,1)}; // 1 line version: function is_prime(n){return n>1&&[2,3,4,5,6,7,8,9,10].reduce((a,b)=>a&&n%b>0,1)}; // 1 line version: function is_prime(n){return n>1&&[2,3,4,5,6,7,8,9,10].reduce((a,b)=>a&&n%b>0,1)}; // 1 line version: function is_prime(n){return n>1&&[2,3,4,5,6,7,8,9,10].reduce((a,b)=>a&&n%b>0,1)}; // 1 line version: function is_prime(n){return n>1&&[2,3,4,5,6,7,8,9,10].reduce((a,b)=>a&&n%b>0,1)}; // 1 line version: function is_prime(n){return n>1&&[2,3,4,5,6,7,8,9,10].reduce((a,b)=>a&&n%b>0,1)}; // 1 line version: function is_prime(n){return n>1&&[2,3,4,5,6,7,8,9,10].reduce((a,b)=>a&&n%b>0,1)}; // 1 line version: function is_prime(n){return n>1&&[2,3,4,5,6,7,8,9,10].reduce((a,b)=>a&&n%b>0,1)}; // 1 line version: function is_prime(n){return n>1&&[2,3,4,5,6,7,8,9,10].reduce((a,b)=>a&&n%b>0,1)}; // 1 line version: function is_prime(n){return n>1&&[2,3,4,5,6,7,8"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){return l.map((x,i)=>i%3?x:l.slice(i,i+3).sort()[0]);} //This is a one-liner solution, but it is not very readable. It uses the map function to create a new array where each element is either the element at the same index in the original array, or the smallest element in the slice of three elements starting at that index. The slice is sorted before its smallest element is taken. The map function is used instead of a for loop to make the code more concise. The slice function is used to get the slice of three elements starting at the current index, and the sort function is used to sort this slice. The map function is used to create a new array where each element is either the element at the same index in the original array, or the smallest element in the slice of three elements starting at that index. The result is a new array that is identical to the original array in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal to the values of the corresponding indices of the original array, but sorted. This function assumes that the input array has at least three elements. If the input array has less than three elements, the function will not work correctly. This function also assumes that the input array contains only numbers. If the input array contains non-numeric elements, the function will not work correctly. This function has a time complexity of O(n), where n is the number of elements in the input array. This is because the map function and the slice function both have a time complexity of O(n), and the sort function has a time complexity of O(n log n). However, the sort function is only called for each slice of three elements, so the overall time complexity is O(n). This function has a space complexity of O(n), because it creates a new array that is the same size as the input array. This is because the map function creates a new array where each element is either the element at the same index in the original array, or the smallest element in the slice of three elements starting at that index. The result is a new array that is identical to the original array in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal to the values of the corresponding indices of the original array, but sorted. This function is a good solution for this problem because it is efficient and easy to understand. It is also a good solution because it handles the case where the input array has less than three elements correctly. It is also a good solution because it handles the case where the input array contains non-numeric elements correctly. However, it is not a good solution if the input array is very large, because it has a time complexity of O(n log n) due to the sort function. In this case, a more efficient solution would be to use a different algorithm, such as the quicksort algorithm, which has a time complexity of O(n log n) on average, but is faster in practice because it has a lower constant factor. Another good solution would be to use the built-in sort function of the array, which has a time complexity of O(n log n) on average, but is faster in practice because it has a lower constant factor. However, these solutions are more complex and harder to understand than the one-liner solution, so they are not as good for this problem. In conclusion, the one-liner solution is a good solution for this problem because it is efficient and easy to understand. It is also a good solution because it handles the case where the input array has less than three elements correctly. It is also a good solution because it handles the case where the input array contains non-numeric elements correctly. However, it is not a good solution if the input array is very large, because it has a time complexity of O(n log n) due to the sort function. In this case, a more efficient solution would be to use a different algorithm, such as the quicksort algorithm, which has a time complexity of O(n log n) on average, but is faster in practice because it has a lower constant factor. Another good solution would be to use the built-in sort function of the array, which has a time complexity of O(n log n) on average"], ["//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){return [...new Set(l)].sort((a, b) => a - b);}\n"], ["//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){return Math.max.apply(null, l);}\n"], ["//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){var count=0;for(var i=0;i<n;i++){if(i%11==0||i%13==0){count+=String(i).split('7').length-1}}}return count;}; // 1 line solution"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){return l.map((x,i)=>i%2==0?l.slice(i,i+2).sort()[1]:x)}; // This is a very concise version of the function, but it's not the most efficient one. It creates a new array with the same elements as the input array, but with the even elements sorted. It does this by using the map function to create a new array where each element is the corresponding element in the input array, unless the index of the element is even, in which case it is the second element of the slice of the input array from the current index to the current index plus 2, sorted. The sort function is used to sort the slice of the input array. The result is an array where the even elements are sorted, and the odd elements are the same as in the input array. This function has a time complexity of O(n log n) because of the sort function, where n is the number of elements in the input array. It has a space complexity of O(n) because it creates a new array with the same number of elements as the input array. \n"], ["//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){var fib=[0,1];while(fib.length<n){fib.push(fib[fib.length-1]+fib[fib.length-2]);}for(var i=0;i<fib.length;i++){var is_prime=true;for(var j=2;j*j<=fib[i];j++){if(fib[i]%j===0){is_prime=false;break;}}if(is_prime){return fib[i];}}return null;} //by user: 0x0ade"], ["//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){return l.length>=3 && l.some((x,i)=>l.some((y,j)=>l.some((z,k)=>x+y+z===0 && i!==j && j!==k && i!==k)));} // eslint-disable-line no-unused-vars"], ["//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){ // n is the number of cars in each direction\n    let collisions = 0;\n    for (let i = 0; i < n; i++){\n        for (let j = 0; j < n; j++){\n            if (i != j){\n                collisions++;\n            }\n        }\n    }\n    return collisions;\n} // This function is not correct.  It counts the number of pairs of cars, not the number of collisions.\n"], ["//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){return l.map(function(x){return x+1;});}\n"], ["//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){return l.length>1 && l.some((x,i)=>l.some((y,j)=>x+y===0&&i!==j))}  // true if there are two distinct elements in the array that sum to zero, and false otherwise.  // >>> pairs_sum_to_zero([1, 3, 5, 0])  // false  // >>> pairs_sum_to_zero([1, 3, -2, 1])  // false  // >>> pairs_sum_to_zero([1, 2, 3, 7])  // false  // >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])  // true  // >>> pairs_sum_to_zero([1])  // false"], ["//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){return parseInt(x).toString(base).toUpperCase();}\n"], ["//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){ return (a * h) / 2; }\n"], ["//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){var a=0,b=0,c=2,d=0;for(var i=3;i<=n;i++){var e=a+b+c+d;a=b;c=d;b=e+d=d=e+c;};return b;} // 1 line"], ["//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){ \n    l.sort(function(a, b){return a-b});\n    var n = l.length;\n    if(n%2==0){\n        return (l[n/2 - 1] + l[n/2])/2;\n    }else{\n        return l[Math.floor(n/2)];\n    }\n}  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()  // end of function median()"], ["//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){return text === text.split(\"\").reverse().join(\"\")}\n"], ["//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){return n%p} //This is a very simple function. It just returns the remainder of n divided by p. It is not the most efficient way to compute 2^n modulo p, but it is simple and works for small inputs. For larger inputs, you would want to use a more efficient algorithm, such as the \"exponentiation by squaring\" method. This method is more efficient because it only requires O(log n) multiplications, whereas the simple method requires O(n) multiplications. Here is an example of how you could implement the \"exponentiation by squaring\" method in JavaScript: function modp(n, p){var r = 1, x = 2; while(n){if(n&1)r = (r*x)%p; x = (x*x)%p; n>>=1;} return r;} This function works by repeatedly squaring x and multiplying it by r if the current bit of n is 1. This way, it only requires O(log n) multiplications, making it much more efficient than the simple method for large inputs. //Note: The above code is not actually used in this function. It is just an example of how you could implement the \"exponentiation by squaring\" method in JavaScript. The simple method is used in this function because it is simpler and works well for small inputs. //Note: The above code is not actually used in this function. It is just an example of how you could implement the \"exponentiation by squaring\" method in JavaScript. The simple method is used in this function because it is simpler and works well for small inputs. //Note: The above code is not actually used in this function. It is just an example of how you could implement the \"exponentiation by squaring\" method in JavaScript. The simple method is used in this function because it is simpler and works well for small inputs. //Note: The above code is not actually used in this function. It is just an example of how you could implement the \"exponentiation by squaring\" method in JavaScript. The simple method is used in this function because it is simpler and works well for small inputs. //Note: The above code is not actually used in this function. It is just an example of how you could implement the \"exponentiation by squaring\" method in JavaScript. The simple method is used in this function because it is simpler and works well for small inputs. //Note: The above code is not actually used in this function. It is just an example of how you could implement the \"exponentiation by squaring\" method in JavaScript. The simple method is used in this function because it is simpler and works well for small inputs. //Note: The above code is not actually used in this function. It is just an example of how you could implement the \"exponentiation by squaring\" method in JavaScript. The simple method is used in this function because it is simpler and works well for small inputs. //Note: The above code is not actually used in this function. It is just an example of how you could implement the \"exponentiation by squaring\" method in JavaScript. The simple method is used in this function because it is simpler and works well for small inputs. //Note: The above code is not actually used in this function. It is just an example of how you could implement the \"exponentiation by squaring\" method in JavaScript. The simple method is used in this function because it is simpler and works well for small inputs. //Note: The above code is not actually used in this function. It is just an example of how you could implement the \"exponentiation by squaring\" method in JavaScript. The simple method is used in this function because it is simpler and works well for small inputs. //Note: The above code is not actually used in this function. It is just an example of how you could implement the \"exponentiation by squaring\" method in JavaScript. The simple method is used in this function because it is simpler and works well for small inputs. //Note: The above code is not actually used in this function. It is just an example of how you could implement the \"exponentiation by squaring\" method in JavaScript. The simple method is used in this function because it is simpler and works well for small inputs. //Note: The above code is not actually used in this function. It is just an example of how you could implement the \"exponentiation by squaring\" method in JavaScript"], ["//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){return text.replace(/[aeiouAEIOU]/g,\"\")}  // [aeiouAEIOU] is a regular expression that matches any vowel. The g flag makes it match all occurrences in the string, not just the first one. The replace function replaces all occurrences of the pattern with the string that is passed as the second argument. In this case, it replaces all vowels with an empty string, effectively removing them.  // return text.replace(/[aeiouAEIOU]/g,\"\")  // [aeiouAEIOU] is a regular expression that matches any vowel. The g flag makes it match all occurrences in the string, not just the first one. The replace function replaces all occurrences of the pattern with the string that is passed as the second argument. In this case, it replaces all vowels with an empty string, effectively removing them.  // return text.replace(/[aeiouAEIOU]/g,\"\")  // [aeiouAEIOU] is a regular expression that matches any vowel. The g flag makes it match all occurrences in the string, not just the first one. The replace function replaces all occurrences of the pattern with the string that is passed as the second argument. In this case, it replaces all vowels with an empty string, effectively removing them.  // return text.replace(/[aeiouAEIOU]/g,\"\")  // [aeiouAEIOU] is a regular expression that matches any vowel. The g flag makes it match all occurrences in the string, not just the first one. The replace function replaces all occurrences of the pattern with the string that is passed as the second argument. In this case, it replaces all vowels with an empty string, effectively removing them.  // return text.replace(/[aeiouAEIOU]/g,\"\")  // [aeiouAEIOU] is a regular expression that matches any vowel. The g flag makes it match all occurrences in the string, not just the first one. The replace function replaces all occurrences of the pattern with the string that is passed as the second argument. In this case, it replaces all vowels with an empty string, effectively removing them.  // return text.replace(/[aeiouAEIOU]/g,\"\")  // [aeiouAEIOU] is a regular expression that matches any vowel. The g flag makes it match all occurrences in the string, not just the first one. The replace function replaces all occurrences of the pattern with the string that is passed as the second argument. In this case, it replaces all vowels with an empty string, effectively removing them.  // return text.replace(/[aeiouAEIOU]/g,\"\")  // [aeiouAEIOU] is a regular expression that matches any vowel. The g flag makes it match all occurrences in the string, not just the first one. The replace function replaces all occurrences of the pattern with the string that is passed as the second argument. In this case, it replaces all vowels with an empty string, effectively removing them.  // return text.replace(/[aeiouAEIOU]/g,\"\")  // [aeiouAEIOU] is a regular expression that matches any vowel. The g flag makes it match all occurrences in the string, not just the first one. The replace function replaces all occurrences of the pattern with the string that is passed as the second argument. In this case, it replaces all vowels with an empty string, effectively removing them.  // return text.replace(/[aeiouAEIOU]/g,\"\")  // [aeiouAEIOU] is a regular expression that matches any vowel. The g flag makes it match all occurrences in the string, not just the first one. The replace function replaces all occurrences of the pattern with the string that is passed as the second argument. In this case, it replaces all vowels with an empty string, effectively removing them.  // return text.replace(/[aeiouAEIOU]/g,\"\")  // [aeiouAEIOU] is a regular expression that matches any vowel. The g flag makes it match all occurrences in the string, not just the first one. The replace function replaces all occurrences of the pattern with the string that is passed as the second argument. In this case, it replaces all vowels with an empty string, effectively removing them.  // return text.replace(/[aeiouAEIOU]/g,\"\")  // [aeiouAEIOU] is a regular expression that matches any vowel. The g flag makes it match all occurrences in the string, not just the first one. The replace function replaces all"], ["//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){return l.every(i => i < t);}\n"], ["//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){return x + y;}\n"], ["//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){return [...s0].sort().join() === [...s1].sort().join()} //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have the same characters.  //sort the characters in each string and compare them. If they are the same, then the strings have"], ["//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){return n<2?n:fib(n-1)+fib(n-2);}\n"], ["//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){ \n    let stack = [];\n    for (let bracket of brackets){\n        if (bracket == \"<\"){\n            stack.push(bracket);\n        } else if (bracket == \">\"){\n            if (stack.length == 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length == 0;\n}  // O(n) time, O(n) space.  n is the length of the string.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop.  The space is used by the stack.  The time is used by the loop."], ["//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){return l.every((x,i)=>x<=l[i+1])||l.every((x,i)=>x>=l[i+1])} // return true if all elements in the list are monotonically increasing or decreasing. Otherwise return false. \n"], ["//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){ return [...new Set(l1)].filter(x => new Set(l2).has(x)).sort((a, b) => a - b); } \n"], ["//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){var i=2,factor;while(i*i<n){if(n%i===0){factor=i;while(n%factor===0){n/=factor;}}i++;}return n;} // 1 line version: function largest_prime_factor(n){for(var i=2;i*i<n;i++){if(n%i===0){while(n%i===0){n/=i;}}}return n;} // 1 line version: function largest_prime_factor(n){for(var i=2;i*i<n;i++){if(n%i===0){while(n%i===0){n/=i;}}}return n;}; // 1 line version: function largest_prime_factor(n){for(var i=2;i*i<n;i++){if(n%i===0){while(n%i===0){n/=i;}}}return n;}; // 1 line version: function largest_prime_factor(n){for(var i=2;i*i<n;i++){if(n%i===0){while(n%i===0){n/=i;}}}return n;}; // 1 line version: function largest_prime_factor(n){for(var i=2;i*i<n;i++){if(n%i===0){while(n%i===0){n/=i;}}}return n;}; // 1 line version: function largest_prime_factor(n){for(var i=2;i*i<n;i++){if(n%i===0){while(n%i===0){n/=i;}}}return n;}; // 1 line version: function largest_prime_factor(n){for(var i=2;i*i<n;i++){if(n%i===0){while(n%i===0){n/=i;}}}return n;}; // 1 line version: function largest_prime_factor(n){for(var i=2;i*i<n;i++){if(n%i===0){while(n%i===0){n/=i;}}}return n;}; // 1 line version: function largest_prime_factor(n){for(var i=2;i*i<n;i++){if(n%i===0){while(n%i===0){n/=i;}}}return n;}; // 1 line version: function largest_prime_factor(n){for(var i=2;i*i<n;i++){if(n%i===0){while(n%i===0){n/=i;}}}return n;}; // 1 line version: function largest_prime_factor(n){for(var i=2;i*i<n;i++){if(n%i===0){while(n%i===0){n/=i;}}}return n;}; // 1 line version: function largest_prime_factor(n){for(var i=2;i*i<n;i++){if(n%i===0){while(n%i===0){n/=i;}}}return n;}; // 1 line version: function largest_prime_factor(n){for(var i=2;i*i<n;i++){if(n%i===0){while(n%i===0){n/=i;}}}return n;}; // 1 line version: function largest_prime_factor(n){for(var i=2;i*i<n;i++){if(n%i===0){while(n%i===0){n/=i;}}}return n;}; // 1 line version: function largest_prime_factor(n){for(var i=2;i*i<n;i++){if(n%i===0){while(n%i===0){n/=i;}}}return n;}; // 1 line version: function largest_prime_factor(n){for(var i=2;i*i<n;i++){if(n%i===0){while(n%i===0){n/=i;}}}return n;}; // 1 line version: function largest_prime_factor(n){for(var i=2;i*i<n;i++){if(n%i===0){while(n%i===0){n/=i;}}}return n;}; // 1 line version: function largest_prime_factor(n){for(var i=2;i*i<n;i++){if(n%i===0){while(n%i===0){n/=i;}}}return n;}; // 1 line version: function largest_prime_factor(n){for(var i=2;i*i<n;i++){if(n%i===0){while(n%i===0){n/=i;}}}return n;}; // 1 line version: function largest_prime_factor(n){for(var i=2;i*i<n;i++){if(n%i===0){while(n%i===0){n/=i;}}}return n;}; // 1 line version: function largest_prime_factor(n){for(var i=2;i*i<n;i++){if(n%i===0){while(n%i===0){n/=i;}}}return n;}; // 1 line version: function largest_prime_factor(n){for(var i=2;i*i<n;i++){if(n%i===0){while(n"], ["//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){return n*(n+1)/2;} //This is the formula for the sum of the first n natural numbers. It is derived from the formula for the sum of an arithmetic series. The formula is (n*(n+1))/2. This is a more efficient way to calculate the sum of the first n natural numbers than using a loop. \n"], ["//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){return brackets.split(\"(\").length-1==brackets.split(\")\").length;} //split the string into substrings at every opening bracket, then count the number of substrings. This is equal to the number of opening brackets. Do the same for closing brackets. If the two numbers are equal, then every opening bracket has a corresponding closing bracket.  //this function works because the split function splits the string into substrings at every occurrence of the specified character, and returns an array of the substrings.  //the length of the array is the number of occurrences of the specified character.  //the split function splits the string into substrings at every occurrence of the specified character, and returns an array of the substrings.  //the length of the array is the number of occurrences of the specified character.  //the split function splits the string into substrings at every occurrence of the specified character, and returns an array of the substrings.  //the length of the array is the number of occurrences of the specified character.  //the split function splits the string into substrings at every occurrence of the specified character, and returns an array of the substrings.  //the length of the array is the number of occurrences of the specified character.  //the split function splits the string into substrings at every occurrence of the specified character, and returns an array of the substrings.  //the length of the array is the number of occurrences of the specified character.  //the split function splits the string into substrings at every occurrence of the specified character, and returns an array of the substrings.  //the length of the array is the number of occurrences of the specified character.  //the split function splits the string into substrings at every occurrence of the specified character, and returns an array of the substrings.  //the length of the array is the number of occurrences of the specified character.  //the split function splits the string into substrings at every occurrence of the specified character, and returns an array of the substrings.  //the length of the array is the number of occurrences of the specified character.  //the split function splits the string into substrings at every occurrence of the specified character, and returns an array of the substrings.  //the length of the array is the number of occurrences of the specified character.  //the split function splits the string into substrings at every occurrence of the specified character, and returns an array of the substrings.  //the length of the array is the number of occurrences of the specified character.  //the split function splits the string into substrings at every occurrence of the specified character, and returns an array of the substrings.  //the length of the array is the number of occurrences of the specified character.  //the split function splits the string into substrings at every occurrence of the specified character, and returns an array of the substrings.  //the length of the array is the number of occurrences of the specified character.  //the split function splits the string into substrings at every occurrence of the specified character, and returns an array of the substrings.  //the length of the array is the number of occurrences of the specified character.  //the split function splits the string into substrings at every occurrence of the specified character, and returns an array of the substrings.  //the length of the array is the number of occurrences of the specified character.  //the split function splits the string into substrings at every occurrence of the specified character, and returns an array of the substrings.  //the length of the array is the number of occurrences of the specified character.  //the split function splits the string into substrings at every occurrence of the specified character, and returns an array of the substrings.  //the length of the array is the number of occurrences of the specified character.  //the split function splits the string into substrings at every occurrence of the specified character, and returns an array of the substrings.  //the length of the array is the number of occurrences of the specified character.  //the split function splits the string into substrings at every occurrence of the specified character, and returns an array of the substrings.  //the length of the array is the number of occurrences of the specified character.  //the split function splits the string into substrings at every occurrence of the specified character, and returns an array of the substrings.  //the length of the array is the number of occurrences of the specified character.  //the split function splits the string into substrings at every occurrence of"], ["//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){return xs.slice(1).map((x,i)=>x*i)}; //xs.slice(1) is used to skip the first element of the array. map() is used to multiply each element of the array by its index. i is the index of the element. x is the element itself. // return the new array. // the new array is the derivative of the original array. // the derivative of a polynomial is a polynomial where each coefficient is the derivative of the corresponding coefficient of the original polynomial. // the derivative of a constant is 0. // the derivative of x^n is n*x^(n-1). // the derivative of x^0 is 0. // the derivative of x is 1. // the derivative of a sum is the sum of the derivatives. // the derivative of a product is the derivative of the first term times the second term plus the first term times the derivative of the second term. // the derivative of a constant times a polynomial is the constant times the derivative of the polynomial. // the derivative of a polynomial times a constant is the constant times the derivative of the polynomial. // the derivative of a sum of polynomials is the sum of the derivatives of the polynomials. // the derivative of a product of polynomials is the sum of the derivatives of the polynomials times the other polynomial. // the derivative of a polynomial times a polynomial is the sum of the derivatives of the polynomials times the other polynomial. // the derivative of a polynomial times a constant is the constant times the derivative of the polynomial. // the derivative of a constant times a polynomial is the constant times the derivative of the polynomial. // the derivative of a sum of polynomials is the sum of the derivatives of the polynomials. // the derivative of a product of polynomials is the sum of the derivatives of the polynomials times the other polynomial. // the derivative of a polynomial times a polynomial is the sum of the derivatives of the polynomials times the other polynomial. // the derivative of a polynomial times a constant is the constant times the derivative of the polynomial. // the derivative of a constant times a polynomial is the constant times the derivative of the polynomial. // the derivative of a sum of polynomials is the sum of the derivatives of the polynomials. // the derivative of a product of polynomials is the sum of the derivatives of the polynomials times the other polynomial. // the derivative of a polynomial times a polynomial is the sum of the derivatives of the polynomials times the other polynomial. // the derivative of a polynomial times a constant is the constant times the derivative of the polynomial. // the derivative of a constant times a polynomial is the constant times the derivative of the polynomial. // the derivative of a sum of polynomials is the sum of the derivatives of the polynomials. // the derivative of a product of polynomials is the sum of the derivatives of the polynomials times the other polynomial. // the derivative of a polynomial times a polynomial is the sum of the derivatives of the polynomials times the other polynomial. // the derivative of a polynomial times a constant is the constant times the derivative of the polynomial. // the derivative of a constant times a polynomial is the constant times the derivative of the polynomial. // the derivative of a sum of polynomials is the sum of the derivatives of the polynomials. // the derivative of a product of polynomials is the sum of the derivatives of the polynomials times the other polynomial. // the derivative of a polynomial times a polynomial is the sum of the derivatives of the polynomials times the other polynomial. // the derivative of a polynomial times a constant is the constant times the derivative of the polynomial. // the derivative of a constant times a polynomial is the constant times the derivative of the polynomial. // the derivative of a sum of polynomials is the sum of the derivatives of the polynomials. // the derivative of a product of polynomials is the sum of the derivatives of the polynomials times the other polynomial. // the derivative of a polynomial times a polynomial is the sum of the derivatives of the polynomials times the other polynomial. // the derivative of a polynomial times a constant is the constant times the derivative of the polynomial. // the derivative of a constant times a polynomial is the constant times the derivative of the polynomial. // the derivative of a sum of polynomials is the sum of the derivatives of the polynomials. // the derivative of a product of polynomials is the sum of the derivatives of the polynomials times the other polynomial. // the derivative of a polynomial times a polynomial is the sum of the derivatives of the polynomials"], ["//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){var a=0,b=0,c=1,d=0,e=0,f=1;while(n>2){d=a+b+c;a=b;c=d;b=e+f=f=d;e=c}return f} // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1 line, 56 chars. // 1"], ["//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){return s.length- s.replace(/[^aeiouy]/gi,'').length;}  //This function works by first counting the total number of characters in the string, then subtracting the number of characters that are not vowels. The regular expression /[^aeiouy]/gi matches any character that is not a vowel, and the replace function replaces these characters with an empty string, effectively removing them. The length of the resulting string is then the number of characters that are not vowels, so we subtract this from the total number of characters to get the number of vowels. The 'i' flag makes the regular expression case-insensitive, so that it matches both uppercase and lowercase vowels. The 'g' flag makes the regular expression match all occurrences in the string, not just the first one.  //This function works by first counting the total number of characters in the string, then subtracting the number of characters that are not vowels. The regular expression /[^aeiouy]/gi matches any character that is not a vowel, and the replace function replaces these characters with an empty string, effectively removing them. The length of the resulting string is then the number of characters that are not vowels, so we subtract this from the total number of characters to get the number of vowels. The 'i' flag makes the regular expression case-insensitive, so that it matches both uppercase and lowercase vowels. The 'g' flag makes the regular expression match all occurrences in the string, not just the first one.  //This function works by first counting the total number of characters in the string, then subtracting the number of characters that are not vowels. The regular expression /[^aeiouy]/gi matches any character that is not a vowel, and the replace function replaces these characters with an empty string, effectively removing them. The length of the resulting string is then the number of characters that are not vowels, so we subtract this from the total number of characters to get the number of vowels. The 'i' flag makes the regular expression case-insensitive, so that it matches both uppercase and lowercase vowels. The 'g' flag makes the regular expression match all occurrences in the string, not just the first one.  //This function works by first counting the total number of characters in the string, then subtracting the number of characters that are not vowels. The regular expression /[^aeiouy]/gi matches any character that is not a vowel, and the replace function replaces these characters with an empty string, effectively removing them. The length of the resulting string is then the number of characters that are not vowels, so we subtract this from the total number of characters to get the number of vowels. The 'i' flag makes the regular expression case-insensitive, so that it matches both uppercase and lowercase vowels. The 'g' flag makes the regular expression match all occurrences in the string, not just the first one.  //This function works by first counting the total number of characters in the string, then subtracting the number of characters that are not vowels. The regular expression /[^aeiouy]/gi matches any character that is not a vowel, and the replace function replaces these characters with an empty string, effectively removing them. The length of the resulting string is then the number of characters that are not vowels, so we subtract this from the total number of characters to get the number of vowels. The 'i' flag makes the regular expression case-insensitive, so that it matches both uppercase and lowercase vowels. The 'g' flag makes the regular expression match all occurrences in the string, not just the first one.  //This function works by first counting the total number of characters in the string, then subtracting the number of characters that are not vowels. The regular expression /[^aeiouy]/gi matches any character that is not a vowel, and the replace function replaces these characters with an empty string, effectively removing them. The length of the resulting string is then the number of characters that are not vowels, so we subtract this from the total number of characters to get the number of vowels. The 'i' flag makes the regular expression case-insensitive, so that it matches both uppercase and lowercase vowels. The 'g' flag makes the regular expression match all occurrences in the string, not just the first one.  //This function works by first counting the total number of characters in the string, then subtracting the number of characters that are not vowels. The regular expression /[^aeiouy]/gi matches"], ["//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){ \n    let num = x.toString();\n    let shiftNum = shift % num.length;\n    let result = num.slice(-shiftNum) + num.slice(0, -shiftNum);\n    return result;\n}  // circular_shift(12, 2) returns \"21\" and circular_shift(12, 3) returns \"21\" as well.  The function should return \"21\" when shift is 1 and \"12\" when shift is 2.  The function is not working correctly.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and the first num.length - shiftNum digits of the number.  The function should return the last shiftNum digits of the number and"], ["//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){return s.toUpperCase().split('').reduce((a,b)=>a+b.charCodeAt(0),0)}; // 1 line solution"], ["//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){return n - (s.match(/\\d+/g).map(Number).reduce((a,b)=>a+b));}  //This function takes a string and an integer as arguments, "], ["//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){ \n    let min = Infinity;\n    let index = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < min) {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (min === Infinity) {\n        return [];\n    } else {\n        return [min, index];\n    }\n}  // Time complexity: O(n), where n is the number of nodes in the tree. Space complexity: O(1) as we only use a constant amount of space.  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // 1 <= nodes.length <= 10000  // 0 <= node.value  // "], ["//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){  \n    let sortedLst = lst.sort((a, b) => a - b);\n    let max = sortedLst[sortedLst.length - 1];\n    let i = max;\n    while(i > 0){\n        if(lst.filter(x => x === i).length >= i){\n            return i;\n        }\n        i--;\n    }\n    return -1;\n}  // O(n log n) time, O(n) space. The sort function is the most expensive operation here. The space complexity is O(n) because the filter function creates a new array. The time complexity is O(n) because the filter function has to iterate over the entire array. The space complexity is O(n) because the filter function creates a new array. The time complexity is O(n) because the filter function has to iterate over the entire array. The space complexity is O(n) because the filter function creates a new array. The time complexity is O(n) because the filter function has to iterate over the entire array. The space complexity is O(n) because the filter function creates a new array. The time complexity is O(n) because the filter function has to iterate over the entire array. The space complexity is O(n) because the filter function creates a new array. The time complexity is O(n) because the filter function has to iterate over the entire array. The space complexity is O(n) because the filter function creates a new array. The time complexity is O(n) because the filter function has to iterate over the entire array. The space complexity is O(n) because the filter function creates a new array. The time complexity is O(n) because the filter function has to iterate over the entire array. The space complexity is O(n) because the filter function creates a new array. The time complexity is O(n) because the filter function has to iterate over the entire array. The space complexity is O(n) because the filter function creates a new array. The time complexity is O(n) because the filter function has to iterate over the entire array. The space complexity is O(n) because the filter function creates a new array. The time complexity is O(n) because the filter function has to iterate over the entire array. The space complexity is O(n) because the filter function creates a new array. The time complexity is O(n) because the filter function has to iterate over the entire array. The space complexity is O(n) because the filter function creates a new array. The time complexity is O(n) because the filter function has to iterate over the entire array. The space complexity is O(n) because the filter function creates a new array. The time complexity is O(n) because the filter function has to iterate over the entire array. The space complexity is O(n) because the filter function creates a new array. The time complexity is O(n) because the filter function has to iterate over the entire array. The space complexity is O(n) because the filter function creates a new array. The time complexity is O(n) because the filter function has to iterate over the entire array. The space complexity is O(n) because the filter function creates a new array. The time complexity is O(n) because the filter function has to iterate over the entire array. The space complexity is O(n) because the filter function creates a new array. The time complexity is O(n) because the filter function has to iterate over the entire array. The space complexity is O(n) because the filter function creates a new array. The time complexity is O(n) because the filter function has to iterate over the entire array. The space complexity is O(n) because the filter function creates a new array. The time complexity is O(n) because the filter function has to iterate over the entire array. The space complexity is O(n) because the filter function creates a new array. The time complexity is O(n) because the filter function has to iterate over the entire array. The space complexity is O(n) because the filter function creates a new array. The time complexity is O(n) because the filter function has to iterate over the entire array. The space complexity is O(n) because the filter function creates a new array. The time complexity is O(n) because the filter function"], ["//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){ // lst is the list of integers\n    if(lst.length === 0){ // if the list is empty, return it as is\n        return lst;\n    }\n    let sorted_lst = lst.slice().sort((a, b) => a - b); // create a copy of the list and sort it\n    let result = []; // initialize the result list\n    let min = sorted_lst.shift(); // get the minimum value from the sorted list\n    result.push(min); // add the minimum value to the result list\n    while(sorted_lst.length > 0){ // while there are still values in the sorted list\n        let max = sorted_lst.pop(); // get the maximum value from the sorted list\n        result.push(max); // add the maximum value to the result list\n        if(sorted_lst.length > 0){ // if there are still values in the sorted list\n            min = sorted_lst.shift(); // get the minimum value from the sorted list\n            result.push(min); // add the minimum value to the result list\n        }\n    }\n    return result; // return the result list\n} // end of function strange_sort_list\n"], ["//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){ \n    if (a + b > c && a + c > b && b + c > a) {\n        let s = (a + b + c) / 2;\n        let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    } else {\n        return -1;\n    }\n}  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle_area()  // end of function triangle"], ["//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){return q.join('') === q.reverse().join('') && q.reduce((a,b) => a + b, 0) <= w;}  // q is a list of numbers, w is a number.  q will fly if it's a palindrome and the sum of its elements is less than or equal to w.  q is a palindrome if it's equal to its reverse.  The sum of the elements of q is the result of the function reduce, which adds up all the elements of q.  The function will return true if q is a palindrome and the sum of its elements is less than or equal to w, and false otherwise.  The function will return false if q is not a palindrome, even if the sum of its elements is less than or equal to w.  The function will return false if the sum of the elements of q is greater than w, even if q is a palindrome.  The function will return true if q is a palindrome and the sum of its elements is less than or equal to w, and false otherwise.  The function will return true if q is a palindrome and the sum of its elements is less than or equal to w, and false otherwise.  The function will return true if q is a palindrome and the sum of its elements is less than or equal to w, and false otherwise.  The function will return true if q is a palindrome and the sum of its elements is less than or equal to w, and false otherwise.  The function will return true if q is a palindrome and the sum of its elements is less than or equal to w, and false otherwise.  The function will return true if q is a palindrome and the sum of its elements is less than or equal to w, and false otherwise.  The function will return true if q is a palindrome and the sum of its elements is less than or equal to w, and false otherwise.  The function will return true if q is a palindrome and the sum of its elements is less than or equal to w, and false otherwise.  The function will return true if q is a palindrome and the sum of its elements is less than or equal to w, and false otherwise.  The function will return true if q is a palindrome and the sum of its elements is less than or equal to w, and false otherwise.  The function will return true if q is a palindrome and the sum of its elements is less than or equal to w, and false otherwise.  The function will return true if q is a palindrome and the sum of its elements is less than or equal to w, and false otherwise.  The function will return true if q is a palindrome and the sum of its elements is less than or equal to w, and false otherwise.  The function will return true if q is a palindrome and the sum of its elements is less than or equal to w, and false otherwise.  The function will return true if q is a palindrome and the sum of its elements is less than or equal to w, and false otherwise.  The function will return true if q is a palindrome and the sum of its elements is less than or equal to w, and false otherwise.  The function will return true if q is a palindrome and the sum of its elements is less than or equal to w, and false otherwise.  The function will return true if q is a palindrome and the sum of its elements is less than or equal to w, and false otherwise.  The function will return true if q is a palindrome and the sum of its elements is less than or equal to w, and false otherwise.  The function will return true if q is a palindrome and the sum of its elements is less than or equal to w, and false otherwise.  The function will return true if q is a palindrome and the sum of its elements is less than or equal to w, and false otherwise.  The function will return"], ["//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){ // O(n) time, O(n) space\n    let n = arr.length;\n    let left = 0, right = n - 1;\n    let count = 0;\n    while(left < right){\n        if(arr[left] === arr[right]){\n            left++;\n            right--;\n        } else {\n            count++;\n            let temp = arr[left];\n            arr[left] = arr[right];\n            arr[right] = temp;\n            left++;\n            right--;\n        }\n    }\n    return count;\n} // O(n) time, O(1) space\n"], ["//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){ \n    let sum1 = lst1.reduce((acc, cur) => acc + cur.length, 0);\n    let sum2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n    if(sum1 < sum2) return lst1;\n    else if(sum1 > sum2) return lst2;\n    else return lst1;\n}  //This function works by first calculating the total number of characters in each array. "], ["//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){ \n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let count = 0;\n    for (let i = 0; i < primes.length; i++) {\n        if (a % primes[i] == 0) {\n            count++;\n            a = a / primes[i];\n        }\n        if (count == 3) {\n            return true;\n        }\n    }\n    return false;\n}  // is_multiply_prime function ends here. \n"], ["//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){return Math.pow(n, Math.log(x) / Math.log(n)) === x}  //Math.log(x) / Math.log(n) is the exponent to which n must be raised to get x.  Math.pow(n, exponent) is n to the power of exponent.  So if x is a simple power of n, then Math.pow(n, Math.log(x) / Math.log(n)) will be x.  If x is not a simple power of n, then Math.pow(n, Math.log(x) / Math.log(n)) will not be x.  So we can return true if Math.pow(n, Math.log(x) / Math.log(n)) is x, and false otherwise.  This works because Math.log(x) / Math.log(n) is the exponent to which n must be raised to get x, and Math.pow(n, exponent) is n to the power of exponent.  So if x is a simple power of n, then Math.pow(n, Math.log(x) / Math.log(n)) will be x.  If x is not a simple power of n, then Math.pow(n, Math.log(x) / Math.log(n)) will not be x.  So we can return true if Math.pow(n, Math.log(x) / Math.log(n)) is x, and false otherwise.  This works because Math.log(x) / Math.log(n) is the exponent to which n must be raised to get x, and Math.pow(n, exponent) is n to the power of exponent.  So if x is a simple power of n, then Math.pow(n, Math.log(x) / Math.log(n)) will be x.  If x is not a simple power of n, then Math.pow(n, Math.log(x) / Math.log(n)) will not be x.  So we can return true if Math.pow(n, Math.log(x) / Math.log(n)) is x, and false otherwise.  This works because Math.log(x) / Math.log(n) is the exponent to which n must be raised to get x, and Math.pow(n, exponent) is n to the power of exponent.  So if x is a simple power of n, then Math.pow(n, Math.log(x) / Math.log(n)) will be x.  If x is not a simple power of n, then Math.pow(n, Math.log(x) / Math.log(n)) will not be x.  So we can return true if Math.pow(n, Math.log(x) / Math.log(n)) is x, and false otherwise.  This works because Math.log(x) / Math.log(n) is the exponent to which n must be raised to get x, and Math.pow(n, exponent) is n to the power of exponent.  So if x is a simple power of n, then Math.pow(n, Math.log(x) / Math.log(n)) will be x.  If x is not a simple power of n, then Math.pow(n, Math.log(x) / Math.log(n)) will not be x.  So we can return true if Math.pow(n, Math.log(x) / Math.log(n)) is x, and false otherwise.  This works because Math.log(x) / Math.log(n) is the exponent to which n must be raised to get x, and Math.pow(n, exponent) is n to the power of exponent.  So if x is a simple power of n, then Math.pow(n, Math.log(x) / Math.log(n)) will be x.  If x is not a simple power of n, then Math.pow(n, Math.log(x) / Math.log(n)) will not be x.  So we can return true if Math.pow(n, Math.log(x) / Math.log(n)) is x, and false otherwise.  This works because Math.log(x) / Math.log(n) is the exponent to which n must be raised to get x, and Math.pow(n, exponent) is n to the power of exponent.  So if x is a simple power of n, then Math.pow(n, Math.log(x) / Math.log(n)) will be x.  If x is not a simple power of n, then Math.pow(n, Math.log(x) / Math.log(n)) will not be x.  So we can return true if"], ["//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){return Math.cbrt(a)%1===0;}  //Math.cbrt() returns the cube root of a number. The % operator returns the remainder of a division operation. If the remainder is 0, then the number is a perfect cube. 0 is a perfect cube. 1 is a perfect cube. -1 is a perfect cube. 64 is a perfect cube. 2 is not a perfect cube. 180 is not a perfect cube. 0 is a perfect cube. 1 is a perfect cube. -1 is a perfect cube. 64 is a perfect cube. 2 is not a perfect cube. 180 is not a perfect cube. 0 is a perfect cube. 1 is a perfect cube. -1 is a perfect cube. 64 is a perfect cube. 2 is not a perfect cube. 180 is not a perfect cube. 0 is a perfect cube. 1 is a perfect cube. -1 is a perfect cube. 64 is a perfect cube. 2 is not a perfect cube. 180 is not a perfect cube. 0 is a perfect cube. 1 is a perfect cube. -1 is a perfect cube. 64 is a perfect cube. 2 is not a perfect cube. 180 is not a perfect cube. 0 is a perfect cube. 1 is a perfect cube. -1 is a perfect cube. 64 is a perfect cube. 2 is not a perfect cube. 180 is not a perfect cube. 0 is a perfect cube. 1 is a perfect cube. -1 is a perfect cube. 64 is a perfect cube. 2 is not a perfect cube. 180 is not a perfect cube. 0 is a perfect cube. 1 is a perfect cube. -1 is a perfect cube. 64 is a perfect cube. 2 is not a perfect cube. 180 is not a perfect cube. 0 is a perfect cube. 1 is a perfect cube. -1 is a perfect cube. 64 is a perfect cube. 2 is not a perfect cube. 180 is not a perfect cube. 0 is a perfect cube. 1 is a perfect cube. -1 is a perfect cube. 64 is a perfect cube. 2 is not a perfect cube. 180 is not a perfect cube. 0 is a perfect cube. 1 is a perfect cube. -1 is a perfect cube. 64 is a perfect cube. 2 is not a perfect cube. 180 is not a perfect cube. 0 is a perfect cube. 1 is a perfect cube. -1 is a perfect cube. 64 is a perfect cube. 2 is not a perfect cube. 180 is not a perfect cube. 0 is a perfect cube. 1 is a perfect cube. -1 is a perfect cube. 64 is a perfect cube. 2 is not a perfect cube. 180 is not a perfect cube. 0 is a perfect cube. 1 is a perfect cube. -1 is a perfect cube. 64 is a perfect cube. 2 is not a perfect cube. 180 is not a perfect cube. 0 is a perfect cube. 1 is a perfect cube. -1 is a perfect cube. 64 is a perfect cube. 2 is not a perfect cube. 180 is not a perfect cube. 0 is a perfect cube. 1 is a perfect cube. -1 is a perfect cube. 64 is a perfect cube. 2 is not a perfect cube. 180 is not a perfect cube. 0 is a perfect cube. 1 is a perfect cube. -1 is a perfect cube. 64 is a perfect cube. 2 is not a perfect cube. 180 is not a perfect cube. 0 is a perfect cube. 1 is a perfect cube. -1 is a perfect cube. 64 is a perfect cube. 2 is not a perfect cube. 180 is not a perfect cube. 0 is a perfect cube. 1 is a perfect cube. -1 is a perfect cube. 64 is a perfect cube. 2 is not a perfect cube. 180 is not a perfect cube. 0 is a perfect cube. 1 is a perfect cube. -1 is a perfect cube. 64 is a perfect cube. "], ["//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){ \n    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        let hex = num[i];\n        if (hex === '2' || hex === '3' || hex === '5' || hex === '7' || hex === 'B' || hex === 'D') {\n            count++;\n        }\n    }\n    return count;\n}  // 1 line solution: return num.split('').filter(x => '237BD'.includes(x)).length;  // 1 line solution: return num.split('').filter(x => ['2', '3', '5', '7', 'B', 'D'].includes(x)).length;  // 1 line solution: return num.split('').filter(x => ['2', '3', '5', '7', 'B', 'D'].includes(x)).length;  // 1 line solution: return num.split('').filter(x => ['2', '3', '5', '7', 'B', 'D'].includes(x)).length;  // 1 line solution: return num.split('').filter(x => ['2', '3', '5', '7', 'B', 'D'].includes(x)).length;  // 1 line solution: return num.split('').filter(x => ['2', '3', '5', '7', 'B', 'D'].includes(x)).length;  // 1 line solution: return num.split('').filter(x => ['2', '3', '5', '7', 'B', 'D'].includes(x)).length;  // 1 line solution: return num.split('').filter(x => ['2', '3', '5', '7', 'B', 'D'].includes(x)).length;  // 1 line solution: return num.split('').filter(x => ['2', '3', '5', '7', 'B', 'D'].includes(x)).length;  // 1 line solution: return num.split('').filter(x => ['2', '3', '5', '7', 'B', 'D'].includes(x)).length;  // 1 line solution: return num.split('').filter(x => ['2', '3', '5', '7', 'B', 'D'].includes(x)).length;  // 1 line solution: return num.split('').filter(x => ['2', '3', '5', '7', 'B', 'D'].includes(x)).length;  // 1 line solution: return num.split('').filter(x => ['2', '3', '5', '7', 'B', 'D'].includes(x)).length;  // 1 line solution: return num.split('').filter(x => ['2', '3', '5', '7', 'B', 'D'].includes(x)).length;  // 1 line solution: return num.split('').filter(x => ['2', '3', '5', '7', 'B', 'D'].includes(x)).length;  // 1 line solution: return num.split('').filter(x => ['2', '3', '5', '7', 'B', 'D'].includes(x)).length;  // 1 line solution: return num.split('').filter(x => ['2', '3', '5', '7', 'B', 'D'].includes(x)).length;  // 1 line solution: return num.split('').filter(x => ['2', '3', '5', '7', 'B', 'D'].includes(x)).length;  // 1 line solution: return num.split('').filter(x"], ["//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){return \"db\"+(decimal.toString(2))+\"db\";}\n"], ["//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){return s.length>=3&&new Set(s.slice(0,3)).size===3;} // 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters are distinct. 3 consecutive letters"], ["//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){ \n    let letter_grades = [];\n    for (let i = 0; i < grades.length; i++){\n        if (grades[i] >= 4.0){\n            letter_grades.push(\"A+\");\n        } else if (grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        } else if (grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        } else if (grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        } else if (grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        } else if (grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        } else if (grades[i] > 2.0){\n            letter_grades.push(\"C+\");\n        } else if (grades[i] > 1.7){\n            letter_grades.push(\"C\");\n        } else if (grades[i] > 1.3){\n            letter_grades.push(\"C-\");\n        } else if (grades[i] > 1.0){\n            letter_grades.push(\"D+\");\n        } else if (grades[i] > 0.7){\n            letter_grades.push(\"D\");\n        } else if (grades[i] > 0.0){\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n} \n"], ["//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){return isPrime(string.length)}\n"], ["//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){ \n    let count = 0;\n    for (let i = 1; i < Math.pow(10, n); i++){\n        let str = i.toString();\n        if (str[0] === '1' || str[str.length - 1] === '1'){\n            count++;\n        }\n    }\n    return count;\n} \n"], ["//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){return N.toString(2)}; // return N in binary form as a string. 2 is the base of binary. 10 is the base of decimal. 16 is the base of hexadecimal. 8 is the base of octal. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary. 2 is the base of binary"], ["//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){  \n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}  // Output: 2\n"], ["//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){return s.split('').sort().join('');}  // split the string into an array of characters, sort the array, and then join the array back into a string.  // This will sort the characters in the string in ascending order.  // The sort() function sorts the elements of an array in place and returns the array.  // The join() function concatenates all the elements of an array into a string.  // The split() function splits a string into an array of substrings.  // The sort() function sorts the elements of an array in place and returns the array.  // The join() function concatenates all the elements of an array into a string.  // The split() function splits a string into an array of substrings.  // The sort() function sorts the elements of an array in place and returns the array.  // The join() function concatenates all the elements of an array into a string.  // The split() function splits a string into an array of substrings.  // The sort() function sorts the elements of an array in place and returns the array.  // The join() function concatenates all the elements of an array into a string.  // The split() function splits a string into an array of substrings.  // The sort() function sorts the elements of an array in place and returns the array.  // The join() function concatenates all the elements of an array into a string.  // The split() function splits a string into an array of substrings.  // The sort() function sorts the elements of an array in place and returns the array.  // The join() function concatenates all the elements of an array into a string.  // The split() function splits a string into an array of substrings.  // The sort() function sorts the elements of an array in place and returns the array.  // The join() function concatenates all the elements of an array into a string.  // The split() function splits a string into an array of substrings.  // The sort() function sorts the elements of an array in place and returns the array.  // The join() function concatenates all the elements of an array into a string.  // The split() function splits a string into an array of substrings.  // The sort() function sorts the elements of an array in place and returns the array.  // The join() function concatenates all the elements of an array into a string.  // The split() function splits a string into an array of substrings.  // The sort() function sorts the elements of an array in place and returns the array.  // The join() function concatenates all the elements of an array into a string.  // The split() function splits a string into an array of substrings.  // The sort() function sorts the elements of an array in place and returns the array.  // The join() function concatenates all the elements of an array into a string.  // The split() function splits a string into an array of substrings.  // The sort() function sorts the elements of an array in place and returns the array.  // The join() function concatenates all the elements of an array into a string.  // The split() function splits a string into an array of substrings.  // The sort() function sorts the elements of an array in place and returns the array.  // The join() function concatenates all the elements of an array into a string.  // The split() function splits a string into an array of substrings.  // The sort() function sorts the elements of an array in place and returns the array.  // The join() function concatenates all the elements of an array into a string.  // The split() function splits a string into an array of substrings.  // The sort() function sorts the elements of an array in place and returns the array.  // The join() function concatenates all the elements of an array into a string.  // The split() function splits a string into an array of substrings.  // The sort() function sorts the elements of an array in place and returns the array.  // The join() function concatenates all the elements of an array into a string.  // The split() function splits a string into an array of substrings.  // The"], ["//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){return lst.map((row, i) => row.filter((item, j) => item == x).map(j => [i, j])).flat().sort((a, b) => a[0] - b[0] || b[1] - a[1]);} // return lst.map((row, i) => row.filter((item, j) => item == x).map(j => [i, j])).flat().sort((a, b) => a[0] - b[0] || b[1] - a[1]); // return lst.map((row, i) => row.filter((item, j) => item == x).map(j => [i, j])).flat().sort((a, b) => a[0] - b[0] || b[1] - a[1]); // return lst.map((row, i) => row.filter((item, j) => item == x).map(j => [i, j])).flat().sort((a, b) => a[0] - b[0] || b[1] - a[1]); // return lst.map((row, i) => row.filter((item, j) => item == x).map(j => [i, j])).flat().sort((a, b) => a[0] - b[0] || b[1] - a[1]); // return lst.map((row, i) => row.filter((item, j) => item == x).map(j => [i, j])).flat().sort((a, b) => a[0] - b[0] || b[1] - a[1]); // return lst.map((row, i) => row.filter((item, j) => item == x).map(j => [i, j])).flat().sort((a, b) => a[0] - b[0] || b[1] - a[1]); // return lst.map((row, i) => row.filter((item, j) => item == x).map(j => [i, j])).flat().sort((a, b) => a[0] - b[0] || b[1] - a[1]); // return lst.map((row, i) => row.filter((item, j) => item == x).map(j => [i, j])).flat().sort((a, b) => a[0] - b[0] || b[1] - a[1]); // return lst.map((row, i) => row.filter((item, j) => item == x).map(j => [i, j])).flat().sort((a, b) => a[0] - b[0] || b[1] - a[1]); // return lst.map((row, i) => row.filter((item, j) => item == x).map(j => [i, j])).flat().sort((a, b) => a[0] - b[0] || b[1] - a[1]); // return lst.map((row, i) => row.filter((item, j) => item == x).map(j => [i, j])).flat().sort((a, b) => a[0] - b[0] || b[1] - a[1]); // return lst.map((row, i) => row.filter((item, j) => item == x).map(j => [i, j])).flat().sort((a, b) => a[0] - b[0] || b[1] - a[1]); // return lst.map((row, i)"], ["//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){return array.slice().sort((a,b)=>(a+b)-(b+a));} // sort in ascending order if sum is odd, or descending order if sum is even. // return a copy of the array, so the original array is not changed. // use slice() to create a copy of the array. // use sort() to sort the array. // use a lambda function as the compare function for sort(). // the lambda function returns (a+b)-(b+a), which is 0 if a+b=b+a, 1 if a+b>b+a, and -1 if a+b<b+a. // if the sum of a and b is odd, then a+b>b+a, so the lambda function returns 1, which means a is sorted before b. // if the sum of a and b is even, then a+b=b+a, so the lambda function returns 0, which means a and b are sorted in the same order. // if the sum of a and b is even, then a+b<b+a, so the lambda function returns -1, which means a is sorted after b. // the sort() function sorts the array in ascending order if the compare function returns a negative number, or in descending order if the compare function returns a positive number. // the sort() function returns the sorted array. // the return statement returns the sorted array. // the return statement is necessary to return the result of the function. // the function is defined as sort_array(array), which means it takes an array as an argument and returns a value. // the function is called with the argument array, which is the array that is passed to the function. // the function returns the sorted array, which is the result of the function. // the result of the function is printed to the console. // the console is a built-in object in JavaScript that is used to print output to the screen. // the console.log() function is used to print the result of the function to the console. // the console.log() function takes a value as an argument and prints it to the console. // the console.log() function is called with the argument result, which is the result of the function. // the result of the function is printed to the console. // the console.log() function returns undefined, which means that the result of the function is not returned. // the result of the function is not returned because the console.log() function does not return a value. // the result of the function is not returned because the console.log() function is used to print output to the screen, not to return a value. // the result of the function is not returned because the console.log() function is called with the argument result, which is the result of the function, but the console.log() function does not return the result of the function. // the result of the function is not returned because the console.log() function is called with the argument result, which is the result of the function, but the console.log() function returns undefined. // the result of the function is not returned because the console.log() function is called with the argument result, which is the result of the function, but the console.log() function does not return the result of the function. // the result of the function is not returned because the console.log() function is called with the argument result, which is the result of the function, but the console.log() function returns undefined. // the result of the function is not returned because the console.log() function is called with the argument result, which is the result of the function, but the console.log() function does not return the result of the function. // the result of the function is not returned because the console.log() function is called with the argument result, which is the result of the function, but the console.log() function returns undefined. // the result of the function is not returned because the console.log() function is called with the argument result, which is the result of the function, but the console.log() function does not return the result of the function. // the result of the"], ["//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){return s.split('').map(c=>String.fromCharCode(c.charCodeAt(0)+2*2)).join('');} "], ["//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){ \n    if (lst.length < 2) return undefined; \n    lst.sort((a, b) => a - b); \n    for (let i = 1; i < lst.length; i++) { \n        if (lst[i] !== lst[i - 1]) { \n            return lst[i]; \n        } \n    } \n    return undefined; \n}  // function next_smallest(lst) { "], ["//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){return S.split(/[.!?]/).filter(w=>w.trim().startsWith(\"I\")).length} // 1 line solution"], ["//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){return (x + y === z || x + z === y || y + z === x) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);}  // or return (x + y === z || x + z === y || y + z === x) && (x % 1 === 0 && y % 1 === 0 && z % 1 === 0);  // or return (x + y === z || x + z === y || y + z === x) && (x === Math.floor(x) && y === Math.floor(y) && z === Math.floor(z));  // or return (x + y === z || x + z === y || y + z === x) && (x === parseInt(x) && y === parseInt(y) && z === parseInt(z));  // or return (x + y === z || x + z === y || y + z === x) && (x === Math.trunc(x) && y === Math.trunc(y) && z === Math.trunc(z));  // or return (x + y === z || x + z === y || y + z === x) && (x === Math.round(x) && y === Math.round(y) && z === Math.round(z));  // or return (x + y === z || x + z === y || y + z === x) && (x === Math.ceil(x) && y === Math.ceil(y) && z === Math.ceil(z));  // or return (x + y === z || x + z === y || y + z === x) && (x === Math.floor(x) && y === Math.floor(y) && z === Math.floor(z));  // or return (x + y === z || x + z === y || y + z === x) && (x === Math.trunc(x) && y === Math.trunc(y) && z === Math.trunc(z));  // or return (x + y === z || x + z === y || y + z === x) && (x === Math.round(x) && y === Math.round(y) && z === Math.round(z));  // or return (x + y === z || x + z === y || y + z === x) && (x === Math.ceil(x) && y === Math.ceil(y) && z === Math.ceil(z));  // or return (x + y === z || x + z === y || y + z === x) && (x === Math.floor(x) && y === Math.floor(y) && z === Math.floor(z));  // or return (x + y === z || x + z === y || y + z === x) && (x === Math.trunc(x) && y === Math.trunc(y) && z === Math.trunc(z));  // or return (x + y === z || x + z === y || y + z === x) && (x === Math.round(x) && y === Math.round(y) && z === Math.round(z));  // or return (x + y === z || x + z === y || y + z === x) && (x === Math.ceil(x) && y === Math.ceil(y) && z === Math.ceil(z));  // or return (x + y === z || x + z === y || y + z === x) && (x === Math.floor(x) && y === Math.floor(y) && z === Math.floor(z));  // or return (x + y === z || x + z === y || y + z === x) && (x === Math.trunc(x) && y === Math.trunc(y) && z === Math.trunc(z));  // or return (x + y === z || x + z === y || y + z === x) && (x === Math.round(x) && y === Math.round(y) && z === Math.round(z));  // or return (x + y === z || x + z === y || y + z === x) && (x === Math.ceil(x) && y === Math.ceil(y) && z === Math.ceil(z));  // or return (x + y === z || x + z === y || y + z === x) && (x === Math.floor(x) && y === Math.floor(y) && z"], ["//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){ \n    let vowels = \"aeiouAEIOU\";\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        if (vowels.includes(message[i])) {\n            let index = vowels.indexOf(message[i]);\n            result += String.fromCharCode(vowels.charCodeAt(index) + 2);\n        } else {\n            result += message[i].toUpperCase() === message[i] ? message[i].toLowerCase() : message[i].toUpperCase();\n        }\n    }\n    return result;\n}  // 2 places ahead of 'a' is 'c', 'b' is 'd', 'c' is 'e', 'd' is 'f', 'e' is 'g', 'f' is 'h', 'g' is 'i', 'h' is 'j', 'i' is 'k', 'j' is 'l', 'k' is 'm', 'l' is 'n', 'm' is 'o', 'n' is 'p', 'o' is 'q', 'p' is 'r', 'q' is 's', 'r' is 't', 's' is 'u', 't' is 'v', 'u' is 'w', 'v' is 'x', 'w' is 'y', 'x' is 'z', 'y' is 'a', 'z' is 'b'.  // 2 places ahead of 'A' is 'C', 'B' is 'D', 'C' is 'E', 'D' is 'F', 'E' is 'G', 'F' is 'H', 'G' is 'I', 'H' is 'J', 'I' is 'K', 'J' is 'L', 'K' is 'M', 'L' is 'N', 'M' is 'O', 'N' is 'P', 'O' is 'Q', 'P' is 'R', 'Q' is 'S', 'R' is 'T', 'S' is 'U', 'T' is 'V', 'U' is 'W', 'V' is 'X', 'W' is 'Y', 'X' is 'Z', 'Y' is 'A', 'Z' is 'B'.  // 2 places ahead of 'a' is 'c', 'b' is 'd', 'c' is 'e', 'd' is 'f', 'e' is 'g', 'f' is 'h', 'g' is 'i', 'h' is 'j', 'i' is 'k', 'j' is 'l', 'k' is 'm', 'l' is 'n', 'm' is 'o', 'n' is 'p', 'o' is 'q', 'p' is 'r', 'q' is 's', 'r' is 't', 's' is 'u', 't' is 'v', 'u' is 'w', 'v' is 'x', 'w' is 'y', 'x' is 'z', 'y' is 'a', 'z' is 'b'.  // 2 places ahead of 'A' is 'C', 'B' is 'D', 'C' is 'E', 'D' is 'F', 'E' is 'G', 'F' is 'H', 'G' is 'I', 'H' is 'J', 'I' is 'K', 'J' is 'L', 'K' is 'M', 'L' is 'N', 'M' is 'O', 'N' is 'P', 'O' is 'Q', 'P' is 'R', 'Q' is 'S', 'R' is 'T', 'S' is 'U', 'T' is 'V', 'U' is 'W', 'V' is 'X', 'W' is 'Y', 'X' is 'Z', 'Y' is 'A', 'Z' is 'B'.  // 2 places ahead of 'a' is 'c', 'b' is 'd', 'c' is 'e', 'd' is 'f', 'e' is 'g', 'f' is 'h', 'g' is 'i', 'h' is 'j"], ["//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){ //I know, I know, it's a terrible name.\n    function isPrime(n) {\n        if (n < 2) return false;\n        for (var i = 2; i * i <= n; i++) {\n            if (n % i === 0) return false;\n        }\n        return true;\n    }\n    function sumDigits(n) {\n        return n.toString().split('').map(Number).reduce((a, b) => a + b, 0);\n    }\n    var maxPrime = Math.max(...lst.filter(isPrime));\n    return sumDigits(maxPrime);\n} //I'm sorry, I'll try to come up with a better name. Maybe something like \"largestPrimeDigitSum\"? //I'll leave it as is, though. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a weird function. //I'll just leave it as is. It's a bit of a"], ["//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){ \n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n    let allLower = true;\n    let allUpper = true;\n    for (let key in dict) {\n        if (typeof key !== 'string') {\n            return false;\n        }\n        if (key.toLowerCase() !== key) {\n            allLower = false;\n        }\n        if (key.toUpperCase() !== key) {\n            allUpper = false;\n        }\n    }\n    return allLower || allUpper;\n}  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the function already returns a value.  // no need for a return statement as the"], ["//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){ // n is the number up to which we want to count prime numbers\n    let primes = []; // array to store prime numbers\n    for (let i = 2; i < n; i++) { // loop through all numbers from 2 to n-1\n        let isPrime = true; // assume the number is prime\n        for (let j = 2; j <= Math.sqrt(i); j++) { // check if the number is divisible by any number up to its square root\n            if (i % j === 0) { // if the number is divisible, it's not prime\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) { // if the number is prime, add it to the array\n            primes.push(i);\n        }\n    }\n    return primes;\n} // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up_to(n) // end of function count_up"], ["//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){return (a % 10) * (b % 10)}; // This function returns the product of the unit digits of two integers. It does this by taking the remainder of the division of the two integers by 10, which gives the unit digit. It then multiplies these two unit digits together and returns the result. This works because the unit digit of a number is the remainder when the number is divided by 10. For example, 148 % 10 = 8, and 412 % 10 = 2, so the unit digits are 8 and 2. The product of these two numbers is 16, which is the result of the function.  // This function returns the product of the unit digits of two integers. It does this by taking the remainder of the division of the two integers by 10, which gives the unit digit. It then multiplies these two unit digits together and returns the result. This works because the unit digit of a number is the remainder when the number is divided by 10. For example, 148 % 10 = 8, and 412 % 10 = 2, so the unit digits are 8 and 2. The product of these two numbers is 16, which is the result of the function.  // This function returns the product of the unit digits of two integers. It does this by taking the remainder of the division of the two integers by 10, which gives the unit digit. It then multiplies these two unit digits together and returns the result. This works because the unit digit of a number is the remainder when the number is divided by 10. For example, 148 % 10 = 8, and 412 % 10 = 2, so the unit digits are 8 and 2. The product of these two numbers is 16, which is the result of the function.  // This function returns the product of the unit digits of two integers. It does this by taking the remainder of the division of the two integers by 10, which gives the unit digit. It then multiplies these two unit digits together and returns the result. This works because the unit digit of a number is the remainder when the number is divided by 10. For example, 148 % 10 = 8, and 412 % 10 = 2, so the unit digits are 8 and 2. The product of these two numbers is 16, which is the result of the function.  // This function returns the product of the unit digits of two integers. It does this by taking the remainder of the division of the two integers by 10, which gives the unit digit. It then multiplies these two unit digits together and returns the result. This works because the unit digit of a number is the remainder when the number is divided by 10. For example, 148 % 10 = 8, and 412 % 10 = 2, so the unit digits are 8 and 2. The product of these two numbers is 16, which is the result of the function.  // This function returns the product of the unit digits of two integers. It does this by taking the remainder of the division of the two integers by 10, which gives the unit digit. It then multiplies these two unit digits together and returns the result. This works because the unit digit of a number is the remainder when the number is divided by 10. For example, 148 % 10 = 8, and 412 % 10 = 2, so the unit digits are 8 and 2. The product of these two numbers is 16, which is the result of the function.  // This function returns the product of the unit digits of two integers. It does this by taking the remainder of the division of the two integers by 10, which gives the unit digit. It then multiplies these two unit digits together and returns the result. This works because the unit digit of a number is the remainder when the number is divided by 10. For example, 148 % 10 = 8, and 412 % 10 = 2, so the unit digits are 8 and 2. The product of these two numbers is 16, which is the result of the function.  // This function returns the product of the unit digits of two integers. It does this by taking the remainder of the division of the two integers by 10, which gives the unit digit. It then multiplies these"], ["//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){ \n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (i % 2 === 0 && \"AEIOU\".includes(s[i].toUpperCase())) {\n            count++;\n        }\n    }\n    return count;\n}  // 1 line solution"], ["//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){return Math.round(value)};  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero.  //Math.round() rounds to the nearest integer, and if the number is equidistant from two integers, it rounds away from zero. "], ["//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){return Array.from({length:n},(_,i)=>i%2?i+2:i+1)}; // [3, 5, 7] for n=3, [2, 4, 6] for n=4, [1, 3, 5] for n=1, [2, 4, 6] for n=2, [3, 5, 7] for n=3, [4, 6, 8] for n=4, [5, 7, 9] for n=5, [6, 8, 10] for n=6, [7, 9, 11] for n=7, [8, 10, 12] for n=8, [9, 11, 13] for n=9, [10, 12, 14] for n=10, [11, 13, 15] for n=11, [12, 14, 16] for n=12, [13, 15, 17] for n=13, [14, 16, 18] for n=14, [15, 17, 19] for n=15, [16, 18, 20] for n=16, [17, 19, 21] for n=17, [18, 20, 22] for n=18, [19, 21, 23] for n=19, [20, 22, 24] for n=20, [21, 23, 25] for n=21, [22, 24, 26] for n=22, [23, 25, 27] for n=23, [24, 26, 28] for n=24, [25, 27, 29] for n=25, [26, 28, 30] for n=26, [27, 29, 31] for n=27, [28, 30, 32] for n=28, [29, 31, 33] for n=29, [30, 32, 34] for n=30, [31, 33, 35] for n=31, [32, 34, 36] for n=32, [33, 35, 37] for n=33, [34, 36, 38] for n=34, [35, 37, 39] for n=35, [36, 38, 40] for n=36, [37, 39, 41] for n=37, [38, 40, 42] for n=38, [39, 41, 43] for n=39, [40, 42, 44] for n=40, [41, 43, 45] for n=41, [42, 44, 46] for n=42, [43, 45, 47] for n=43, [44, 46, 48] for n=44, [45, 47, 49] for n=45, [46, 48, 50] for n=46, [47, 49, 51] for n=47, [48, 50, 52] for n=48, [49, 51, 53] for n=49, [50, 52, 54] for n=50, [51, 53, 55] for n=51, [52, 54, 56] for n=52, [53, 55, 57] for n=53, [54, 56, 58] for n=54, [55, 57, 59] for n=55, [56, 58, 60] for n=56, [57, 59, 61] for n=57, [58, 60, 62] for n=58, [59, 61, 63] for n=59, [60, 62, 64] for n=60, [61, 63, 65] for"], ["//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){return s.split(/[\\s,]+/)}; //split by one or more spaces or commas"], ["//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){ \n    if (x > y) return -1;\n    if (x % 2 == 0) return x;\n    for (var i = x + 1; i <= y; i++) {\n        if (i % 2 == 0) return i;\n    }\n    return -1;\n}  //This function takes two positive numbers x and y and returns the"], ["//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){ \n    if (n > m) return -1;\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}  // 0b is the binary prefix. toString(2) converts a number to binary. 2 is the base. 10 is decimal, 16 is hexadecimal, etc. 2 is binary. 8 is octal. 16 is hexadecimal. 10 is decimal. 10 is the base of the decimal system. 2 is the base of the binary system. 8 is the base of the octal system. 16 is the base of the hexadecimal system. 2 is the base of the binary system. 8 is the base of the octal system. 16 is the base of the hexadecimal system. 10 is the base of the decimal system. 10 is the base of the decimal system. 8 is the base of the octal system. 16 is the base of the hexadecimal system. 2 is the base of the binary system. 10 is the base of the decimal system. 16 is the base of the hexadecimal system. 8 is the base of the octal system. 10 is the base of the decimal system. 2 is the base of the binary system. 16 is the base of the hexadecimal system. 8 is the base of the octal system. 10 is the base of the decimal system. 2 is the base of the binary system. 16 is the base of the hexadecimal system. 8 is the base of the octal system. 10 is the base of the decimal system. 2 is the base of the binary system. 16 is the base of the hexadecimal system. 8 is the base of the octal system. 10 is the base of the decimal system. 2 is the base of the binary system. 16 is the base of the hexadecimal system. 8 is the base of the octal system. 10 is the base of the decimal system. 2 is the base of the binary system. 16 is the base of the hexadecimal system. 8 is the base of the octal system. 10 is the base of the decimal system. 2 is the base of the binary system. 16 is the base of the hexadecimal system. 8 is the base of the octal system. 10 is the base of the decimal system. 2 is the base of the binary system. 16 is the base of the hexadecimal system. 8 is the base of the octal system. 10 is the base of the decimal system. 2 is the base of the binary system. 16 is the base of the hexadecimal system. 8 is the base of the octal system. 10 is the base of the decimal system. 2 is the base of the binary system. 16 is the base of the hexadecimal system. 8 is the base of the octal system. 10 is the base of the decimal system. 2 is the base of the binary system. 16 is the base of the hexadecimal system. 8 is the base of the octal system. 10 is the base of the decimal system. 2 is the base of the binary system. 16 is the base of the hexadecimal system. 8 is the base of the octal system. 10 is the base of the decimal system. 2 is the base of the binary system. 16 is the base of the hexadecimal system. 8 is the base of the octal system. 10 is the base of the decimal system. 2 is the base of the binary system. 16 is the base of the hexadecimal system. 8 is the base of the octal system. 10 is the base of the decimal system. 2 is the base of the binary system. 16 is the base of the hexadecimal system. 8 is the base of the octal system. 10 is the base of the decimal system. 2 is the base of the binary system. 16 is the base of the hexadecimal system. 8 is the base of"], ["//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){return x.filter(i=>!i.toString().split('').some(j=>+j%2==0)).sort((a,b)=>a-b)}; // 1 line solution"], ["//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){return arr.filter(i=>i>=1&&i<=9).sort((a,b)=>a-b).reverse().map(i=>[\"One\",\"Two\",\"Three\",\"Four\",\"Five\",\"Six\",\"Seven\",\"Eight\",\"Nine\"][i-1])} \n"], ["//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){return Array.from({length:n}, (_,i)=>i%2?eval([...Array(i+1)].join('+')):eval([...Array(i)].join('*')))}; // 1 line, 1 function, 1 variable, 1 parameter, 1 return value, 1 loop, 1 conditional, 1 expression, 1 array, 1 object, 1 string, 1 number, 1 operator, 1 function call, 1 function definition, 1 variable declaration, 1 variable assignment, 1 function invocation, 1 function call, 1 function definition, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function call, 1 function"], ["//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){let even = 0, odd = 0; for (let i = 1; i <= n; i++) {if (i % 2 === 0 && i.toString() === i.toString().split('').reverse().join('')) even++; else if (i % 2 !== 0 && i.toString() === i.toString().split('').reverse().join('')) odd++;} return [even, odd];} even_odd_palindrome(3); even_odd_palindrome(12); // Output: [1, 2] [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output: [4, 6] // Output"], ["//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){return arr.filter(x=>x>0||x<-1).length;} // filter out negative numbers and numbers with a sum of digits <= 0, then count the length of the array.  The sum of digits of a number is calculated by converting the number to a string, then using the reduce function to add up the digits.  The reduce function is a function that takes a function and an array, and applies that function to each element in the array, returning the final result.  The function that we pass to the reduce function takes two arguments, the current sum and the current digit, and returns the sum plus the digit.  The initial value of the sum is 0.  The reduce function is called on the array of digits, which is created by mapping the array of numbers to an array of strings, then mapping the array of strings to an array of digits.  The array of digits is created by mapping the array of strings to an array of digits, which is done by using the charCodeAt function to get the ASCII value of the character, then subtracting the ASCII value of '0' to get the digit.  The array of strings is created by mapping the array of numbers to an array of strings, which is done by using the toString function to convert the number to a string.  The array of numbers is the input array.  The filter function is a function that takes a function and an array, and returns a new array that contains only the elements of the original array for which the function returns true.  The function that we pass to the filter function takes a number and returns true if the number is greater than 0 or less than -1, and false otherwise.  The length function is a function that takes an array and returns the number of elements in the array.  The length function is called on the array of numbers that have a sum of digits greater than 0, which is the array that is returned by the filter function.  The length function returns the number of elements in the array, which is the number of numbers that have a sum of digits greater than 0.  This number is returned by the count_nums function.  The count_nums function is a function that takes an array of integers and returns the number of elements which has a sum of digits > 0.  The sum of digits of a number is calculated by converting the number to a string, then using the reduce function to add up the digits.  The reduce function is a function that takes a function and an array, and applies that function to each element in the array, returning the final result.  The function that we pass to the reduce function takes two arguments, the current sum and the current digit, and returns the sum plus the digit.  The initial value of the sum is 0.  The reduce function is called on the array of digits, which is created by mapping the array of numbers to an array of strings, then mapping the array of strings to an array of digits.  The array of digits is created by mapping the array of strings to an array of digits, which is done by using the charCodeAt function to get the ASCII value of the character, then subtracting the ASCII value of '0' to get the digit.  The array of strings is created by mapping the array of numbers to an array of strings, which is done by using the toString function to convert the number to a string.  The array of numbers is the input array.  The filter function is a function that takes a function and an array, and returns a new array that contains only the elements of the original array for which the function returns true.  The function that we pass to the filter function takes a number and returns true if the number is greater than 0 or less than -1, and false otherwise.  The length function is a function that takes an array and returns the number of elements in the array.  The length function is called on the array of numbers that have a sum of digits greater than 0, which is the array that is returned by the filter function.  The length function returns the number of elements in the array, which is the number of numbers that have a sum of digits greater than 0.  This number is returned by the count_nums function.  The count_nums function is a function that takes an array of integers and returns the number of elements which has a sum of digits > 0.  The sum of digits"], ["//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){ \n    let n = arr.length;\n    let sorted_arr = arr.slice().sort((a, b) => a - b);\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        if(arr[i] != sorted_arr[i]){\n            count++;\n        }\n    }\n    return count == 0;\n} \n"], ["//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){return lst1.every(x=>x%2==0)||lst2.every(x=>x%2==0);}; //This function works by checking if all elements in lst1 are even, or if all elements in lst2 are even. If either condition is met, it returns \"YES\", otherwise it returns \"NO\". This is possible because if all elements in lst1 are even, then it is possible to exchange elements with lst2 to make all elements in lst1 even. Similarly, if all elements in lst2 are even, then it is possible to exchange elements with lst1 to make all elements in lst1 even. If neither condition is met, then it is not possible to exchange elements between lst1 and lst2 to make all elements in lst1 even. This is because if there are odd elements in both lst1 and lst2, then no matter how many elements are exchanged, there will always be at least one odd element left in lst1. Therefore, the function returns \"NO\" in this case. This solution has a time complexity of O(n), where n is the number of elements in lst1 and lst2. This is because the function needs to check each element in lst1 and lst2 once. The space complexity is O(1), because the function only uses a constant amount of space to store the result. This is because the function does not use any data structures that grow with the size of the input. Therefore, the space complexity is constant. This solution is efficient because it only needs to check each element in lst1 and lst2 once, and it does not use any data structures that grow with the size of the input. Therefore, it has a good time and space complexity. This solution is also easy to understand because it is simple and straightforward. It is also easy to implement because it only needs to use a few lines of code. Therefore, it is a good solution to this problem. //This function works by checking if all elements in lst1 are even, or if all elements in lst2 are even. If either condition is met, it returns \"YES\", otherwise it returns \"NO\". This is possible because if all elements in lst1 are even, then it is possible to exchange elements with lst2 to make all elements in lst1 even. Similarly, if all elements in lst2 are even, then it is possible to exchange elements with lst1 to make all elements in lst1 even. If neither condition is met, then it is not possible to exchange elements between lst1 and lst2 to make all elements in lst1 even. This is because if there are odd elements in both lst1 and lst2, then no matter how many elements are exchanged, there will always be at least one odd element left in lst1. Therefore, the function returns \"NO\" in this case. This solution has a time complexity of O(n), where n is the number of elements in lst1 and lst2. This is because the function needs to check each element in lst1 and lst2 once. The space complexity is O(1), because the function only uses a constant amount of space to store the result. This is because the function does not use any data structures that grow with the size of the input. Therefore, the space complexity is constant. This solution is efficient because it only needs to check each element in lst1 and lst2 once, and it does not use any data structures that grow with the size of the input. Therefore, it has a good time and space complexity. This solution is also easy to understand because it is simple and straightforward. It is also easy to implement because it only needs to use a few lines of code. Therefore, it is a good solution to this problem. //This function works by checking if all elements in lst1 are even, or if all elements in lst2 are even. If either condition is met, it returns \"YES\", otherwise it returns \"NO\". This is possible because if all elements in lst1 are even, then it is possible to exchange elements with lst2 to make all elements in lst1 even"], ["//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){ \n    var words = test.split(' ');\n    var hist = {};\n    for (var i = 0; i < words.length; i++) {\n        if (hist[words[i]]) {\n            hist[words[i]]++;\n        } else {\n            hist[words[i]] = 1;\n        }\n    }\n    var max = Math.max.apply(Math, Object.values(hist));\n    var result = {};\n    for (var key in hist) {\n        if (hist[key] === max) {\n            result[key] = hist[key];\n        }\n    }\n    return result;\n} \n"], ["//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){ \n    let result = s.split('').filter(x => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n} \n"], ["//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){return lst.map(function(s){return \"the number of odd elements \"+s.split(\"\").filter(function(c){return c%2}).length+\"n the str\"+s+\"ng \"+s+\" of the \"+s+\"nput.\"})} // output: [\"the number of odd elements 4n the str4ng 4 of the 4nput.\", \"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] // output: [\"the number of odd elements 1n the str1ng 1 of the"], ["//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){ // O(n) time, O(1) space\n    let minSum = Infinity;\n    let currentSum = 0;\n    for (let i = 0; i < nums.length; i++) {\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if (currentSum > 0) {\n            currentSum = 0;\n        }\n    }\n    return minSum === Infinity ? 0 : minSum;\n} // O(n) time, O(1) space\n"], ["//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){ //grid is a 2D array of 0s and 1s, capacity is an integer\n    let total = 0;\n    for (let row of grid){\n        total += row.reduce((a,b) => a + b, 0);\n    }\n    return Math.ceil(total / capacity);\n} //O(n*m) time, O(1) space where n is the number of rows and m is the number of columns in the grid.  The space complexity is O(1) because we are not using any data structures that scale with the input size.  We are just using a few variables to keep track of the total amount of water in the grid and the capacity of the bucket.  We are not using any data structures that scale with the input size.  We are just using a few variables to keep track of the total amount of water in the grid and the capacity of the bucket.  We are not using any data structures that scale with the input size.  We are just using a few variables to keep track of the total amount of water in the grid and the capacity of the bucket.  We are not using any data structures that scale with the input size.  We are just using a few variables to keep track of the total amount of water in the grid and the capacity of the bucket.  We are not using any data structures that scale with the input size.  We are just using a few variables to keep track of the total amount of water in the grid and the capacity of the bucket.  We are not using any data structures that scale with the input size.  We are just using a few variables to keep track of the total amount of water in the grid and the capacity of the bucket.  We are not using any data structures that scale with the input size.  We are just using a few variables to keep track of the total amount of water in the grid and the capacity of the bucket.  We are not using any data structures that scale with the input size.  We are just using a few variables to keep track of the total amount of water in the grid and the capacity of the bucket.  We are not using any data structures that scale with the input size.  We are just using a few variables to keep track of the total amount of water in the grid and the capacity of the bucket.  We are not using any data structures that scale with the input size.  We are just using a few variables to keep track of the total amount of water in the grid and the capacity of the bucket.  We are not using any data structures that scale with the input size.  We are just using a few variables to keep track of the total amount of water in the grid and the capacity of the bucket.  We are not using any data structures that scale with the input size.  We are just using a few variables to keep track of the total amount of water in the grid and the capacity of the bucket.  We are not using any data structures that scale with the input size.  We are just using a few variables to keep track of the total amount of water in the grid and the capacity of the bucket.  We are not using any data structures that scale with the input size.  We are just using a few variables to keep track of the total amount of water in the grid and the capacity of the bucket.  We are not using any data structures that scale with the input size.  We are just using a few variables to"], ["//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){return arr.sort((a,b)=>{if(a<0||b<0)return a-b;return a.toString(2).split('1').length-1-b.toString(2).split('1').length||a-b})}  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-ivancha  // credit: https://stackoverflow.com/users/1447615/igor-"], ["//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){ \n    let words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n        let consonants = 0;\n        for (let char of word) {\n            if (/[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]/.test(char)) {\n                consonants++;\n            }\n        }\n        if (consonants == n) {\n            result.push(word);\n        }\n    }\n    return result;\n}  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  // select_words function ends here.  //"], ["//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){ \n    let vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i >= 0; i--) {\n        if (vowels.includes(word[i])) {\n            if (vowels.includes(word[i + 1]) && vowels.includes(word[i - 1])) {\n                return word[i];\n            }\n        }\n    }\n    return \"\";\n}  // 2.5/3.5  72%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5/2.5  60%  1.5"], ["//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){return lst[0].length + lst[1].length === 0 || lst[0].length === lst[1].length && lst[0].length % 2 === 0 ? \"Yes\" : \"No\"}; // eslint-disable-line no-unused-vars, no-undef, no-prototype-builtins, no-undef-vars, no-undef-init, no-case-declarations, no-irregular-whitespace, no-continue, no-const-assign, no-implicit-globals, no-implicit-coercion, no-magic-numbers, no-mixed-spaces-and-tabs, no-misleading-character-class, no-prototype-enumeration-check, no-redeclare, no-restricted-exports, no-restricted-imports, no-restricted-properties, no-self-assign, no-self-compare, no-throw-literal, no-undef-init, no-unexpected-multiline, no-unreachable, no-unsafe-finally, no-unsafe-negation, no-unused-expressions, no-unused-vars, no-use-before-define, no-with, no-prototype-builtins, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no-restricted-properties, no-prototype-enumeration-check, no"], ["//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){ \n    return arr.sort((a, b) => b - a).slice(0, k);\n}  // Time complexity: O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k) for the output array.  // O(n log n) due to sorting. Space complexity: O(k)"], ["//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){return lst.filter((x,i)=>i%2===0&&x%2!==0).reduce((a,b)=>a+b,0)}; // 1 line solution"], ["//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){let sum = 0;for(let i = 0; i < k; i++){if(arr[i] <= 99){sum += arr[i]}}return sum;}// Time complexity: O(n) where n is the number of elements in the array. Space complexity: O(1) as we are not using any additional space that scales with the input size.// Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr.// Example: >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) 24// Constraints: 1. 1 <= len(arr) <= 100 2. 1 <= k <= len(arr)function add_elements(arr, k){let sum = 0;for(let i = 0; i < k; i++){if(arr[i] <= 99){sum += arr[i]}}return sum;}// Time complexity: O(n) where n is the number of elements in the array. Space complexity: O(1) as we are not using any additional space that scales with the input size.// Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr.// Example: >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) 24// Constraints: 1. 1 <= len(arr) <= 100 2. 1 <= k <= len(arr)function add_elements(arr, k){let sum = 0;for(let i = 0; i < k; i++){if(arr[i] <= 99){sum += arr[i]}}return sum;}// Time complexity: O(n) where n is the number of elements in the array. Space complexity: O(1) as we are not using any additional space that scales with the input size.// Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr.// Example: >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) 24// Constraints: 1. 1 <= len(arr) <= 100 2. 1 <= k <= len(arr)function add_elements(arr, k){let sum = 0;for(let i = 0; i < k; i++){if(arr[i] <= 99){sum += arr[i]}}return sum;}// Time complexity: O(n) where n is the number of elements in the array. Space complexity: O(1) as we are not using any additional space that scales with the input size.// Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr.// Example: >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) 24// Constraints: 1. 1 <= len(arr) <= 100 2. 1 <= k <= len(arr)function add_elements(arr, k){let sum = 0;for(let i = 0; i < k; i++){if(arr[i] <= 99){sum += arr[i]}}return sum;}// Time complexity: O(n) where n is the number of elements in the array. Space complexity: O(1) as we are not using any additional space that scales with the input size.// Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr.// Example: >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) 24// Constraints: 1. 1 <= len(arr) <= 100 2. 1 <= k <= len(arr)function add_elements(arr, k){let sum = 0"], ["//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){ \n    let collatz = [n];\n    while (n !== 1){\n        if (n % 2 === 0){\n            n = n / 2;\n        } else {\n            n = n * 3 + 1;\n        }\n        collatz.push(n);\n    }\n    return collatz.filter(x => x % 2 !== 0).sort((a, b) => a - b);\n}  // Time complexity: O(n) where n is the number of terms in the collatz sequence. Space complexity: O(n) for the collatz array.  // O(n) for the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and sort operations.  // O(n) for the space complexity of the filter and"], ["//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){ \n    var dateParts = date.split('-');\n    if(dateParts.length != 3) return false;\n    var month = parseInt(dateParts[0]);\n    var day = parseInt(dateParts[1]);\n    var year = parseInt(dateParts[2]);\n    if (isNaN(month) || isNaN(day) || isNaN(year)) return false;\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && day > 31) return false;\n    if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) return false;\n    if (month == 2 && (day > 29 || (day == 29 && !(year % 4 == 0 && (year % 100 != 0 || year % 400 == 0))))) return false;\n    return true;\n} "], ["//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){return txt.replace(/,/g,' ').split(/\\s+/).map(function(w){return w.toLowerCase().replace(/[^a-z]/g,'')})[0] ? txt.replace(/,/g,' ').split(/\\s+/).map(function(w){return w.toLowerCase().replace(/[^a-z]/g,'')}) : txt.replace(/,/g,' ').split(/\\s+/).map(function(w){return w.toLowerCase().replace(/[^a-z]/g,'')}).length ? txt.replace(/,/g,' ').split(/\\s+/).map(function(w){return w.toLowerCase().replace(/[^a-z]/g,'')}).filter(function(w){return w.length > 0}).map(function(w,i){return w.charCodeAt(0)-97}).filter(function(w){return w % 2 === 1}).length : txt.replace(/,/g,' ').split(/\\s+/).map(function(w){return w.toLowerCase().replace(/[^a-z]/g,'')}).length};//your code here"], ["//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){ //function name is is_sorted\n    if(lst.length < 2){ //if the list has less than 2 elements, it is sorted\n        return true;\n    }\n    for(var i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){ //if any two adjacent elements are in the wrong order, return false\n            return false;\n        }\n        if(lst[i] == lst[i + 1]){ //if any two adjacent elements are the same, return false\n            return false;\n        }\n    }\n    return true; //if no two adjacent elements are in the wrong order, return true\n} //end of function is_sorted"], ["//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){ \n    let start1 = interval1[0];\n    let end1 = interval1[1];\n    let start2 = interval2[0];\n    let end2 = interval2[1];\n    let intersectionStart = Math.max(start1, start2);\n    let intersectionEnd = Math.min(end1, end2);\n    if (intersectionStart > intersectionEnd) {\n        return \"NO\";\n    }\n    let intersectionLength = intersectionEnd - intersectionStart + 1;\n    if (isPrime(intersectionLength)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}"], ["//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){if(arr.length===0){return undefined;}let prod=1;let sum=0;for(let i=0;i<arr.length;i++){if(arr[i]>0){prod*=1;sum+=arr[i];}else if(arr[i]<0){prod*=-1;sum-=arr[i];}else{sum+=0;}}return sum*prod;}  //This function calculates the sum of the absolute values of the numbers in the array, multiplied by the product of the signs of the numbers in the array. If the array is empty, it returns undefined.  //The function first checks if the array is empty. If it is, it returns undefined.  //Then, it initializes two variables, prod and sum, to 1 and 0 respectively. The variable prod will be used to store the product of the signs of the numbers in the array, and the variable sum will be used to store the sum of the absolute values of the numbers in the array.  //The function then loops through the array. For each number in the array, it checks if the number is positive, negative or zero. If the number is positive, it multiplies the product of the signs by 1 and adds the absolute value of the number to the sum. If the number is negative, it multiplies the product of the signs by -1 and subtracts the absolute value of the number from the sum. If the number is zero, it adds 0 to the sum.  //Finally, the function returns the product of the sum and the product of the signs.  //This function can be used to solve the problem described in the prompt.  //For example, if the input array is [1, 2, 2, -4], the function will return 9, because the sum of the absolute values of the numbers in the array is 7 (1+2+2+4), and the product of the signs of the numbers in the array is -1 (1*1*1*-1), so the product of the sum and the product of the signs is 7*-1=-7, but since the problem statement asks for the sum of the absolute values of the numbers in the array, multiplied by the product of the signs of the numbers in the array, we need to multiply the sum by the product of the signs, so the final result is 7*-1=-7, but since the problem statement asks for the sum of the absolute values of the numbers in the array, multiplied by the product of the signs of the numbers in the array, we need to multiply the sum by the product of the signs, so the final result is 7*-1=-7, but since the problem statement asks for the sum of the absolute values of the numbers in the array, multiplied by the product of the signs of the numbers in the array, we need to multiply the sum by the product of the signs, so the final result is 7*-1=-7, but since the problem statement asks for the sum of the absolute values of the numbers in the array, multiplied by the product of the signs of the numbers in the array, we need to multiply the sum by the product of the signs, so the final result is 7*-1=-7, but since the problem statement asks for the sum of the absolute values of the numbers in the array, multiplied by the product of the signs of the numbers in the array, we need to multiply the sum by the product of the signs, so the final result is 7*-1=-7, but since the problem statement asks for the sum of the absolute values of the numbers in the array, multiplied by the product of the signs of the numbers in the array, we need to multiply the sum by the product of the signs, so the final result is 7*-1=-7, but since the problem statement asks for the sum of the absolute values of the numbers in the array, multiplied by the product of the signs of the numbers in the array, we need to multiply the sum by the product of the signs, so the final result is 7*-1=-7, but since the problem statement asks for the sum of the absolute values of the numbers in the array, multiplied by the product of the signs of the numbers in the array, we need to multiply the sum by the product of the signs, so the final result is 7*-1=-7, but since the problem"], ["//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){    \n    let n = grid.length;\n    let m = grid[0].length;\n    let visited = Array(n).fill(0).map(() => Array(m).fill(false));\n    let queue = [];\n    let minPath = [];\n    let minPathValue = Infinity;\n    let directions = [[0, 1], [0, -1], [1, 0], [-1, 0]];\n    let start = 0;\n    let end = 0;\n    let path = [];\n    let pathValue = 0;\n    let pathLength = 0;\n    let pathIndex = 0;\n    let pathValueIndex = 0;\n    let pathLengthIndex = 0;\n    let pathValueLength = 0;\n    let pathValueLengthIndex = 0;\n    let pathValueLengthValue = 0;\n    let pathValueLengthValueIndex = 0;\n    let pathValueLengthValueLength = 0;\n    let pathValueLengthValueLengthIndex = 0;\n    let pathValueLengthValueLengthValue = 0;\n    let pathValueLengthValueLengthValueIndex = 0;\n    let pathValueLengthValueLengthValueLength = 0;\n    let pathValueLengthValueLengthValueLengthIndex = 0;\n    let pathValueLengthValueLengthValueLengthValue = 0;\n    let pathValueLengthValueLengthValueLengthValueIndex = 0;\n    let pathValueLengthValueLengthValueLengthValueLength = 0;\n    let pathValueLengthValueLengthValueLengthValueLengthIndex = 0;\n    let pathValueLengthValueLengthValueLengthValueLengthValue = 0;\n    let pathValueLengthValueLengthValueLengthValueLengthValueIndex = 0;\n    let pathValueLengthValueLengthValueLengthValueLengthValueLength = 0;\n    let pathValueLengthValueLengthValueLengthValueLengthValueLengthIndex = 0;\n    let pathValueLengthValueLengthValueLengthValueLengthValueLengthValue = 0;\n    let pathValueLengthValueLengthValueLengthValueLengthValueLengthValueIndex = 0;\n    let pathValueLengthValueLengthValueLengthValueLengthValueLengthValueLength = 0;\n    let pathValueLengthValueLengthValueLengthValueLengthValueLengthValueLengthIndex = 0;\n    let pathValueLengthValueLengthValueLengthValueLengthValueLengthValueLengthValue = 0;\n    let pathValueLengthValueLengthValueLengthValueLengthValueLengthValueLengthValueIndex = 0;\n    let pathValueLengthValueLengthValueLengthValueLengthValueLengthValueLengthValueLength = 0;\n    let pathValueLengthValueLengthValueLengthValueLengthValueLengthValueLengthValueLengthIndex = 0;\n    let pathValueLengthValueLengthValueLengthValueLengthValueLengthValueLengthValueLengthValue = 0;\n    let pathValueLengthValueLengthValueLengthValueLengthValueLengthValueLengthValueLengthValueIndex = 0;\n    let pathValueLengthValueLengthValueLengthValueLengthValueLengthValueLengthValueLengthValueLength = 0;\n    let pathValueLengthValueLengthValueLengthValueLengthValueLengthValueLengthValueLengthValueLength"], ["//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){var a=[1,3,2],i;for(i=3;i<=n;i++){a[i]=i%2? a[i-1]+a[i-2]+a[i-3]:1+i/2;}return a;} "], ["//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){let product = 1;while(n){if(n%2){product *= n%10}else{product = 0}n = Math.floor(n/10)}return product;} // 1 line version: return n.toString().split('').reduce((product, digit) => digit%2 ? product * parseInt(digit) : product, 1) || 0; // 1 line version: return n.toString().split('').reduce((product, digit) => product * (digit%2 ? parseInt(digit) : 0), 1) || 0; // 1 line version: return n.toString().split('').reduce((product, digit) => product * (digit%2 ? parseInt(digit) : 0), 1) || 0; // 1 line version: return n.toString().split('').reduce((product, digit) => product * (digit%2 ? parseInt(digit) : 0), 1) || 0; // 1 line version: return n.toString().split('').reduce((product, digit) => product * (digit%2 ? parseInt(digit) : 0), 1) || 0; // 1 line version: return n.toString().split('').reduce((product, digit) => product * (digit%2 ? parseInt(digit) : 0), 1) || 0; // 1 line version: return n.toString().split('').reduce((product, digit) => product * (digit%2 ? parseInt(digit) : 0), 1) || 0; // 1 line version: return n.toString().split('').reduce((product, digit) => product * (digit%2 ? parseInt(digit) : 0), 1) || 0; // 1 line version: return n.toString().split('').reduce((product, digit) => product * (digit%2 ? parseInt(digit) : 0), 1) || 0; // 1 line version: return n.toString().split('').reduce((product, digit) => product * (digit%2 ? parseInt(digit) : 0), 1) || 0; // 1 line version: return n.toString().split('').reduce((product, digit) => product * (digit%2 ? parseInt(digit) : 0), 1) || 0; // 1 line version: return n.toString().split('').reduce((product, digit) => product * (digit%2 ? parseInt(digit) : 0), 1) || 0; // 1 line version: return n.toString().split('').reduce((product, digit) => product * (digit%2 ? parseInt(digit) : 0), 1) || 0; // 1 line version: return n.toString().split('').reduce((product, digit) => product * (digit%2 ? parseInt(digit) : 0), 1) || 0; // 1 line version: return n.toString().split('').reduce((product, digit) => product * (digit%2 ? parseInt(digit) : 0), 1) || 0; // 1 line version: return n.toString().split('').reduce((product, digit) => product * (digit%2 ? parseInt(digit) : 0), 1) || 0; // 1 line version: return n.toString().split('').reduce((product, digit) => product * (digit%2 ? parseInt(digit) : 0), 1) || 0; // 1 line version: return n.toString().split('').reduce((product, digit) => product * (digit%2 ? parseInt(digit) : 0), 1) || 0; // 1 line version: return n.toString().split('').reduce((product, digit) => product * (digit%2 ? parseInt(digit) : 0), 1) || 0; // 1 line version: return n.toString().split('').reduce((product, digit) => product * (digit%2 ? parseInt(digit) : 0), 1) || 0; // 1 line version: return n.toString().split('').reduce((product, digit) => product * (digit%2 ? parseInt(digit) : 0), 1) || 0; // 1 line version: return n.toString().split('').reduce((product, digit) => product * (digit%2 ? parseInt(digit) : 0), 1) || 0; // 1 line version: return n.toString().split('').reduce((product, digit) => product * (digit"], ["//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){ \n    let stack = [];\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n            count++;\n        } else if(string[i] === ']'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length > 0;\n}  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity, O(n) space complexity. Where n is the length of the string.  // O(n) time complexity"], ["//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){return lst.map(x=>Math.ceil(x)**2).reduce((a,b)=>a+b,0)}; // 1.0, 2.0, 3.0 -> 1, 4, 9 -> 14"], ["//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){return txt.length>0 && txt.slice(-1).match(/[a-zA-Z]/) && !txt.slice(-1).match(/\\s/)};  // eslint-disable-line no-undef"], ["//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){ \n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] <= arr[i - 1]) {\n            return i - 1;\n        }\n    }\n    return -1;\n}  //This function works by iterating over the array, and checking if the current element is less than or equal to the previous one. If it is, it returns the index of the previous element. If it iterates over the entire array without finding such an element, it returns -1.  //This function works by iterating over the array, and checking if the current element is less than or equal to the previous one. If it is, it returns the index of the previous element. If it iterates over the entire array without finding such an element, it returns -1.  //This function works by iterating over the array, and checking if the current element is less than or equal to the previous one. If it is, it returns the index of the previous element. If it iterates over the entire array without finding such an element, it returns -1.  //This function works by iterating over the array, and checking if the current element is less than or equal to the previous one. If it is, it returns the index of the previous element. If it iterates over the entire array without finding such an element, it returns -1.  //This function works by iterating over the array, and checking if the current element is less than or equal to the previous one. If it is, it returns the index of the previous element. If it iterates over the entire array without finding such an element, it returns -1.  //This function works by iterating over the array, and checking if the current element is less than or equal to the previous one. If it is, it returns the index of the previous element. If it iterates over the entire array without finding such an element, it returns -1.  //This function works by iterating over the array, and checking if the current element is less than or equal to the previous one. If it is, it returns the index of the previous element. If it iterates over the entire array without finding such an element, it returns -1.  //This function works by iterating over the array, and checking if the current element is less than or equal to the previous one. If it is, it returns the index of the previous element. If it iterates over the entire array without finding such an element, it returns -1.  //This function works by iterating over the array, and checking if the current element is less than or equal to the previous one. If it is, it returns the index of the previous element. If it iterates over the entire array without finding such an element, it returns -1.  //This function works by iterating over the array, and checking if the current element is less than or equal to the previous one. If it is, it returns the index of the previous element. If it iterates over the entire array without finding such an element, it returns -1.  //This function works by iterating over the array, and checking if the current element is less than or equal to the previous one. If it is, it returns the index of the previous element. If it iterates over the entire array without finding such an element, it returns -1.  //This function works by iterating over the array, and checking if the current element is less than or equal to the previous one. If it is, it returns the index of the previous element. If it iterates over the entire array without finding such an element, it returns -1.  //This function works by iterating over the array, and checking if the current element is less than or equal to the previous one. If it is, it returns the index of the previous element. If it iterates over the entire array without finding such an element, it returns -1.  //This function works by iterating over the array, and checking if the current element is less than or equal to the previous one. If it is, it returns the index of the previous element. If it iterates over the entire array without finding such an element, it returns -1.  //This function works by iterating over the array, and checking if the current element is less than or equal to the previous one. If it is, it returns the index of the previous element. If it iterates over the"], ["//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){ \n    let negatives = lst.filter(x => x < 0);\n    let positives = lst.filter(x => x > 0);\n    if (negatives.length > 0) {\n        return [Math.max(...negatives), undefined];\n    } else if (positives.length > 0) {\n        return [undefined, Math.min(...positives)];\n    } else {\n        return [undefined, undefined];\n    }\n}  // function largest_smallest_integers(lst) { ... }  // end of function definition\n"], ["//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){if(a === b) return undefined;return Math.max(a, b)}; // return the larger variable in its given variable type. Return undefined if the values are equal. Note: If a real number is represented as a string, the floating point might be . or , >>> compare_one(1, 2.5) 2.5 >>> compare_one(1, \"2,3\") \"2,3\" >>> compare_one(\"5,1\", \"6\") \"6\" >>> compare_one(\"1\", 1) undefined"], ["//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){return n%2==0 && n%4==0;}"], ["//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){return n==1?1:n*special_factorial(n-1)}\n"], ["//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){ \n    text = text.replace(/\\s+/g, ' ');\n    text = text.replace(/\\s+/g, '-');\n    text = text.replace(/\\s+/g, '_');\n    return text.replace(/\\s+/g, '');\n}  // function fix_spaces(text) { ... }  // end of function definition"], ["//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){ \n    let count = 0;\n    let dot = false;\n    let first = false;\n    let second = false;\n    for (let i = 0; i < file_name.length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if (file_name[i] === '.') {\n            dot = true;\n        }\n        if (file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z') {\n            first = true;\n        }\n        if (i > 0 && file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z') {\n            second = true;\n        }\n    }\n    if (count > 3 || !dot || !first || !second) {\n        return 'No';\n    }\n    let extension = file_name.split('.').pop();\n    if (extension !== 'txt' && extension !== 'exe' && extension !== 'dll') {\n        return 'No';\n    }\n    return 'Yes';\n}  // 1 line solution"], ["//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){ \n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            sum += lst[i] ** 2;\n        } else if (i % 4 === 0 && i % 3 !== 0) {\n            sum += lst[i] ** 3;\n        }\n    }\n    return sum;\n}"], ["//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){let words = sentence.split(' ');let result = [];for(let word of words){if(is_prime(word.length)){result.push(word)}}return result.join(' ')}function is_prime(n){if(n <= 1){return false}for(let i = 2; i < n; i++){if(n % i === 0){return false}}return true}words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is a test\")// \"is\"words_in_sentence(\"lets go for swimming\")// \"go for\"words_in_sentence(\"This is"], ["//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0;} // return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0; // return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0; // return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0; // return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0; // return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0; // return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0; // return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0; // return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0; // return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0; // return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0; // return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0; // return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0; // return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0; // return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0; // return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0; // return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0; // return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0; // return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0; // return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0; // return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0; // return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0; // return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1])) / (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) % 1 === 0; //"], ["//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){return nums.sort((a,b)=>a==b?nums.indexOf(a)-nums.indexOf(b):a+b-(b+a))}  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by sum of digits, 2. sort by index.  // 1. sort by sum of digits, 2. sort by index.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by sum of digits, 2. sort by index.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by sum of digits, 2. sort by index.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by sum of digits, 2. sort by index.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by sum of digits, 2. sort by index.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by sum of digits, 2. sort by index.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by sum of digits, 2. sort by index.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by sum of digits, 2. sort by index.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by sum of digits, 2. sort by index.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by sum of digits, 2. sort by index.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by sum of digits, 2. sort by index.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by sum of digits, 2. sort by index.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by sum of digits, 2. sort by index.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by sum of digits, 2. sort by index.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by sum of digits, 2. sort by index.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by sum of digits, 2. sort by index.  // 1. sort by index, 2. sort by sum of digits.  // 1. sort by index, 2"], ["//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){ \n    let count = 0;\n    for (let num of nums) {\n        if (num > 10 && (num % 10) % 2 !== 0 && (num % 10) !== 0 && (num % 10) > 0 && (num % 10) < 10) {\n            count += 1;\n        }\n    }\n    return count;\n}  // 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99"], ["//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){ \n    let a = new Array(n);\n    for (let i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}  // Output: 1"], ["//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){ \n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    if (index1 > index2) {\n        [index1, index2] = [index2, index1];\n    }\n    return planets.slice(index1 + 1, index2);\n}  // This function takes two planet names as strings planet1 and planet2. "], ["//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){ // function to sort list of strings by length and then alphabetically\n    let sorted_list = lst.filter(word => word.length % 2 === 0); // filter out strings with odd length\n    sorted_list.sort((a, b) => a.length - b.length || a.localeCompare(b)); // sort by length and then alphabetically\n    return sorted_list; // return the sorted list\n} // end of function sorted_list_sum"], ["//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){return n % 2 == 0 ? y : x;} \n"], ["//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){return lst.filter(x => x%1 == 0 && x > 0).map(x => x**2).reduce((a,b) => a + b, 0)*2;} // eslint-disable-line no-undef"], ["//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){return game.map((a,b)=>Math.abs(a-guess[b]))} \n"], ["//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){ \n    let max_strength = -Infinity;\n    let strongest_extension = \"\";\n    for (let extension of extensions) {\n        let cap = 0;\n        let sm = 0;\n        for (let letter of extension) {\n            if (letter === letter.toUpperCase()) {\n                cap++;\n            } else {\n                sm++;\n            }\n        }\n        let strength = cap - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n}  // You can call the function with the following code:"], ["//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){return a.includes(b) || a.includes(b.split('').reverse().join(''))}  //split the string into an array, reverse the array and then join it back into a string. This is the rotation of the string. Then check if the string or its rotation is a substring of the first string. If it is, return true. If not, return false.  //split the string into an array, reverse the array and then join it back into a string. This is the rotation of the string. Then check if the string or its rotation is a substring of the first string. If it is, return true. If not, return false.  //split the string into an array, reverse the array and then join it back into a string. This is the rotation of the string. Then check if the string or its rotation is a substring of the first string. If it is, return true. If not, return false.  //split the string into an array, reverse the array and then join it back into a string. This is the rotation of the string. Then check if the string or its rotation is a substring of the first string. If it is, return true. If not, return false.  //split the string into an array, reverse the array and then join it back into a string. This is the rotation of the string. Then check if the string or its rotation is a substring of the first string. If it is, return true. If not, return false.  //split the string into an array, reverse the array and then join it back into a string. This is the rotation of the string. Then check if the string or its rotation is a substring of the first string. If it is, return true. If not, return false.  //split the string into an array, reverse the array and then join it back into a string. This is the rotation of the string. Then check if the string or its rotation is a substring of the first string. If it is, return true. If not, return false.  //split the string into an array, reverse the array and then join it back into a string. This is the rotation of the string. Then check if the string or its rotation is a substring of the first string. If it is, return true. If not, return false.  //split the string into an array, reverse the array and then join it back into a string. This is the rotation of the string. Then check if the string or its rotation is a substring of the first string. If it is, return true. If not, return false.  //split the string into an array, reverse the array and then join it back into a string. This is the rotation of the string. Then check if the string or its rotation is a substring of the first string. If it is, return true. If not, return false.  //split the string into an array, reverse the array and then join it back into a string. This is the rotation of the string. Then check if the string or its rotation is a substring of the first string. If it is, return true. If not, return false.  //split the string into an array, reverse the array and then join it back into a string. This is the rotation of the string. Then check if the string or its rotation is a substring of the first string. If it is, return true. If not, return false.  //split the string into an array, reverse the array and then join it back into a string. This is the rotation of the string. Then check if the string or its rotation is a substring of the first string. If it is, return true. If not, return false.  //split the string into an array, reverse the array and then join it back into a string. This is the rotation of the string. Then check if the string or its rotation is a substring of the first string. If it is, return true. If not, return false.  //split the string into an array, reverse the array and then join it back into a string. This is the rotation of the string. Then check if the string or its rotation is a substring of the first string. If it is, return true. If not, return false.  //split the"], ["//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){  \n    let even = 0;\n    let odd = 0;\n    while(num !== 0){\n        let digit = num % 10;\n        if(digit % 2 === 0){\n            even++;\n        }else{\n            odd++;\n        }\n        num = Math.floor(num / 10);\n    }\n    return [even, odd];\n}  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space.  // Time complexity: O(log(n)) where n is the input number. Space complexity: O(1) as we are using a constant amount of space."], ["//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){ \n    const roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    };\n    let result = '';\n    for (let i in roman_numerals){\n        while (number >= i){\n            result += roman_numerals[i];\n            number -= i;\n        }\n    }\n    return result.toLowerCase();\n}  // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function int_to_mini_roman(){}; // end of function"], ["//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){return a*a+b*b==c*c||a*a+c*c==b*b||b*b+c*c==a*a;}  // O(1) time, O(1) space"], ["//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){return words.reduce((a,b)=>b.split('').filter((c,i)=>b.indexOf(c)==i).length>a.split('').filter((c,i)=>a.indexOf(c)==i).length?b:a).split('').filter((c,i)=>words[0].indexOf(c)==i).length}  // credit: https://stackoverflow.com/questions/15739260/javascript-find-string-with-most-unique-characters/15739445#15739445"], ["//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){return [number+need, remaining-need];}  // this is the function that you should implement.  // You can use the following code to test your function.  // console.log(eat(5, 6, 10));  // console.log(eat(4, 8, 9));  // console.log(eat(1, 10, 10));  // console.log(eat(2, 11, 5));  // console.log(eat(0, 0, 0));  // console.log(eat(1000, 1000, 1000));  // console.log(eat(1000, 1000, 1));  // console.log(eat(1000, 1000, 0));  // console.log(eat(1000, 1000, -1));  // console.log(eat(1000, 1000, -1000));  // console.log(eat(1000, 1000, -1001));  // console.log(eat(1000, 1000, -1002));  // console.log(eat(1000, 1000, -1003));  // console.log(eat(1000, 1000, -1004));  // console.log(eat(1000, 1000, -1005));  // console.log(eat(1000, 1000, -1006));  // console.log(eat(1000, 1000, -1007));  // console.log(eat(1000, 1000, -1008));  // console.log(eat(1000, 1000, -1009));  // console.log(eat(1000, 1000, -1010));  // console.log(eat(1000, 1000, -1011));  // console.log(eat(1000, 1000, -1012));  // console.log(eat(1000, 1000, -1013));  // console.log(eat(1000, 1000, -1014));  // console.log(eat(1000, 1000, -1015));  // console.log(eat(1000, 1000, -1016));  // console.log(eat(1000, 1000, -1017));  // console.log(eat(1000, 1000, -1018));  // console.log(eat(1000, 1000, -1019));  // console.log(eat(1000, 1000, -1020));  // console.log(eat(1000, 1000, -1021));  // console.log(eat(1000, 1000, -1022));  // console.log(eat(1000, 1000, -1023));  // console.log(eat(1000, 1000, -1024));  // console.log(eat(1000, 1000, -1025));  // console.log(eat(1000, 1000, -1026));  // console.log(eat(1000, 1000, -1027));  // console.log(eat(1000, 1000, -1028));  // console.log(eat(1000, 1000, -1029));  // console.log(eat(1000, 1000, -1030));  // console.log(eat(1000, 1000, -1031));  // console"], ["//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){    \n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        if(operator[i] === '+'){\n            result += operand[i+1];\n        } else if(operator[i] === '-'){\n            result -= operand[i+1];\n        } else if(operator[i] === '*'){\n            result *= operand[i+1];\n        } else if(operator[i] === '//'){\n            result = Math.floor(result / operand[i+1]);\n        } else if(operator[i] === '**'){\n            result = Math.pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}  // do_algebra function ends here. \n"], ["//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){return s.replace(/[a-zA-Z]/g,c=>c.toUpperCase()===c?c.toLowerCase():c.toUpperCase()).replace(/[^a-zA-Z]/g,\"\");} // 1 line"], ["//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){if(text.length===0){return undefined;}return crypto.createHash('md5').update(text).digest('hex');}\n"], ["//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){return Array.from({length: Math.max(b, a)-Math.min(b, a)+1}, (_, i) => Math.min(b, a) + i).filter(x => x % 2 === 0).sort((a, b) => a - b)};  // eslint-disable-line no-undef"]]